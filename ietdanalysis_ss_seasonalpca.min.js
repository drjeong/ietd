class SeasonalPCAPlot extends FloatingBootboxChart{constructor(containerId,IETDhour,IETDData){super(containerId);this.containerId=containerId;this.IETDhour=IETDhour;this.IETDData=IETDData;this.margin={top:20,right:20,bottom:50,left:60};this.title="Seasonal PCA Analysis";this.symbolSize=30;const container=d3.select(`#${this.containerId}`);this.width=parseInt(container.style("width"));this.height=parseInt(container.style("height"));this.innerWidth=this.width-this.margin.left-this.margin.right;this.innerHeight=this.height-this.margin.top-this.margin.bottom;const years=[...new Set(this.IETDData.map(d=>new Date(d[0]).getFullYear()))];const minYear=Math.min(...years);const maxYear=Math.max(...years);this.colorScale=d3.scaleSequential(d3.interpolateViridis).domain([minYear,maxYear]);this.seasonSymbols={Spring:d3.symbolCircle,Summer:d3.symbolSquare,Fall:d3.symbolTriangle,Winter:d3.symbolDiamond};this.resize=this.resize.bind(this);this.processData=this.processData.bind(this);this.processData();this.init()}getSeason(date){const month=date.getMonth();if(month>=2&&month<=4)return"Spring";if(month>=5&&month<=7)return"Summer";if(month>=8&&month<=10)return"Fall";return"Winter"}createSvg(){d3.select(`#${this.containerId}`).select("svg").remove();this.svg=d3.select(`#${this.containerId}`).append("svg").attr("width",this.width).attr("height",this.height);this.createTooltip()}createTooltip(){if(!this.tooltip){this.tooltip=d3.select("body").append("div").attr("class","seasonalpca-tooltip").attr("color","black").style("position","fixed").style("z-index","999999").style("visibility","hidden").style("background","#fff").style("padding","5px").style("border","1px solid #000").style("border-radius","3px").style("pointer-events","none").style("font-family","Arial").style("font-size","11px")}}init(){this.createSvg();this.createScales();this.createAxes();this.createVisualization();window.addEventListener("resize",()=>this.resize())}addResizeListener(){console.log("Adding resize listener");window.addEventListener("resize",this.resize)}removeResizeListener(){console.log("Removing resize listener");window.removeEventListener("resize",this.resize)}processData(){try{this.seasonalFeatures=new Map;const seasonalData=new Map;this.IETDData.forEach(data=>{const[start,end,volume]=data;const startDate=new Date(start);const year=startDate.getFullYear();const season=this.getSeason(startDate);const duration=(new Date(end)-startDate)/(1e3*60*60);const key=`${year}-${season}`;if(!seasonalData.has(key)){seasonalData.set(key,{year:year,season:season,events:[]})}seasonalData.get(key).events.push({duration:duration,volume:volume,date:start})});const featuresData=Array.from(seasonalData.values()).map(data=>{const volumes=data.events.map(e=>e.volume);const durations=data.events.map(e=>e.duration);const intensities=data.events.map(e=>e.volume/e.duration);const daysOfYear=data.events.map(e=>{const date=e.date instanceof Date?e.date:new Date(e.date);const startOfYear=new Date(date.getFullYear(),0,0);return Math.floor((date-startOfYear)/(1e3*60*60*24))});const heavyThreshold=volumes.length>0?d3.quantile([...volumes].sort(d3.ascending),.75)||0:0;const meanVolume=d3.mean(volumes)||0;const volumeSD=d3.deviation(volumes)||0;const meanDuration=d3.mean(durations)||0;const durationSD=d3.deviation(durations)||0;const timingSpread=d3.deviation(daysOfYear)||0;const heavyProportion=volumes.length>0?volumes.filter(v=>v>heavyThreshold).length/volumes.length:0;const wetDayProportion=volumes.length>0?volumes.filter(v=>v>0).length/volumes.length:0;const key=`${data.year}-${data.season}`;this.seasonalFeatures.set(key,{meanVolume:meanVolume,volumeSD:volumeSD,meanDuration:meanDuration,durationSD:durationSD,timingSpread:timingSpread,meanDayOfYear:d3.mean(daysOfYear)||0,heavyProportion:heavyProportion,wetDayProportion:wetDayProportion,eventCount:data.events.length,totalPrecipitation:d3.sum(volumes)||0,maxEvent:d3.max(volumes)||0,meanIntensity:d3.mean(intensities)||0});return{year:data.year,season:data.season,features:[meanVolume,volumeSD,meanDuration,durationSD,timingSpread,heavyProportion,wetDayProportion]}});for(let i=0;i<featuresData.length;i++){for(let j=0;j<featuresData[i].features.length;j++){if(!isFinite(featuresData[i].features[j])){featuresData[i].features[j]=0}}}const features=featuresData.map(d=>d.features);if(features.length===0||features[0].length===0){console.error("Not enough data for PCA");return}const means=[];const stds=[];for(let i=0;i<features[0].length;i++){const column=features.map(row=>row[i]);const mean=d3.mean(column)||0;let std=d3.deviation(column)||0;if(std===0){std=1}means.push(mean);stds.push(std)}const standardizedFeatures=features.map(row=>row.map((val,i)=>(val-means[i])/stds[i]));for(let i=0;i<standardizedFeatures.length;i++){for(let j=0;j<standardizedFeatures[i].length;j++){if(!isFinite(standardizedFeatures[i][j])){standardizedFeatures[i][j]=0}}}const variances=stds.map(std=>std*std);const totalVariance=d3.sum(variances);const featureImportance=variances.map(v=>v/totalVariance);const pca=this.performPCA(standardizedFeatures);this.formattedData=featuresData.map((d,i)=>({year:d.year,season:d.season,x:pca.projections[i][0],y:pca.projections[i][1]}));this.xExtent=d3.extent(this.formattedData,d=>d.x);this.yExtent=d3.extent(this.formattedData,d=>d.y);const xPadding=(this.xExtent[1]-this.xExtent[0])*.1;const yPadding=(this.yExtent[1]-this.yExtent[0])*.1;this.xExtent=[this.xExtent[0]-xPadding,this.xExtent[1]+xPadding];this.yExtent=[this.yExtent[0]-yPadding,this.yExtent[1]+yPadding]}catch(error){console.error("Error processing data:",error);this.formattedData=[]}}performPCA(data,numComponents=2){try{const n=data.length;const d=data[0].length;const cov=Array(d).fill().map(()=>Array(d).fill(0));for(let i=0;i<d;i++){for(let j=0;j<d;j++){let sum=0;for(let k=0;k<n;k++){sum+=data[k][i]*data[k][j]}cov[i][j]=sum/(n-1)}}const pc1=this.powerIteration(cov);const deflatedCov=this.deflateMatrix(cov,pc1);const pc2=this.powerIteration(deflatedCov);const projections=data.map(row=>[row.reduce((sum,val,i)=>sum+val*pc1[i],0),row.reduce((sum,val,i)=>sum+val*pc2[i],0)]);const totalVar=this.calculateTotalVariance(cov);const var1=this.calculateComponentVariance(data,pc1);const var2=this.calculateComponentVariance(data,pc2);const explainedVarianceRatio=[var1/totalVar,var2/totalVar];return{components:[pc1,pc2],projections:projections,explainedVarianceRatio:explainedVarianceRatio}}catch(error){console.error("Error in PCA computation:",error);return{components:[],projections:data.map(()=>[0,0]),explainedVarianceRatio:[0,0]}}}deflateMatrix(matrix,eigenvector){const n=matrix.length;const result=Array(n).fill().map(()=>Array(n).fill(0));for(let i=0;i<n;i++){for(let j=0;j<n;j++){const outerProduct=eigenvector[i]*eigenvector[j];let rayleigh=0;for(let p=0;p<n;p++){for(let q=0;q<n;q++){rayleigh+=eigenvector[p]*matrix[p][q]*eigenvector[q]}}result[i][j]=matrix[i][j]-rayleigh*outerProduct}}return result}calculateTotalVariance(covMatrix){let sum=0;for(let i=0;i<covMatrix.length;i++){sum+=covMatrix[i][i]}return sum}calculateComponentVariance(data,component){const projection=data.map(row=>row.reduce((sum,val,i)=>sum+val*component[i],0));const mean=jStat.mean(projection);const variance=jStat.variance(projection,true);return variance}powerIteration(matrix,iterations=100){let vector=Array(matrix.length).fill(1);for(let i=0;i<iterations;i++){const newVector=matrix.map(row=>row.reduce((sum,val,j)=>sum+val*vector[j],0));const norm=Math.sqrt(newVector.reduce((sum,val)=>sum+val*val,0));vector=newVector.map(val=>val/norm)}return vector}createColorYearLegend(legendGroup){const yearLegend=legendGroup.append("g").attr("class","year-legend");const legendHeight=10;const legendWidth=150;const defs=this.svg.append("defs");const gradient=defs.append("linearGradient").attr("id","rainbow-gradient").attr("x1","0%").attr("x2","100%").attr("y1","0%").attr("y2","0%");const years=[...new Set(this.IETDData.map(d=>new Date(d[0]).getFullYear()))];const minYear=Math.min(...years);const maxYear=Math.max(...years);this.colorScale=d3.scaleSequential(d3.interpolateViridis).domain([minYear,maxYear]);const stops=d3.range(0,1.1,.1);stops.forEach(stop=>{gradient.append("stop").attr("offset",`${stop*100}%`).attr("stop-color",this.colorScale(minYear+(maxYear-minYear)*stop))});yearLegend.append("rect").attr("y",-5).attr("width",legendWidth).attr("height",legendHeight).style("fill","url(#rainbow-gradient)");const yearRange=maxYear-minYear;years.forEach(year=>{const lineX=(year-minYear)/yearRange*legendWidth;yearLegend.append("line").attr("x1",lineX).attr("x2",lineX).attr("y1",-7).attr("y2",7).attr("stroke","white").attr("stroke-width",1).style("opacity",.5);const hoverWidth=legendWidth/years.length;const hoverX=Math.max(0,lineX-hoverWidth/2);yearLegend.append("rect").attr("x",hoverX).attr("y",-7).attr("width",hoverWidth).attr("height",14).attr("fill","transparent").style("cursor","pointer").on("mouseover",()=>{this.mainGroup.selectAll(".seasonalpca_point, .point-label").style("opacity",.1);this.mainGroup.selectAll(`.seasonalpca_point.year-${year}`).style("opacity",1).style("stroke","black").style("stroke-width","2px");this.mainGroup.selectAll(`.point-label.year-${year}`).style("opacity",1);yearLegend.append("text").attr("class","temp-year-label").attr("x",lineX).attr("y",-10).attr("text-anchor","middle").attr("font-size","10px").text(year)}).on("mouseout",()=>{this.mainGroup.selectAll(".seasonalpca_point").style("opacity",1).style("stroke","black").style("stroke-width","1px");this.mainGroup.selectAll(".point-label").style("opacity",1).style("fill",d=>this.colorScale(d.year));yearLegend.selectAll(".temp-year-label").remove()})});yearLegend.append("text").attr("x",0).attr("y",legendHeight+8).attr("font-size","10px").text(minYear);yearLegend.append("text").attr("x",legendWidth).attr("y",legendHeight+8).attr("font-size","10px").attr("text-anchor","end").text(maxYear);return legendWidth}createScales(){this.xScale=d3.scaleLinear().domain(this.xExtent).range([0,this.innerWidth]);this.yScale=d3.scaleLinear().domain(this.yExtent).range([this.innerHeight,0])}createAxes(){this.svg.selectAll("g.main-group").remove();this.mainGroup=this.svg.append("g").attr("class","main-group").attr("transform",`translate(${this.margin.left}, ${this.margin.top})`);this.mainGroup.selectAll(".x.axis").remove();this.xAxis=this.mainGroup.append("g").attr("class","x axis").attr("color","black").attr("transform",`translate(0, ${this.innerHeight})`).call(d3.axisBottom(this.xScale));this.mainGroup.selectAll(".y.axis").remove();this.yAxis=this.mainGroup.append("g").attr("class","y axis").attr("color","black").call(d3.axisLeft(this.yScale));this.mainGroup.selectAll(".x-label").remove();this.mainGroup.selectAll(".y-label").remove();this.mainGroup.selectAll(".title").remove();this.mainGroup.append("text").attr("class","x-label").attr("text-anchor","start").attr("font-size","12px").attr("x",this.innerWidth-10).attr("y",this.innerHeight+40).text("PC1");this.mainGroup.append("text").attr("class","y-label").attr("text-anchor","start").attr("font-size","12px").attr("transform","rotate(-90)").attr("x",-20).attr("y",-45).text("PC2");const titleText=`${this.title}`;this.mainGroup.append("text").attr("class","title").attr("text-anchor","middle").attr("x",this.innerWidth/2).attr("y",-5).attr("font-size","12px").attr("font-weight","bold").text(titleText)}dedupeLabels(labels){if(labels.empty())return;const svg=labels.node().closest("svg");if(!svg)return;const getTransformedCoords=element=>{const bbox=element.getBBox();const matrix=element.getScreenCTM();if(!matrix)return null;const point=svg.createSVGPoint();point.x=bbox.x;point.y=bbox.y;const transformed=point.matrixTransform(matrix);return{x:transformed.x,y:transformed.y,width:bbox.width,height:bbox.height}};setTimeout(()=>{const rects=[];labels.each(function(d){const coords=getTransformedCoords(this);if(!coords)return;rects.push({x:coords.x,y:coords.y,width:coords.width,height:coords.height,element:this,visible:true,text:d.year})});rects.sort((a,b)=>a.y-b.y);const padding=2;for(let i=0;i<rects.length;i++){const curr=rects[i];for(let j=0;j<i;j++){const prev=rects[j];if(!prev.visible)continue;const overlap=!(curr.x+curr.width+padding<prev.x-padding||curr.x-padding>prev.x+prev.width+padding||curr.y+curr.height+padding<prev.y-padding||curr.y-padding>prev.y+prev.height+padding);if(overlap){d3.select(curr.element).remove();curr.visible=false;break}}}},100)}createVisualization(){const symbolGenerators=Object.fromEntries(Object.entries(this.seasonSymbols).map(([season,symbol])=>[season,d3.symbol().type(symbol).size(this.symbolSize)]));this.createTooltip();this.mainGroup.selectAll(".point").data(this.formattedData).enter().append("path").attr("class",d=>`seasonalpca_point year-${d.year}`).attr("d",d=>symbolGenerators[d.season]()).attr("fill",d=>this.colorScale(d.year)).attr("stroke","black").attr("stroke-width",1).attr("transform",d=>`translate(${this.xScale(d.x)},${this.yScale(d.y)})`).on("mouseover",(event,d)=>this.handleMouseOver(event,d)).on("mouseout",(event,d)=>this.handleMouseOut(event,d));this.mainGroup.selectAll(".point-label").data(this.formattedData).enter().append("text").attr("class",d=>`point-label year-${d.year}`).attr("text-anchor","middle").attr("font-size","10px").attr("fill",d=>this.colorScale(d.year)).attr("x",d=>this.xScale(d.x)).attr("y",d=>this.yScale(d.y)-10).text(d=>d.year);this.dedupeLabels(this.mainGroup.selectAll(".point-label"));this.createLegend()}createLegend(){const legendY=this.innerHeight+30;const seasonSpacing=60;const spacer=40;const totalSeasonWidth=Object.keys(this.seasonSymbols).length*seasonSpacing;const yearLegendWidth=150;const legendGroup=this.mainGroup.append("g").attr("class","combined-legend").attr("transform",`translate(0, ${legendY})`);this.createColorYearLegend(legendGroup);const seasonLegend=legendGroup.append("g").attr("class","season-legend").attr("transform",`translate(${yearLegendWidth+spacer}, 0)`);Object.entries(this.seasonSymbols).forEach(([season,symbol],i)=>{const group=seasonLegend.append("g").attr("transform",`translate(${i*seasonSpacing}, 0)`);group.append("path").attr("d",d3.symbol().type(symbol).size(this.symbolSize)()).attr("transform","translate(0, 0)").attr("fill","gray").attr("stroke","black");group.append("text").attr("x",8).attr("y",2).attr("font-size","10px").style("alignment-baseline","middle").text(season)});const totalWidth=yearLegendWidth+spacer+totalSeasonWidth;const legendStartX=(this.innerWidth-totalWidth)/2;legendGroup.attr("transform",`translate(${legendStartX}, ${legendY})`)}handleMouseOver(event,d){d3.select(event.target).raise().attr("stroke-width",2).attr("stroke","#333").attr("fill","brown");const mouseX=event.clientX;const mouseY=event.clientY;const key=`${d.year}-${d.season}`;const features=this.seasonalFeatures.get(key);if(!features){this.tooltip.html(`
            <div style="color:black; padding: 3px; border-radius: 8px;">
                <span style="color:blue">${d.season} ${d.year}</span><br/>
                PC1: ${d.x.toFixed(3)}<br/>
                PC2: ${d.y.toFixed(3)}
            </div>`).style("visibility","visible").style("top",`${mouseY-10}px`).style("left",`${mouseX+10}px`);return}const format=num=>num.toFixed(1);const formatPercent=num=>(num*100).toFixed(0)+"%";const formatDayOfYear=dayNum=>{if(!dayNum)return"N/A";const date=new Date(d.year,0);date.setDate(Math.round(dayNum));return date.toLocaleDateString("en-US",{month:"short",day:"numeric"})};let tooltipContent=`
        <div style="color:black; padding: 8px; border-radius: 8px; max-width: 300px;">
            <h6 style="margin: 0 0 6px 0; color:blue; font-size: 11px;">${d.season} ${d.year}</h6>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 5px; font-size: 10px;">
                <div>
                    <p style="margin: 0;"><b>Precipitation</b></p>
                    <p style="margin: 0;">Total: ${format(features.totalPrecipitation)}</p>
                    <p style="margin: 0;">Mean Vol: ${format(features.meanVolume)}</p>
                    <p style="margin: 0;">Vol SD: ${format(features.volumeSD)}</p>
                    <p style="margin: 0;">Max Event: ${format(features.maxEvent)}</p>
                </div>
                <div>
                    <p style="margin: 0;"><b>Event Pattern</b></p>
                    <p style="margin: 0;">Count: ${features.eventCount}</p>
                    <p style="margin: 0;">Mean Duration: ${format(features.meanDuration)}h</p>
                    <p style="margin: 0;">Heavy Events: ${formatPercent(features.heavyProportion)}</p>
                    <p style="margin: 0;">Timing: ${formatDayOfYear(features.meanDayOfYear)}</p>
                    <p style="margin: 0;">Spread: ${format(features.timingSpread)} days</p>
                </div>
            </div>
            <p style="margin: 5px 0 0 0; font-size: 10px; color: #666;">PCA: [${d.x.toFixed(2)}, ${d.y.toFixed(2)}]</p>
        </div>`;const isRightHalf=event.clientX-this.svg.node().getBoundingClientRect().left>this.innerWidth/2;const tooltipNode=this.tooltip.node();const tooltipWidth=tooltipNode?tooltipNode.getBoundingClientRect().width:150;this.tooltip.html(tooltipContent).style("visibility","visible").style("top",`${mouseY-10}px`).style("left",isRightHalf?event.pageX-tooltipWidth-10+"px":event.pageX+10+"px")}handleMouseOut(event,d){d3.select(event.target).attr("stroke-width",1).attr("stroke","black").style("filter","none").attr("fill",d=>this.colorScale(d.year));if(this.tooltip){this.tooltip.style("visibility","hidden")}}resize(){if(!this.isVisible())return;if(this.isFloatingWindowVisible()===true)return;const container=d3.select(`#${this.containerId}`);this.width=parseInt(container.style("width"));this.height=parseInt(container.style("height"));this.innerWidth=this.width-this.margin.left-this.margin.right;this.innerHeight=this.height-this.margin.top-this.margin.bottom;this.svg.attr("width",this.width).attr("height",this.height);this.xScale.range([0,this.innerWidth]);this.yScale.range([this.innerHeight,0]);this.updateAxes();this.mainGroup.select(".title").attr("x",this.innerWidth/2);this.redrawVisualization()}openFloatingChart(width,height){this.resizeFloatingChart(width,height)}closeFloatingChart(){this.createSvg();this.createScales();this.createAxes();this.resize()}resizeFloatingChart(width,height){this.width=width;this.height=height;this.innerWidth=this.width-this.margin.left-this.margin.right;this.innerHeight=this.height-this.margin.top-this.margin.bottom;this.svg.attr("width",this.width).attr("height",this.height);this.xScale.range([0,this.innerWidth]);this.yScale.range([this.innerHeight,0]);this.updateAxes();this.updateLabels();this.mainGroup.select(".title").attr("x",this.innerWidth/2);this.redrawVisualization();this.svg.selectAll(".seasonalpca_point").on("mouseover",(event,d)=>this.handleMouseOver(event,d)).on("mouseout",(event,d)=>this.handleMouseOut(event,d))}updateAxes(){this.xAxis.attr("transform",`translate(0, ${this.innerHeight})`).call(d3.axisBottom(this.xScale));this.yAxis.call(d3.axisLeft(this.yScale))}updateLabels(){this.mainGroup.select(".x-label").attr("x",this.innerWidth-20).attr("y",this.innerHeight+40);this.mainGroup.select(".y-label").attr("x",-20).attr("y",-45)}async updateData(newIETDData,newIETDHour){this.IETDData=newIETDData;this.IETDhour=newIETDHour;this.processData();this.createScales();this.redrawVisualization()}redrawVisualization(){this.mainGroup.selectAll(".seasonalpca_point").remove();this.mainGroup.selectAll(".point-label").remove();this.mainGroup.select(".combined-legend").remove();this.svg.select(".no-data-message").remove();const distinctYears=new Set(this.formattedData.map(d=>d.year)).size;if(distinctYears<=2){this.svg.append("text").attr("class","no-data-message").attr("x",this.margin.left+this.innerWidth/2).attr("y",this.innerHeight/2).attr("text-anchor","middle").attr("alignment-baseline","middle").style("font-size","14px").style("fill","#666").text("Not enough data!");return}this.xAxis.transition().duration(500).call(d3.axisBottom(this.xScale));this.yAxis.transition().duration(500).call(d3.axisLeft(this.yScale));const symbolGenerators=Object.fromEntries(Object.entries(this.seasonSymbols).map(([season,symbol])=>[season,d3.symbol().type(symbol).size(this.symbolSize)]));this.mainGroup.selectAll(".point").data(this.formattedData).enter().append("path").attr("class",d=>`seasonalpca_point year-${d.year}`).attr("d",d=>symbolGenerators[d.season]()).attr("fill",d=>this.colorScale(d.year)).attr("stroke","black").attr("stroke-width",1).attr("transform",d=>`translate(${this.xScale(d.x)},${this.yScale(d.y)})`).on("mouseover",(event,d)=>this.handleMouseOver(event,d)).on("mouseout",(event,d)=>this.handleMouseOut(event,d));this.mainGroup.selectAll(".point-label").data(this.formattedData).enter().append("text").attr("class",d=>`point-label year-${d.year}`).attr("text-anchor","middle").attr("font-size","10px").attr("fill",d=>this.colorScale(d.year)).attr("x",d=>this.xScale(d.x)).attr("y",d=>this.yScale(d.y)-10).text(d=>d.year);this.dedupeLabels(this.mainGroup.selectAll(".point-label"));this.mainGroup.select(".title").text(`${this.title}`);this.createLegend()}destroy(){try{window.removeEventListener("resize",this.resize);const container=d3.select(`#${this.containerId}`);container.select("svg").remove();if(this.tooltip){this.tooltip.remove();this.tooltip=null}container.selectAll(".seasonalpca_point").remove();container.selectAll(".point-label").remove();container.selectAll(".season-legend").remove();container.selectAll(".x.axis").remove();container.selectAll(".y.axis").remove();container.selectAll(".x-label").remove();container.selectAll(".y-label").remove();container.selectAll(".title").remove();container.selectAll(".no-data-message").remove();container.selectAll(".mainGroup").remove();this.svg.select("defs").remove();container.selectAll(".seasonalpca_point").on("mouseover",null).on("mouseout",null);this.formattedData=null;this.IETDData=null;this.IETDhour=null;this.svg=null;this.mainGroup=null;this.tooltip=null;this.xScale=null;this.yScale=null;this.xAxis=null;this.yAxis=null;this.colorScale=null;this.seasonSymbols=null;this.xExtent=null;this.yExtent=null;this.width=null;this.height=null;this.innerWidth=null;this.innerHeight=null;this.margin=null;this.symbolSize=null;this.symbolGenerators=null;this.projections=null;this.components=null;super.destroy()}catch(error){console.error("Error in destroy:",error)}}}