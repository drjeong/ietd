function addBoundingClientRectOverlay(elt){const rect=elt.getBoundingClientRect();const tableRectDiv=document.createElement("div");tableRectDiv.setAttribute("id","BoundingClientRectOverlay");tableRectDiv.style.position="absolute";tableRectDiv.style.border="1px dashed #321";const scrollTop=document.documentElement.scrollTop||document.body.scrollTop;const scrollLeft=document.documentElement.scrollLeft||document.body.scrollLeft;tableRectDiv.style.margin=tableRectDiv.style.padding="0";tableRectDiv.style.top=rect.top+scrollTop+"px";tableRectDiv.style.left=rect.left+scrollLeft+"px";tableRectDiv.style.width=rect.width+"px";tableRectDiv.style.height=rect.height+"px";document.body.appendChild(tableRectDiv)}const relativePosition=rect=>{const scrollTop=document.documentElement.scrollTop||document.body.scrollTop;const scrollLeft=document.documentElement.scrollLeft||document.body.scrollLeft;rect.top=rect.top+scrollTop;rect.left=rect.left+scrollLeft;return rect};const dedupeLabels=allDedupeLabels=>{allDedupeLabels.style("opacity","1");const overlap=(R1,R2)=>{if(R1.left<=R2.right&&R1.right>=R2.left&&R1.top<=R2.bottom&&R1.bottom>=R2.top)return true;return false};allDedupeLabels.each(function(d,i){if(d3.select(this).style("opacity")=="0"){return}const thisBBox=relativePosition(this.getBoundingClientRect());allDedupeLabels.filter((k,j)=>j>i).each(function(d){const underBBox=relativePosition(this.getBoundingClientRect());if(d3.select(this).style("opacity")=="1"){if(overlap(thisBBox,underBBox)==true){d3.select(this).style("opacity",0)}}})})};const initializeArrayWithValues=(n,val=0)=>Array(n).fill(val);function processD3OperationsAsync(operations){return Promise.all(operations.map(op=>new Promise(resolve=>{setTimeout(()=>{try{if(op.component&&typeof op.method==="function"){op.method()}else if(op.selector&&op.style){const selection=d3.selectAll(op.selector);selection.style(op.style.property,op.style.value)}}catch(error){console.error(`Error in D3 operation for ${op.name}:`,error)}finally{resolve()}},0)})))}async function addHighlightD3Glyphs(indicator,color="brown",totalelements=1){if(totalelements>100)return;try{const operations=[{name:"bar-highlights",selector:`rect.bar[data-indicator='${indicator}']`,style:{property:"fill",value:color}},{name:"anomaly-plot",component:g_plotAnomaly,method:()=>g_plotAnomaly.addHighlights(indicator)}];if(g_plotTrendAnalysis){operations.push({name:"trend-analysis",component:g_plotTrendAnalysis,method:()=>g_plotTrendAnalysis.addHighlights(indicator)})}await processD3OperationsAsync(operations);return true}catch(error){console.error("Error adding D3 highlights:",error);return false}}async function removeHighlightD3Glyphs(indicator,color="steelblue"){try{const operations=[{name:"bar-unhighlights",selector:`rect.bar[data-indicator='${indicator}']`,style:{property:"fill",value:color}},{name:"anomaly-plot",component:g_plotAnomaly,method:()=>g_plotAnomaly.removeHighlights(indicator)},{name:"trend-analysis",component:g_plotTrendAnalysis,method:()=>g_plotTrendAnalysis.removeHighlights(indicator)}];await processD3OperationsAsync(operations);return true}catch(error){console.error("Error removing D3 highlights:",error);return false}}