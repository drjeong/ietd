class MonthlyPrecipitationPlot extends ChartCommons{constructor(containerId,IETDHPCPData,IETDHPCPStations){super(containerId);this.containerId=containerId;this.IETDData=IETDHPCPData;this.IETDHPCPStations=IETDHPCPStations;this.margin={top:20,right:40,bottom:50,left:60};const container=d3.select(`#${this.containerId}`);this.width=parseInt(container.style("width"));this.height=parseInt(container.style("height"));this.innerWidth=this.width-this.margin.left-this.margin.right;this.innerHeight=this.height-this.margin.top-this.margin.bottom;this.monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];this.selectedErrorBar="none";this.selectedYear="all";const stations=Object.keys(this.IETDData);this.stationColorScale=d3.scaleOrdinal(d3.schemeDark2).domain(stations);this.offsetConfig={step:0,getOffset:()=>0};this.resize=this.resize.bind(this);this.processData=this.processData.bind(this);this.createScales=this.createScales.bind(this);this.createAxes=this.createAxes.bind(this);this.createLine=this.createLine.bind(this);this.createTooltip=this.createTooltip.bind(this);this.handleMouseOver=this.handleMouseOver.bind(this);this.handleMouseMove=this.handleMouseMove.bind(this);this.handleMouseOut=this.handleMouseOut.bind(this);this.initialize()}formatStationInfoTooltip(stationObj){let parts=[];parts.push(`ID: ${stationObj.id}`);if(stationObj.FAA_ID!==null){parts.push(`FAA: ${stationObj.FAA_ID}`)}if(stationObj.NCDC_ID!==null){parts.push(`NCDC: ${stationObj.NCDC_ID}`)}if(stationObj.GHCND_ID!==null){parts.push(`GHCND: ${stationObj.GHCND_ID}`)}if(stationObj.COOP_ID!==null){parts.push(`COOP: ${stationObj.COOP_ID}`)}return parts.join("<br>")}sanitizeStationId(station){return station.replace(/[^a-zA-Z0-9]/g,"_")}getAvailableYears(){const years=[...new Set(Object.values(this.IETDData).flat().map(d=>new Date(d.dateFrom).getFullYear()).filter(year=>!isNaN(year)))].sort((a,b)=>a-b);return["all",...years]}getMonthlyValues(month){const values=Object.values(this.IETDData).flat().filter(d=>{const date=new Date(d.dateFrom);return(this.selectedYear==="all"||date.getFullYear().toString()===this.selectedYear)&&date.getMonth()===month}).map(d=>parseFloat(d.volume)).filter(v=>!isNaN(v)&&v!==null&&v!==undefined&&v>=0);return values}initialize(){this.createYearSelector();this.createErrorBarSelector();this.createOffsetToggle();this.processData();this.createSvg();this.createScales();this.createAxes();this.createVisualization();this.debouncedResize=this.debounce(this.resize,250);window.addEventListener("resize",this.debouncedResize)}createOffsetToggle(){const toggleContainer=d3.select(`#${this.containerId}`).append("div").attr("class","offset-toggle-container").style("position","absolute").style("top","-4px").style("left","12px").style("display","flex").style("align-items","center").style("justify-content","flex-start").style("gap","4px").style("padding","2px 2px").style("border","1px solid #ccc").style("border-radius","2px").style("background-color","white").style("z-index","5");const checkbox=toggleContainer.append("input").attr("type","checkbox").attr("id","offsetToggle").style("margin","0").style("width","12px").style("height","12px").style("flex-shrink","0").style("vertical-align","middle").on("change",event=>{const isChecked=event.target.checked;this.offsetConfig=isChecked?{step:6,getOffset:(stationIndex,totalStations,month)=>{const totalOffset=(totalStations-1)*this.offsetConfig.step;const startOffset=-totalOffset/2;let offset=startOffset+stationIndex*this.offsetConfig.step;if(month===0){offset+=10}else if(month===11){offset-=10}return offset}}:{step:0,getOffset:()=>0};this.redrawVisualization()});toggleContainer.append("label").attr("for","offsetToggle").style("font-family","Arial").style("font-size","10px").style("margin","0").style("cursor","pointer").style("display","inline-block").style("line-height","14px").style("vertical-align","middle").text("Offset")}drawErrorBars(){if(this.selectedErrorBar==="none"){this.svg.selectAll(".error-bar").remove();return}this.svg.selectAll(".error-bar").remove();const totalStations=this.ietdProcessedData.length;const offsetStep=6;const totalOffset=(totalStations-1)*offsetStep;const startOffset=-totalOffset/2;this.ietdProcessedData.forEach((stationData,stationIndex)=>{const sanitizedStation=this.sanitizeStationId(stationData.station);const horizontalOffset=startOffset+stationIndex*offsetStep;const darkenColor=color=>{const rgb=d3.color(color);return d3.rgb(Math.floor(rgb.r*.7),Math.floor(rgb.g*.7),Math.floor(rgb.b*.7)).toString()};const errorBarColor=darkenColor(this.stationColorScale(stationData.station));const validData=stationData.monthlyData.filter(d=>!isNaN(d.average)&&!isNaN(d.error)&&d.error!==null&&d.average!==null);const errorBars=this.svg.selectAll(`.error-bar.station-${sanitizedStation}`).data(validData).enter().append("g").attr("class",`error-bar station-${sanitizedStation}`).style("opacity",.7);errorBars.append("line").attr("class","error-bar-line").attr("x1",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(stationIndex,totalStations,d.month);return baseX+offset}).attr("x2",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(stationIndex,totalStations,d.month);return baseX+offset}).attr("y1",d=>this.yScale(d.average+d.error)).attr("y2",d=>this.yScale(d.average-d.error)).attr("stroke",errorBarColor).attr("stroke-width",1.5).attr("pointer-events","none");errorBars.append("line").attr("class","error-bar-cap").attr("x1",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(stationIndex,totalStations,d.month);return baseX+offset-4}).attr("x2",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(stationIndex,totalStations,d.month);return baseX+offset+4}).attr("y1",d=>this.yScale(d.average+d.error)).attr("y2",d=>this.yScale(d.average+d.error)).attr("stroke",errorBarColor).attr("stroke-width",1.5).attr("pointer-events","none");errorBars.append("line").attr("class","error-bar-cap").attr("x1",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(stationIndex,totalStations,d.month);return baseX+offset-4}).attr("x2",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(stationIndex,totalStations,d.month);return baseX+offset+4}).attr("y1",d=>this.yScale(d.average-d.error)).attr("y2",d=>this.yScale(d.average-d.error)).attr("stroke",errorBarColor).attr("stroke-width",1.5).attr("pointer-events","none");errorBars.selectAll("line").style("opacity",0).transition().duration(500).style("opacity",.7)})}createErrorBarSelector(){const selectorContainer=d3.select(`#${this.containerId}`).append("div").attr("class","error_bars_selector-container").style("position","absolute").style("bottom","12px").style("left","12px").style("display","flex").style("gap","10px").style("z-index","1");const errorBarSelect=selectorContainer.append("select").attr("class","error-bar-selector").style("padding","1px 1px").style("font-family","Arial").style("font-size","10px").on("change",event=>{this.selectedErrorBar=event.target.value;this.processData();this.updateVisualization()});errorBarSelect.selectAll("option").data(["none","sd","se","ci"]).enter().append("option").attr("value",d=>d).text(d=>({none:"No Error Bars",sd:"Standard Deviation",se:"Standard Error",ci:"Confidence Interval (95%)"})[d])}createYearSelector(){d3.select(`#${this.containerId}`).style("position","relative");const selectorContainer=d3.select(`#${this.containerId}`).append("div").attr("class","year-selector-container").style("position","absolute").style("top","4px").style("right","30px").style("z-index","5");const select=selectorContainer.append("select").attr("class","year-selector").style("padding","2px 2px").style("font-family","Arial").style("font-size","10px").style("border","1px solid #ccc").style("border-radius","4px").style("background-color","white").on("change",event=>{this.selectedYear=event.target.value;this.processData();this.updateVisualization()});this.updateYearSelector()}updateYearSelector(){const select=d3.select(`#${this.containerId}`).select(".year-selector");const currentValue=select.property("value");const years=this.getAvailableYears();const options=select.selectAll("option").data(years);options.exit().remove();options.attr("value",d=>d).text(d=>d==="all"?"All Years":d);options.enter().append("option").attr("value",d=>d).text(d=>d==="all"?"All Years":d);if(!years.includes(currentValue)){select.property("value","all");this.selectedYear="all";this.processData()}else{select.property("value",currentValue)}}updateVisualization(){this.createScales();this.redrawVisualization();this.svg.select(".title.monthly").text(`Monthly Average Precipitation ${this.selectedYear==="all"?"":`(${this.selectedYear})`}`)}calculateErrorBars(data,type){return data.map(monthData=>{const values=this.getMonthlyValues(monthData.month);const n=values.length;if(n>0){const mean=d3.mean(values);const sd=d3.deviation(values);let error;switch(type){case"sd":error=sd;break;case"se":error=sd/Math.sqrt(n);break;case"ci":error=1.96*(sd/Math.sqrt(n));break;default:error=0}return{...monthData,error:error||0,n:n}}return{...monthData,error:0,n:0}})}processData(){const ietdMonthlyData={};const yearFilter=date=>{if(this.selectedYear==="all")return true;return new Date(date).getFullYear()===parseInt(this.selectedYear)};Object.entries(this.IETDData).forEach(([station,data])=>{ietdMonthlyData[station]=Array(12).fill().map(()=>({count:0,sum:0,values:[]}));data.forEach((d,index)=>{try{if(!yearFilter(d.dateFrom))return;const date=new Date(d.dateFrom);const month=date.getMonth();const precipitation=parseFloat(d.volume);if(!isNaN(precipitation)&&isFinite(precipitation)&&precipitation>=0){ietdMonthlyData[station][month].count++;ietdMonthlyData[station][month].sum+=precipitation;ietdMonthlyData[station][month].values.push(precipitation)}}catch(error){console.error(`Error processing IETD data for station ${station} at index ${index}:`,error)}})});this.ietdProcessedData=Object.entries(ietdMonthlyData).map(([station,monthlyData])=>({station:station,monthlyData:monthlyData.map((data,month)=>({month:month,average:data.count>0?data.sum/data.count:0,count:data.count,values:data.values}))}));this.ietdProcessedData=this.ietdProcessedData.map(stationData=>({...stationData,monthlyData:this.calculateErrorBars(stationData.monthlyData,this.selectedErrorBar)}))}async updateData(newIETDData){this.IETDData=newIETDData;this.processData();this.updateYearSelector();this.redrawVisualization()}redrawVisualization(){this.createScales();const yAxis=d3.axisLeft(this.yScale).ticks(5).tickFormat(d=>{if(isNaN(d)||d===null)return"";return d.toFixed(2)});const currentValues=this.yAxis.selectAll(".tick").data().filter(d=>!isNaN(d));const newValues=yAxis.scale().ticks(5);const maxRelativeChange=Math.max(...currentValues.map(curr=>{const correspondingNew=newValues.find(n=>!isNaN(n));if(!curr||!correspondingNew)return 0;return Math.abs(curr-correspondingNew)/Math.max(Math.abs(curr),1e-10)}));if(maxRelativeChange>1e-10){this.yAxis.transition().duration(750).call(yAxis)}else{this.yAxis.call(yAxis)}const stationGroups=this.svg.selectAll(".station-group").data(this.ietdProcessedData,d=>d.station);stationGroups.exit().remove();stationGroups.each((d,i,nodes)=>{const group=d3.select(nodes[i]);const sanitizedStation=this.sanitizeStationId(d.station);const totalStations=this.ietdProcessedData.length;const horizontalOffset=this.offsetConfig.getOffset(i,totalStations);const line=this.createLine(i,totalStations);const path=group.select(`.station-${sanitizedStation}`);if(maxRelativeChange>1e-10){path.transition().duration(750).attr("d",d=>line(d.monthlyData))}else{path.attr("d",d=>line(d.monthlyData))}const points=group.selectAll(".ietd-point").data(d.monthlyData);points.exit().remove();if(maxRelativeChange>1e-10){points.transition().duration(750).attr("cx",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(i,totalStations,d.month);return baseX+offset}).attr("cy",d=>this.yScale(d.average))}else{points.attr("cx",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(i,totalStations,d.month);return baseX+offset}).attr("cy",d=>this.yScale(d.average))}points.enter().append("circle").attr("class",`point ietd-point station-${sanitizedStation}`).attr("r",3).attr("fill",d=>this.stationColorScale(d.station)).attr("stroke","#fff").attr("stroke-width",2).attr("cx",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(i,totalStations,d.month);return baseX+offset}).attr("cy",d=>this.yScale(d.average)).on("mouseover",(event,d)=>this.handleMouseOver(event,{...d,station:sanitizedStation},"point")).on("mousemove",this.handleMouseMove.bind(this)).on("mouseout",(event,d)=>this.handleMouseOut(event,{...d,station:sanitizedStation},"point"))});const newGroups=stationGroups.enter().append("g").attr("class",d=>`station-group station-${this.sanitizeStationId(d.station)}`);newGroups.each((d,i,nodes)=>{const group=d3.select(nodes[i]);const sanitizedStation=this.sanitizeStationId(d.station);const totalStations=this.ietdProcessedData.length;const horizontalOffset=this.offsetConfig.getOffset(i,totalStations);const line=this.createLine(i,totalStations);group.append("path").attr("class",`line ietd-line station-${sanitizedStation}`).attr("fill","none").attr("stroke",d=>this.stationColorScale(d.station)).attr("stroke-width",2).attr("d",d=>line(d.monthlyData));group.selectAll(".ietd-point").data(d.monthlyData).enter().append("circle").attr("class",`point ietd-point station-${sanitizedStation}`).attr("r",3).attr("fill",d=>this.stationColorScale(d.station)).attr("stroke","#fff").attr("stroke-width",2).attr("cx",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(i,totalStations,d.month);return baseX+offset}).attr("cy",d=>this.yScale(d.average)).on("mouseover",(event,d)=>this.handleMouseOver(event,{...d,station:sanitizedStation},"point")).on("mousemove",this.handleMouseMove.bind(this)).on("mouseout",(event,d)=>this.handleMouseOut(event,{...d,station:sanitizedStation},"point"))});this.drawErrorBars()}createSvg(){d3.select(`#${this.containerId}`).select("svg").remove();this.svg=d3.select(`#${this.containerId}`).append("svg").attr("width",this.width).attr("height",this.height).append("g").attr("transform",`translate(${this.margin.left},${this.margin.top})`)}createScales(){this.xScale=d3.scaleLinear().domain([0,11]).range([0,this.innerWidth]);const maxIETD=d3.max(this.ietdProcessedData,station=>d3.max(station.monthlyData,d=>this.selectedErrorBar!=="none"?d.average+d.error:d.average));this.yScale=d3.scaleLinear().domain([0,maxIETD*1.1]).range([this.innerHeight,0])}createAxes(){this.xAxis=this.svg.append("g").attr("color","black").attr("class","x-axis").attr("transform",`translate(0,${this.innerHeight})`).call(d3.axisBottom(this.xScale).ticks(12).tickFormat(d=>this.monthNames[d]));this.yAxis=this.svg.append("g").attr("color","black").attr("class","y-axis").call(d3.axisLeft(this.yScale).ticks(5).tickFormat(d=>d.toFixed(2)))}createLine(stationIndex,totalStations){return d3.line().x(d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(stationIndex,totalStations,d.month);return baseX+offset}).y(d=>this.yScale(d.average)).curve(d3.curveMonotoneX)}createTooltip(){return d3.select("body").append("div").attr("class","precipitation-tooltip").style("position","absolute").style("visibility","hidden").style("background-color","white").style("padding","10px").style("border","1px solid #000").style("border-radius","5px").style("font-size","10px").style("font-family","Arial").style("min-width","150px").style("line-height","1.4").style("pointer-events","none")}createVisualization(){const line=this.createLine();const stationGroups=this.svg.selectAll(".station-group").data(this.ietdProcessedData).enter().append("g").attr("class",d=>`station-group station-${this.sanitizeStationId(d.station)}`);stationGroups.append("path").attr("class",d=>`line ietd-line station-${this.sanitizeStationId(d.station)}`).attr("fill","none").attr("stroke",d=>this.stationColorScale(d.station)).attr("stroke-width",2).attr("d",(d,i)=>this.createLine(i,this.ietdProcessedData.length)(d.monthlyData));this.tooltip=this.createTooltip();stationGroups.each((stationData,stationIndex,nodes)=>{const totalStations=this.ietdProcessedData.length;const horizontalOffset=this.offsetConfig.getOffset(stationIndex,totalStations);d3.select(nodes[stationIndex]).selectAll(".ietd-point").data(stationData.monthlyData).enter().append("circle").attr("class",d=>`point ietd-point station-${this.sanitizeStationId(stationData.station)}`).attr("cx",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(stationIndex,totalStations,d.month);return baseX+offset}).attr("cy",d=>this.yScale(d.average)).attr("r",3).attr("fill",()=>this.stationColorScale(stationData.station)).attr("stroke","#fff").attr("stroke-width",2).on("mouseover",(event,d)=>this.handleMouseOver(event,{...d,station:stationData.station},"IETD")).on("mousemove",this.handleMouseMove).on("mouseout",(event,d)=>this.handleMouseOut(event,{...d,station:stationData.station},"IETD"))});this.addLegend();this.addLabels()}mouseoverStationLegend(event,stationObj){const tooltip=document.getElementById("d3-style-tooltip");const station_title=`[${stationObj.id}] ${stationObj.name}`;const tooltiptext=this.formatStationInfoTooltip(stationObj);tooltip.innerHTML=`
                        <div style="border-bottom: 1px solid rgba(255,255,255,0.3); margin-bottom: 5px; padding-bottom: 5px">
                            <strong>${station_title}</strong>
                        </div>
                        ${tooltiptext}
                    `;const tooltipWidth=tooltip.offsetWidth;const tooltipHeight=tooltip.offsetHeight;let left=event.pageX+10;let top=event.pageY-tooltipHeight-10;if(left+tooltipWidth>window.innerWidth){left=event.pageX-tooltipWidth-10}if(top<0){top=event.pageY+10}tooltip.style.left=left+"px";tooltip.style.top=top+"px";tooltip.style.opacity="1"}mouseoutStationLegend(){const tooltip=document.getElementById("d3-style-tooltip");tooltip.style.opacity="0"}mousemoveStationLegend(event){const tooltip=document.getElementById("d3-style-tooltip");const tooltipWidth=tooltip.offsetWidth;const tooltipHeight=tooltip.offsetHeight;let left=event.pageX+10;let top=event.pageY-tooltipHeight-10;if(left+tooltipWidth>window.innerWidth){left=event.pageX-tooltipWidth-10}if(top<0){top=event.pageY+10}tooltip.style.left=left+"px";tooltip.style.top=top+"px"}addLegend(){this.svg.selectAll(".legend").remove();const legend=this.svg.append("g").attr("class","legend").attr("transform",`translate(0, ${this.innerHeight+20})`);const padding=20;const itemHeight=20;let totalWidth=0;this.ietdProcessedData.forEach(stationData=>{const station_sname=this.IETDHPCPStations[stationData.station].sname;const tempText=legend.append("text").attr("font-size","10px").text(station_sname);const textWidth=tempText.node().getBBox().width;totalWidth+=textWidth+30+padding;tempText.remove()});const centerOffset=(this.innerWidth-totalWidth+padding)/2;let currentX=centerOffset;this.ietdProcessedData.forEach((stationData,i)=>{const station_id=stationData.station;const station_sname=this.IETDHPCPStations[station_id].sname;const legendGroup=legend.append("g").attr("transform",`translate(${currentX}, 0)`);const tempText=legendGroup.append("text").attr("font-size","10px").text(station_sname);const textWidth=tempText.node().getBBox().width;const itemWidth=textWidth+30;tempText.remove();legendGroup.append("circle").attr("r",4).attr("cx",6).attr("cy",itemHeight/2).attr("fill",this.stationColorScale(station_id));legendGroup.append("text").attr("x",20).attr("y",itemHeight/2).attr("font-size","10px").attr("alignment-baseline","middle").text(station_sname);legendGroup.append("rect").attr("x",0).attr("y",0).attr("width",itemWidth).attr("height",itemHeight).attr("fill","transparent").style("cursor","pointer").on("mouseover",event=>{const stationObj=this.IETDHPCPStations[station_id];this.mouseoverStationLegend(event,stationObj)}).on("mouseout",()=>{this.mouseoutStationLegend()}).on("mousemove",event=>{this.mousemoveStationLegend(event)});currentX+=itemWidth+padding})}addLabels(){this.svg.append("text").attr("class","y-label").attr("text-anchor","middle").attr("transform","rotate(-90)").attr("x",-this.innerHeight/2).attr("y",-50).attr("font-size","12px").attr("font-family","Arial").text("HPCP (in/hr)");this.svg.append("text").attr("class","title monthly").attr("x",this.innerWidth/2).attr("y",0).attr("text-anchor","middle").attr("font-family","Arial").attr("font-size","12px").attr("font-weight","bold").text("Monthly Average Precipitation").raise()}handleMouseOver(event,d,type){const station=this.IETDHPCPStations[d.station];this.tooltip.html(`
            <div style="color:black; font-size: 10px;">
                <strong style="color:blue">Station: ${station.name} [${d.station}]</strong><br/>
                Month: ${this.monthNames[d.month]}<br/>
                Average: ${d.average.toFixed(2)}<br/>
                ${this.selectedErrorBar!=="none"?`Error: ±${d.error.toFixed(2)}<br/>`:""}
                Count: ${d.count}
            </div>`).style("visibility","visible").style("top",`${event.pageY-10}px`).style("left",`${event.pageX+10}px`);const sanitizedStation=this.sanitizeStationId(d.station);this.svg.selectAll(`.station-${sanitizedStation}`).style("opacity",1).style("stroke-width",type==="line"?3:2);this.svg.selectAll(".station-group").filter(sd=>this.sanitizeStationId(sd.station)!==sanitizedStation).style("opacity",.3)}handleMouseMove(event){}handleMouseOut(event,d,type){this.tooltip.style("visibility","hidden");this.svg.selectAll(".station-group").style("opacity",1);this.svg.selectAll(".ietd-line").style("stroke-width",2);this.svg.selectAll(".ietd-point").style("stroke-width",2)}updateAxes(){this.xAxis.transition().duration(300).attr("transform",`translate(0,${this.innerHeight})`).call(d3.axisBottom(this.xScale).ticks(12).tickFormat(d=>this.monthNames[d]));this.yAxis.transition().duration(300).call(d3.axisLeft(this.yScale).ticks(5).tickFormat(d=>d.toFixed(2)));this.svg.select(".x-label").transition().duration(300).attr("x",this.innerWidth/2).attr("y",this.innerHeight+40);this.svg.select(".y-label").transition().duration(300).attr("x",-this.innerHeight/2).attr("y",-50);this.svg.select(".title").transition().duration(300).attr("x",this.innerWidth/2).attr("y",-10)}updateStationGroups(){this.svg.selectAll(".station-group").each((d,i,nodes)=>{const group=d3.select(nodes[i]);const sanitizedStation=this.sanitizeStationId(d.station);const totalStations=this.ietdProcessedData.length;const line=this.createLine(i,totalStations);group.select(`.station-${sanitizedStation}`).transition().duration(300).attr("d",d=>{const validData=d.monthlyData.filter(point=>!isNaN(point.month)&&!isNaN(point.average)&&point.month!==null&&point.average!==null);return line(validData)});const horizontalOffset=this.offsetConfig.getOffset(i,totalStations);group.selectAll(".ietd-point").transition().duration(300).attr("cx",d=>{const baseX=this.xScale(d.month);const offset=this.offsetConfig.getOffset(i,totalStations,d.month);return baseX+offset}).attr("cy",d=>this.yScale(d.average))})}resize(){if(!this.isVisible())return;const container=d3.select(`#${this.containerId}`);this.width=parseInt(container.style("width"));this.height=parseInt(container.style("height"));this.innerWidth=this.width-this.margin.left-this.margin.right;this.innerHeight=this.height-this.margin.top-this.margin.bottom;const svg=container.select("svg");svg.attr("width",this.width).attr("height",this.height);let mainGroup=svg.select("g.main-group");if(mainGroup.empty()){mainGroup=svg.append("g").attr("class","main-group")}mainGroup.attr("transform",`translate(${this.margin.left},${this.margin.top})`);this.createScales();this.updateAxes();this.updateStationGroups();this.drawErrorBars();const legend=this.svg.select(".legend");if(!legend.empty()){legend.remove();this.addLegend()}const yearSelectorContainer=container.select(".year-selector-container");if(!yearSelectorContainer.empty()){yearSelectorContainer.style("position","absolute").style("top","4px").style("right","30px")}}debounce(func,wait){let timeout;return(...args)=>{clearTimeout(timeout);timeout=setTimeout(()=>func.apply(this,args),wait)}}destroy(){try{window.removeEventListener("resize",this.debouncedResize);const container=d3.select(`#${this.containerId}`);this.svg.selectAll(".error-bar").remove();container.select("svg").remove();d3.selectAll(".precipitation-tooltip").remove();container.select(".year-selector-container").remove();container.select(".error_bars_selector-container").remove();d3.select(`#${this.containerId}`).select(".offset-toggle-container").remove();d3.select("#offsetToggle").on("change",null);container.selectAll(".station-group").remove();container.selectAll(".error-bar").remove();container.selectAll(".ietd-line").remove();container.selectAll(".ietd-point").remove();container.selectAll(".x-axis, .y-axis").remove();container.selectAll(".x-label, .y-label").remove();container.selectAll(".title, .monthly").remove();container.selectAll(".legend").remove();container.selectAll("*").on("mouseover",null).on("mousemove",null).on("mouseout",null).on("click",null).on("change",null);container.selectAll("*").interrupt();this.IETDData=null;this.ietdProcessedData=null;this.stationColorScale=null;this.svg=null;this.tooltip=null;this.xScale=null;this.yScale=null;this.xAxis=null;this.yAxis=null;this.selectedYear=null;this.selectedErrorBar=null;this.width=null;this.height=null;this.innerWidth=null;this.innerHeight=null;this.margin=null;this.monthNames=null;this.offsetConfig=null;this.debouncedResize=null;if(this.resizeTimeout){clearTimeout(this.resizeTimeout);this.resizeTimeout=null}if(typeof super.destroy==="function"){super.destroy()}}catch(error){console.error("Error in destroy method:",error);this.IETDData=null;this.svg=null;this.tooltip=null}}}