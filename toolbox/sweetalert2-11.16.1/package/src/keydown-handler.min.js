import{clickConfirm}from"./staticMethods/dom.js";import{DismissReason}from"./utils/DismissReason.js";import*as dom from"./utils/dom/index.js";import{callIfFunction}from"./utils/utils.js";export const removeKeydownHandler=globalState=>{if(globalState.keydownTarget&&globalState.keydownHandlerAdded){globalState.keydownTarget.removeEventListener("keydown",globalState.keydownHandler,{capture:globalState.keydownListenerCapture});globalState.keydownHandlerAdded=false}};export const addKeydownHandler=(globalState,innerParams,dismissWith)=>{removeKeydownHandler(globalState);if(!innerParams.toast){globalState.keydownHandler=e=>keydownHandler(innerParams,e,dismissWith);globalState.keydownTarget=innerParams.keydownListenerCapture?window:dom.getPopup();globalState.keydownListenerCapture=innerParams.keydownListenerCapture;globalState.keydownTarget.addEventListener("keydown",globalState.keydownHandler,{capture:globalState.keydownListenerCapture});globalState.keydownHandlerAdded=true}};export const setFocus=(index,increment)=>{const focusableElements=dom.getFocusableElements();if(focusableElements.length){index=index+increment;if(index===focusableElements.length){index=0}else if(index===-1){index=focusableElements.length-1}focusableElements[index].focus();return}dom.getPopup()?.focus()};const arrowKeysNextButton=["ArrowRight","ArrowDown"];const arrowKeysPreviousButton=["ArrowLeft","ArrowUp"];const keydownHandler=(innerParams,event,dismissWith)=>{if(!innerParams){return}if(event.isComposing||event.keyCode===229){return}if(innerParams.stopKeydownPropagation){event.stopPropagation()}if(event.key==="Enter"){handleEnter(event,innerParams)}else if(event.key==="Tab"){handleTab(event)}else if([...arrowKeysNextButton,...arrowKeysPreviousButton].includes(event.key)){handleArrows(event.key)}else if(event.key==="Escape"){handleEsc(event,innerParams,dismissWith)}};const handleEnter=(event,innerParams)=>{if(!callIfFunction(innerParams.allowEnterKey)){return}const input=dom.getInput(dom.getPopup(),innerParams.input);if(event.target&&input&&event.target instanceof HTMLElement&&event.target.outerHTML===input.outerHTML){if(["textarea","file"].includes(innerParams.input)){return}clickConfirm();event.preventDefault()}};const handleTab=event=>{const targetElement=event.target;const focusableElements=dom.getFocusableElements();let btnIndex=-1;for(let i=0;i<focusableElements.length;i++){if(targetElement===focusableElements[i]){btnIndex=i;break}}if(!event.shiftKey){setFocus(btnIndex,1)}else{setFocus(btnIndex,-1)}event.stopPropagation();event.preventDefault()};const handleArrows=key=>{const actions=dom.getActions();const confirmButton=dom.getConfirmButton();const denyButton=dom.getDenyButton();const cancelButton=dom.getCancelButton();if(!actions||!confirmButton||!denyButton||!cancelButton){return}const buttons=[confirmButton,denyButton,cancelButton];if(document.activeElement instanceof HTMLElement&&!buttons.includes(document.activeElement)){return}const sibling=arrowKeysNextButton.includes(key)?"nextElementSibling":"previousElementSibling";let buttonToFocus=document.activeElement;if(!buttonToFocus){return}for(let i=0;i<actions.children.length;i++){buttonToFocus=buttonToFocus[sibling];if(!buttonToFocus){return}if(buttonToFocus instanceof HTMLButtonElement&&dom.isVisible(buttonToFocus)){break}}if(buttonToFocus instanceof HTMLButtonElement){buttonToFocus.focus()}};const handleEsc=(event,innerParams,dismissWith)=>{if(callIfFunction(innerParams.allowEscapeKey)){event.preventDefault();dismissWith(DismissReason.esc)}};