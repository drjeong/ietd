import{DismissReason}from"./utils/DismissReason.js";import{callIfFunction}from"./utils/utils.js";export const handlePopupClick=(innerParams,domCache,dismissWith)=>{if(innerParams.toast){handleToastClick(innerParams,domCache,dismissWith)}else{handleModalMousedown(domCache);handleContainerMousedown(domCache);handleModalClick(innerParams,domCache,dismissWith)}};const handleToastClick=(innerParams,domCache,dismissWith)=>{domCache.popup.onclick=()=>{if(innerParams&&(isAnyButtonShown(innerParams)||innerParams.timer||innerParams.input)){return}dismissWith(DismissReason.close)}};const isAnyButtonShown=innerParams=>{return!!(innerParams.showConfirmButton||innerParams.showDenyButton||innerParams.showCancelButton||innerParams.showCloseButton)};let ignoreOutsideClick=false;const handleModalMousedown=domCache=>{domCache.popup.onmousedown=()=>{domCache.container.onmouseup=function(e){domCache.container.onmouseup=()=>{};if(e.target===domCache.container){ignoreOutsideClick=true}}}};const handleContainerMousedown=domCache=>{domCache.container.onmousedown=e=>{if(e.target===domCache.container){e.preventDefault()}domCache.popup.onmouseup=function(e){domCache.popup.onmouseup=()=>{};if(e.target===domCache.popup||e.target instanceof HTMLElement&&domCache.popup.contains(e.target)){ignoreOutsideClick=true}}}};const handleModalClick=(innerParams,domCache,dismissWith)=>{domCache.container.onclick=e=>{if(ignoreOutsideClick){ignoreOutsideClick=false;return}if(e.target===domCache.container&&callIfFunction(innerParams.allowOutsideClick)){dismissWith(DismissReason.backdrop)}}};