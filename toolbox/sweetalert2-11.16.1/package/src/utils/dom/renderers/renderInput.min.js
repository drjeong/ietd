import privateProps from"../../../privateProps.js";import{swalClasses}from"../../classes.js";import*as dom from"../../dom/index.js";import{error,isPromise,warn}from"../../utils.js";const inputClasses=["input","file","range","select","radio","checkbox","textarea"];export const renderInput=(instance,params)=>{const popup=dom.getPopup();if(!popup){return}const innerParams=privateProps.innerParams.get(instance);const rerender=!innerParams||params.input!==innerParams.input;inputClasses.forEach(inputClass=>{const inputContainer=dom.getDirectChildByClass(popup,swalClasses[inputClass]);if(!inputContainer){return}setAttributes(inputClass,params.inputAttributes);inputContainer.className=swalClasses[inputClass];if(rerender){dom.hide(inputContainer)}});if(params.input){if(rerender){showInput(params)}setCustomClass(params)}};const showInput=params=>{if(!params.input){return}if(!renderInputType[params.input]){error(`Unexpected type of input! Expected ${Object.keys(renderInputType).join(" | ")}, got "${params.input}"`);return}const inputContainer=getInputContainer(params.input);if(!inputContainer){return}const input=renderInputType[params.input](inputContainer,params);dom.show(inputContainer);if(params.inputAutoFocus){setTimeout(()=>{dom.focusInput(input)})}};const removeAttributes=input=>{for(let i=0;i<input.attributes.length;i++){const attrName=input.attributes[i].name;if(!["id","type","value","style"].includes(attrName)){input.removeAttribute(attrName)}}};const setAttributes=(inputClass,inputAttributes)=>{const popup=dom.getPopup();if(!popup){return}const input=dom.getInput(popup,inputClass);if(!input){return}removeAttributes(input);for(const attr in inputAttributes){input.setAttribute(attr,inputAttributes[attr])}};const setCustomClass=params=>{if(!params.input){return}const inputContainer=getInputContainer(params.input);if(inputContainer){dom.applyCustomClass(inputContainer,params,"input")}};const setInputPlaceholder=(input,params)=>{if(!input.placeholder&&params.inputPlaceholder){input.placeholder=params.inputPlaceholder}};const setInputLabel=(input,prependTo,params)=>{if(params.inputLabel){const label=document.createElement("label");const labelClass=swalClasses["input-label"];label.setAttribute("for",input.id);label.className=labelClass;if(typeof params.customClass==="object"){dom.addClass(label,params.customClass.inputLabel)}label.innerText=params.inputLabel;prependTo.insertAdjacentElement("beforebegin",label)}};const getInputContainer=inputType=>{const popup=dom.getPopup();if(!popup){return}return dom.getDirectChildByClass(popup,swalClasses[inputType]||swalClasses.input)};const checkAndSetInputValue=(input,inputValue)=>{if(["string","number"].includes(typeof inputValue)){input.value=`${inputValue}`}else if(!isPromise(inputValue)){warn(`Unexpected type of inputValue! Expected "string", "number" or "Promise", got "${typeof inputValue}"`)}};const renderInputType={};renderInputType.text=renderInputType.email=renderInputType.password=renderInputType.number=renderInputType.tel=renderInputType.url=renderInputType.search=renderInputType.date=renderInputType["datetime-local"]=renderInputType.time=renderInputType.week=renderInputType.month=(input,params)=>{checkAndSetInputValue(input,params.inputValue);setInputLabel(input,input,params);setInputPlaceholder(input,params);input.type=params.input;return input};renderInputType.file=(input,params)=>{setInputLabel(input,input,params);setInputPlaceholder(input,params);return input};renderInputType.range=(range,params)=>{const rangeInput=range.querySelector("input");const rangeOutput=range.querySelector("output");checkAndSetInputValue(rangeInput,params.inputValue);rangeInput.type=params.input;checkAndSetInputValue(rangeOutput,params.inputValue);setInputLabel(rangeInput,range,params);return range};renderInputType.select=(select,params)=>{select.textContent="";if(params.inputPlaceholder){const placeholder=document.createElement("option");dom.setInnerHtml(placeholder,params.inputPlaceholder);placeholder.value="";placeholder.disabled=true;placeholder.selected=true;select.appendChild(placeholder)}setInputLabel(select,select,params);return select};renderInputType.radio=radio=>{radio.textContent="";return radio};renderInputType.checkbox=(checkboxContainer,params)=>{const checkbox=dom.getInput(dom.getPopup(),"checkbox");checkbox.value="1";checkbox.checked=Boolean(params.inputValue);const label=checkboxContainer.querySelector("span");dom.setInnerHtml(label,params.inputPlaceholder||params.inputLabel);return checkbox};renderInputType.textarea=(textarea,params)=>{checkAndSetInputValue(textarea,params.inputValue);setInputPlaceholder(textarea,params);setInputLabel(textarea,textarea,params);const getMargin=el=>parseInt(window.getComputedStyle(el).marginLeft)+parseInt(window.getComputedStyle(el).marginRight);setTimeout(()=>{if("MutationObserver"in window){const initialPopupWidth=parseInt(window.getComputedStyle(dom.getPopup()).width);const textareaResizeHandler=()=>{if(!document.body.contains(textarea)){return}const textareaWidth=textarea.offsetWidth+getMargin(textarea);if(textareaWidth>initialPopupWidth){dom.getPopup().style.width=`${textareaWidth}px`}else{dom.applyNumericalStyle(dom.getPopup(),"width",params.width)}};new MutationObserver(textareaResizeHandler).observe(textarea,{attributes:true,attributeFilter:["style"]})}});return textarea};