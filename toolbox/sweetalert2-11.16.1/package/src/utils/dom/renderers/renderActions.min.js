import{swalClasses}from"../../classes.js";import*as dom from"../../dom/index.js";import{capitalizeFirstLetter}from"../../utils.js";export const renderActions=(instance,params)=>{const actions=dom.getActions();const loader=dom.getLoader();if(!actions||!loader){return}if(!params.showConfirmButton&&!params.showDenyButton&&!params.showCancelButton){dom.hide(actions)}else{dom.show(actions)}dom.applyCustomClass(actions,params,"actions");renderButtons(actions,loader,params);dom.setInnerHtml(loader,params.loaderHtml||"");dom.applyCustomClass(loader,params,"loader")};function renderButtons(actions,loader,params){const confirmButton=dom.getConfirmButton();const denyButton=dom.getDenyButton();const cancelButton=dom.getCancelButton();if(!confirmButton||!denyButton||!cancelButton){return}renderButton(confirmButton,"confirm",params);renderButton(denyButton,"deny",params);renderButton(cancelButton,"cancel",params);handleButtonsStyling(confirmButton,denyButton,cancelButton,params);if(params.reverseButtons){if(params.toast){actions.insertBefore(cancelButton,confirmButton);actions.insertBefore(denyButton,confirmButton)}else{actions.insertBefore(cancelButton,loader);actions.insertBefore(denyButton,loader);actions.insertBefore(confirmButton,loader)}}}function handleButtonsStyling(confirmButton,denyButton,cancelButton,params){if(!params.buttonsStyling){dom.removeClass([confirmButton,denyButton,cancelButton],swalClasses.styled);return}dom.addClass([confirmButton,denyButton,cancelButton],swalClasses.styled);if(params.confirmButtonColor){confirmButton.style.backgroundColor=params.confirmButtonColor;dom.addClass(confirmButton,swalClasses["default-outline"])}if(params.denyButtonColor){denyButton.style.backgroundColor=params.denyButtonColor;dom.addClass(denyButton,swalClasses["default-outline"])}if(params.cancelButtonColor){cancelButton.style.backgroundColor=params.cancelButtonColor;dom.addClass(cancelButton,swalClasses["default-outline"])}}function renderButton(button,buttonType,params){const buttonName=capitalizeFirstLetter(buttonType);dom.toggle(button,params[`show${buttonName}Button`],"inline-block");dom.setInnerHtml(button,params[`${buttonType}ButtonText`]||"");button.setAttribute("aria-label",params[`${buttonType}ButtonAriaLabel`]||"");button.className=swalClasses[buttonType];dom.applyCustomClass(button,params,`${buttonType}Button`)}