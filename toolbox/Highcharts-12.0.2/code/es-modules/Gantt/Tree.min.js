"use strict";import U from"../Core/Utilities.js";const{extend,isNumber,pick}=U;function getListOfParents(data){const root="",ids=[],listOfParents=data.reduce((prev,curr)=>{const{parent="",id}=curr;if(typeof prev[parent]==="undefined"){prev[parent]=[]}prev[parent].push(curr);if(id){ids.push(id)}return prev},{});Object.keys(listOfParents).forEach(node=>{if(node!==root&&ids.indexOf(node)===-1){const adoptedByRoot=listOfParents[node].map(function(orphan){const{...parentExcluded}=orphan;return parentExcluded});listOfParents[root].push(...adoptedByRoot);delete listOfParents[node]}});return listOfParents}function getNode(id,parent,level,data,mapOfIdToChildren,options){const after=options&&options.after,before=options&&options.before,node={data:data,depth:level-1,id:id,level:level,parent:parent||""};let descendants=0,height=0,start,end;if(typeof before==="function"){before(node,options)}const children=(mapOfIdToChildren[id]||[]).map(child=>{const node=getNode(child.id,id,level+1,child,mapOfIdToChildren,options),childStart=child.start||NaN,childEnd=child.milestone===true?childStart:child.end||NaN;start=!isNumber(start)||childStart<start?childStart:start;end=!isNumber(end)||childEnd>end?childEnd:end;descendants=descendants+1+node.descendants;height=Math.max(node.height+1,height);return node});if(data){data.start=pick(data.start,start);data.end=pick(data.end,end)}extend(node,{children:children,descendants:descendants,height:height});if(typeof after==="function"){after(node,options)}return node}function getTree(data,options){return getNode("",null,1,null,getListOfParents(data),options)}const Tree={getNode:getNode,getTree:getTree};export default Tree;