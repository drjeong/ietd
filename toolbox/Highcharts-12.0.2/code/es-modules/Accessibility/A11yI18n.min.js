"use strict";import F from"../Core/Templating.js";const{format}=F;import U from"../Core/Utilities.js";const{getNestedProperty,pick}=U;var A11yI18nComposition;(function(A11yI18nComposition){function compose(ChartClass){const chartProto=ChartClass.prototype;if(!chartProto.langFormat){chartProto.langFormat=langFormat}}A11yI18nComposition.compose=compose;function formatExtendedStatement(statement,ctx){const eachStart=statement.indexOf("#each("),pluralStart=statement.indexOf("#plural("),indexStart=statement.indexOf("["),indexEnd=statement.indexOf("]");let arr,result;if(eachStart>-1){const eachEnd=statement.slice(eachStart).indexOf(")")+eachStart,preEach=statement.substring(0,eachStart),postEach=statement.substring(eachEnd+1),eachStatement=statement.substring(eachStart+6,eachEnd),eachArguments=eachStatement.split(",");let lenArg=Number(eachArguments[1]),len;result="";arr=getNestedProperty(eachArguments[0],ctx);if(arr){lenArg=isNaN(lenArg)?arr.length:lenArg;len=lenArg<0?arr.length+lenArg:Math.min(lenArg,arr.length);for(let i=0;i<len;++i){result+=preEach+arr[i]+postEach}}return result.length?result:""}if(pluralStart>-1){const pluralEnd=statement.slice(pluralStart).indexOf(")")+pluralStart,pluralStatement=statement.substring(pluralStart+8,pluralEnd),pluralArguments=pluralStatement.split(","),num=Number(getNestedProperty(pluralArguments[0],ctx));switch(num){case 0:result=pick(pluralArguments[4],pluralArguments[1]);break;case 1:result=pick(pluralArguments[2],pluralArguments[1]);break;case 2:result=pick(pluralArguments[3],pluralArguments[1]);break;default:result=pluralArguments[1]}return result?stringTrim(result):""}if(indexStart>-1){const arrayName=statement.substring(0,indexStart),ix=Number(statement.substring(indexStart+1,indexEnd));let val;arr=getNestedProperty(arrayName,ctx);if(!isNaN(ix)&&arr){if(ix<0){val=arr[arr.length+ix];if(typeof val==="undefined"){val=arr[0]}}else{val=arr[ix];if(typeof val==="undefined"){val=arr[arr.length-1]}}}return typeof val!=="undefined"?val:""}return"{"+statement+"}"}function i18nFormat(formatString,context,chart){const getFirstBracketStatement=(sourceStr,offset)=>{const str=sourceStr.slice(offset||0),startBracket=str.indexOf("{"),endBracket=str.indexOf("}");if(startBracket>-1&&endBracket>startBracket){return{statement:str.substring(startBracket+1,endBracket),begin:offset+startBracket+1,end:offset+endBracket}}},tokens=[];let bracketRes,constRes,cursor=0;do{bracketRes=getFirstBracketStatement(formatString,cursor);constRes=formatString.substring(cursor,bracketRes&&bracketRes.begin-1);if(constRes.length){tokens.push({value:constRes,type:"constant"})}if(bracketRes){tokens.push({value:bracketRes.statement,type:"statement"})}cursor=bracketRes?bracketRes.end+1:cursor+1}while(bracketRes);tokens.forEach(token=>{if(token.type==="statement"){token.value=formatExtendedStatement(token.value,context)}});return format(tokens.reduce((acc,cur)=>acc+cur.value,""),context,chart)}A11yI18nComposition.i18nFormat=i18nFormat;function langFormat(langKey,context){const keys=langKey.split(".");let formatString=this.options.lang,i=0;for(;i<keys.length;++i){formatString=formatString&&formatString[keys[i]]}return typeof formatString==="string"?i18nFormat(formatString,context,this):""}function stringTrim(str){return str.trim&&str.trim()||str.replace(/^\s+|\s+$/g,"")}})(A11yI18nComposition||(A11yI18nComposition={}));export default A11yI18nComposition;