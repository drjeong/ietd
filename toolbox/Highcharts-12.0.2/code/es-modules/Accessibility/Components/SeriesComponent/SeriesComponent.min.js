"use strict";import AccessibilityComponent from"../../AccessibilityComponent.js";import ChartUtilities from"../../Utils/ChartUtilities.js";const{hideSeriesFromAT}=ChartUtilities;import ForcedMarkers from"./ForcedMarkers.js";import NewDataAnnouncer from"./NewDataAnnouncer.js";import SeriesDescriber from"./SeriesDescriber.js";const{describeSeries}=SeriesDescriber;import SeriesKeyboardNavigation from"./SeriesKeyboardNavigation.js";class SeriesComponent extends AccessibilityComponent{static compose(ChartClass,PointClass,SeriesClass){NewDataAnnouncer.compose(SeriesClass);ForcedMarkers.compose(SeriesClass);SeriesKeyboardNavigation.compose(ChartClass,PointClass,SeriesClass)}init(){this.newDataAnnouncer=new NewDataAnnouncer(this.chart);this.newDataAnnouncer.init();this.keyboardNavigation=new SeriesKeyboardNavigation(this.chart,this.keyCodes);this.keyboardNavigation.init();this.hideTooltipFromATWhenShown();this.hideSeriesLabelsFromATWhenShown()}hideTooltipFromATWhenShown(){const component=this;if(this.chart.tooltip){this.addEvent(this.chart.tooltip.constructor,"refresh",function(){if(this.chart===component.chart&&this.label&&this.label.element){this.label.element.setAttribute("aria-hidden",true)}})}}hideSeriesLabelsFromATWhenShown(){this.addEvent(this.chart,"afterDrawSeriesLabels",function(){this.series.forEach(function(series){if(series.labelBySeries){series.labelBySeries.attr("aria-hidden",true)}})})}onChartRender(){const chart=this.chart;chart.series.forEach(function(series){const shouldDescribeSeries=(series.options.accessibility&&series.options.accessibility.enabled)!==false&&series.visible&&series.getPointsCollection().length!==0;if(shouldDescribeSeries){describeSeries(series)}else{hideSeriesFromAT(series)}})}getKeyboardNavigation(){return this.keyboardNavigation.getKeyboardNavigationHandler()}destroy(){this.newDataAnnouncer.destroy();this.keyboardNavigation.destroy()}}export default SeriesComponent;