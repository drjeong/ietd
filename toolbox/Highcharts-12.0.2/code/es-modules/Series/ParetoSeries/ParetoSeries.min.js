"use strict";import DerivedComposition from"../DerivedComposition.js";import ParetoSeriesDefaults from"./ParetoSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{line:LineSeries}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{correctFloat,merge,extend}=U;class ParetoSeries extends LineSeries{sumPointsPercents(yValues,xValues,sum,isSum){const percentPoints=[];let i=0,sumY=0,sumPercent=0,percentPoint;for(const point of yValues){if(point!==null){if(isSum){sumY+=point}else{percentPoint=point/sum*100;percentPoints.push([xValues[i],correctFloat(sumPercent+percentPoint)]);sumPercent+=percentPoint}}++i}return isSum?sumY:percentPoints}setDerivedData(){const xValues=this.baseSeries?.getColumn("x")||[],yValues=this.baseSeries?.getColumn("y")||[],sum=this.sumPointsPercents(yValues,xValues,null,true);this.setData(this.sumPointsPercents(yValues,xValues,sum,false),false)}}ParetoSeries.defaultOptions=merge(LineSeries.defaultOptions,ParetoSeriesDefaults);extend(ParetoSeries.prototype,{hasDerivedData:DerivedComposition.hasDerivedData});DerivedComposition.compose(ParetoSeries);SeriesRegistry.registerSeriesType("pareto",ParetoSeries);export default ParetoSeries;