"use strict";import LollipopPoint from"./LollipopPoint.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import Series from"../../Core/Series/Series.js";const{seriesTypes:{column:{prototype:colProto},dumbbell:{prototype:dumbbellProto},scatter:ScatterSeries}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{extend,merge}=U;class LollipopSeries extends Series{drawPoints(){const series=this,pointLength=series.points.length;let i=0,point;super.drawPoints.apply(series,arguments);while(i<pointLength){point=series.points[i];series.drawConnector(point);i++}}translate(){const series=this;colProto.translate.apply(series,arguments);for(const point of series.points){const{pointWidth,shapeArgs}=point;if(shapeArgs?.x){shapeArgs.x+=pointWidth/2;point.plotX=shapeArgs.x||0}}}}LollipopSeries.defaultOptions=merge(Series.defaultOptions,{threshold:0,connectorWidth:1,groupPadding:.2,pointPadding:.1,states:{hover:{lineWidthPlus:0,connectorWidthPlus:1,halo:false}},lineWidth:0,dataLabels:{align:void 0,verticalAlign:void 0},pointRange:1});extend(LollipopSeries.prototype,{alignDataLabel:colProto.alignDataLabel,crispCol:colProto.crispCol,drawConnector:dumbbellProto.drawConnector,drawDataLabels:colProto.drawDataLabels,getColumnMetrics:colProto.getColumnMetrics,getConnectorAttribs:dumbbellProto.getConnectorAttribs,pointClass:LollipopPoint});SeriesRegistry.registerSeriesType("lollipop",LollipopSeries);export default LollipopSeries;"";