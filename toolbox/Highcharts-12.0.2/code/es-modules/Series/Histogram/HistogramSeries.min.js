"use strict";import DerivedComposition from"../DerivedComposition.js";import HistogramSeriesDefaults from"./HistogramSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{arrayMax,arrayMin,correctFloat,extend,isNumber,merge}=U;const binsNumberFormulas={"square-root":function(baseSeries){return Math.ceil(Math.sqrt(baseSeries.options.data.length))},sturges:function(baseSeries){return Math.ceil(Math.log(baseSeries.options.data.length)*Math.LOG2E)},rice:function(baseSeries){return Math.ceil(2*Math.pow(baseSeries.options.data.length,1/3))}};function fitToBinLeftClosed(bins){return function(y){let i=1;while(bins[i]<=y){i++}return bins[--i]}}class HistogramSeries extends ColumnSeries{binsNumber(){const binsNumberOption=this.options.binsNumber;const binsNumber=binsNumberFormulas[binsNumberOption]||typeof binsNumberOption==="function"&&binsNumberOption;return Math.ceil(binsNumber&&binsNumber(this.baseSeries)||(isNumber(binsNumberOption)?binsNumberOption:binsNumberFormulas["square-root"](this.baseSeries)))}derivedData(baseData,binsNumber,binWidth){const series=this,max=correctFloat(arrayMax(baseData)),min=correctFloat(arrayMin(baseData)),frequencies=[],bins={},data=[];let x;binWidth=series.binWidth=correctFloat(isNumber(binWidth)?binWidth||1:(max-min)/binsNumber);series.options.pointRange=Math.max(binWidth,0);for(x=min;x<max&&(series.userOptions.binWidth||correctFloat(max-x)>=binWidth||correctFloat(correctFloat(min+frequencies.length*binWidth)-x)<=0);x=correctFloat(x+binWidth)){frequencies.push(x);bins[x]=0}if(bins[min]!==0){frequencies.push(min);bins[min]=0}const fitToBin=fitToBinLeftClosed(frequencies.map(elem=>parseFloat(elem)));for(const y of baseData){bins[correctFloat(fitToBin(y))]++}for(const key of Object.keys(bins)){data.push({x:Number(key),y:bins[key],x2:correctFloat(Number(key)+binWidth)})}data.sort((a,b)=>a.x-b.x);data[data.length-1].x2=max;return data}setDerivedData(){const yData=this.baseSeries?.getColumn("y");if(!yData?.length){this.setData([]);return}const data=this.derivedData(yData,this.binsNumber(),this.options.binWidth);this.setData(data,false)}}HistogramSeries.defaultOptions=merge(ColumnSeries.defaultOptions,HistogramSeriesDefaults);extend(HistogramSeries.prototype,{hasDerivedData:DerivedComposition.hasDerivedData});DerivedComposition.compose(HistogramSeries);SeriesRegistry.registerSeriesType("histogram",HistogramSeries);export default HistogramSeries;