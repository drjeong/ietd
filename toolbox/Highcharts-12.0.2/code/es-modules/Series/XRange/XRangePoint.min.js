"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:{prototype:{pointClass:ColumnPoint}}}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{extend}=U;class XRangePoint extends ColumnPoint{static getColorByCategory(series,point){const colors=series.options.colors||series.chart.options.colors,colorCount=colors?colors.length:series.chart.options.chart.colorCount,colorIndex=point.y%colorCount,color=colors&&colors[colorIndex];return{colorIndex:colorIndex,color:color}}resolveColor(){const series=this.series;if(series.options.colorByPoint&&!this.options.color){const colorByPoint=XRangePoint.getColorByCategory(series,this);if(!series.chart.styledMode){this.color=colorByPoint.color}if(!this.options.colorIndex){this.colorIndex=colorByPoint.colorIndex}}else{this.color=this.options.color||series.color}}constructor(series,options){super(series,options);if(!this.y){this.y=0}}applyOptions(options,x){super.applyOptions(options,x);this.x2=this.series.chart.time.parse(this.x2);this.isNull=!this.isValid?.();return this}setState(){super.setState.apply(this,arguments);this.series.drawPoint(this,this.series.getAnimationVerb())}isValid(){return typeof this.x==="number"&&typeof this.x2==="number"}}extend(XRangePoint.prototype,{ttBelow:false,tooltipDateKeys:["x","x2"]});export default XRangePoint;"";