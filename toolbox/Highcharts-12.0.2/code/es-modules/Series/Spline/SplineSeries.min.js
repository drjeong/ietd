"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{line:LineSeries}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{merge,pick}=U;class SplineSeries extends LineSeries{getPointSpline(points,point,i){const smoothing=1.5,denom=smoothing+1,plotX=point.plotX||0,plotY=point.plotY||0,lastPoint=points[i-1],nextPoint=points[i+1];let leftContX,leftContY,rightContX,rightContY;function doCurve(otherPoint){return otherPoint&&!otherPoint.isNull&&otherPoint.doCurve!==false&&!point.isCliff}if(doCurve(lastPoint)&&doCurve(nextPoint)){const lastX=lastPoint.plotX||0,lastY=lastPoint.plotY||0,nextX=nextPoint.plotX||0,nextY=nextPoint.plotY||0;let correction=0;leftContX=(smoothing*plotX+lastX)/denom;leftContY=(smoothing*plotY+lastY)/denom;rightContX=(smoothing*plotX+nextX)/denom;rightContY=(smoothing*plotY+nextY)/denom;if(rightContX!==leftContX){correction=(rightContY-leftContY)*(rightContX-plotX)/(rightContX-leftContX)+plotY-rightContY}leftContY+=correction;rightContY+=correction;if(leftContY>lastY&&leftContY>plotY){leftContY=Math.max(lastY,plotY);rightContY=2*plotY-leftContY}else if(leftContY<lastY&&leftContY<plotY){leftContY=Math.min(lastY,plotY);rightContY=2*plotY-leftContY}if(rightContY>nextY&&rightContY>plotY){rightContY=Math.max(nextY,plotY);leftContY=2*plotY-rightContY}else if(rightContY<nextY&&rightContY<plotY){rightContY=Math.min(nextY,plotY);leftContY=2*plotY-rightContY}point.rightContX=rightContX;point.rightContY=rightContY;point.controlPoints={low:[leftContX,leftContY],high:[rightContX,rightContY]}}const ret=["C",pick(lastPoint.rightContX,lastPoint.plotX,0),pick(lastPoint.rightContY,lastPoint.plotY,0),pick(leftContX,plotX,0),pick(leftContY,plotY,0),plotX,plotY];lastPoint.rightContX=lastPoint.rightContY=void 0;return ret}}SplineSeries.defaultOptions=merge(LineSeries.defaultOptions);SeriesRegistry.registerSeriesType("spline",SplineSeries);export default SplineSeries;"";