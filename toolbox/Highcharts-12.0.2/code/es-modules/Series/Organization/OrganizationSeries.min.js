"use strict";import OrganizationPoint from"./OrganizationPoint.js";import OrganizationSeriesDefaults from"./OrganizationSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import PathUtilities from"../PathUtilities.js";const{sankey:SankeySeries}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{css,crisp,extend,isNumber,merge,pick}=U;import SVGElement from"../../Core/Renderer/SVG/SVGElement.js";import TextPath from"../../Extensions/TextPath.js";TextPath.compose(SVGElement);class OrganizationSeries extends SankeySeries{alignDataLabel(point,dataLabel,options){const shapeArgs=point.shapeArgs;if(options.useHTML&&shapeArgs){const padjust=this.options.borderWidth+2*this.options.dataLabels.padding;let width=shapeArgs.width||0,height=shapeArgs.height||0;if(this.chart.inverted){width=height;height=shapeArgs.width||0}height-=padjust;width-=padjust;const text=dataLabel.text;if(text){css(text.element.parentNode,{width:width+"px",height:height+"px"});css(text.element,{left:0,top:0,width:"100%",height:"100%",overflow:"hidden"})}dataLabel.getBBox=()=>({width:width,height:height,x:0,y:0});dataLabel.width=width;dataLabel.height=height}super.alignDataLabel.apply(this,arguments)}createNode(id){const node=super.createNode.call(this,id);node.getSum=()=>1;return node}pointAttribs(point,state){const series=this,attribs=SankeySeries.prototype.pointAttribs.call(series,point,state),level=point.isNode?point.level:point.fromNode.level,levelOptions=series.mapOptionsToLevel[level||0]||{},options=point.options,stateOptions=levelOptions.states&&levelOptions.states[state]||{},borderRadius=pick(stateOptions.borderRadius,options.borderRadius,levelOptions.borderRadius,series.options.borderRadius),linkColor=pick(stateOptions.linkColor,options.linkColor,levelOptions.linkColor,series.options.linkColor,stateOptions.link&&stateOptions.link.color,options.link&&options.link.color,levelOptions.link&&levelOptions.link.color,series.options.link&&series.options.link.color),linkLineWidth=pick(stateOptions.linkLineWidth,options.linkLineWidth,levelOptions.linkLineWidth,series.options.linkLineWidth,stateOptions.link&&stateOptions.link.lineWidth,options.link&&options.link.lineWidth,levelOptions.link&&levelOptions.link.lineWidth,series.options.link&&series.options.link.lineWidth),linkOpacity=pick(stateOptions.linkOpacity,options.linkOpacity,levelOptions.linkOpacity,series.options.linkOpacity,stateOptions.link&&stateOptions.link.linkOpacity,options.link&&options.link.linkOpacity,levelOptions.link&&levelOptions.link.linkOpacity,series.options.link&&series.options.link.linkOpacity);if(!point.isNode){attribs.stroke=linkColor;attribs["stroke-width"]=linkLineWidth;attribs.opacity=linkOpacity;delete attribs.fill}else{if(isNumber(borderRadius)){attribs.r=borderRadius}}return attribs}translateLink(point){const chart=this.chart,options=this.options,fromNode=point.fromNode,toNode=point.toNode,linkWidth=pick(options.linkLineWidth,options.link.lineWidth,0),factor=pick(options.link.offset,.5),type=pick(point.options.link&&point.options.link.type,options.link.type);if(fromNode.shapeArgs&&toNode.shapeArgs){const hangingIndent=options.hangingIndent,hangingRight=options.hangingSide==="right",toOffset=toNode.options.offset,percentOffset=/%$/.test(toOffset)&&parseInt(toOffset,10),inverted=chart.inverted;let x1=crisp((fromNode.shapeArgs.x||0)+(fromNode.shapeArgs.width||0),linkWidth),y1=crisp((fromNode.shapeArgs.y||0)+(fromNode.shapeArgs.height||0)/2,linkWidth),x2=crisp(toNode.shapeArgs.x||0,linkWidth),y2=crisp((toNode.shapeArgs.y||0)+(toNode.shapeArgs.height||0)/2,linkWidth),xMiddle;if(inverted){x1-=fromNode.shapeArgs.width||0;x2+=toNode.shapeArgs.width||0}xMiddle=this.colDistance?crisp(x2+(inverted?1:-1)*(this.colDistance-this.nodeWidth)/2,linkWidth):crisp((x2+x1)/2,linkWidth);if(percentOffset&&(percentOffset>=50||percentOffset<=-50)){xMiddle=x2=crisp(x2+(inverted?-.5:.5)*(toNode.shapeArgs.width||0),linkWidth);y2=toNode.shapeArgs.y||0;if(percentOffset>0){y2+=toNode.shapeArgs.height||0}}if(toNode.hangsFrom===fromNode){if(chart.inverted){y1=!hangingRight?crisp((fromNode.shapeArgs.y||0)+(fromNode.shapeArgs.height||0)-hangingIndent/2,linkWidth):crisp((fromNode.shapeArgs.y||0)+hangingIndent/2,linkWidth);y2=!hangingRight?(toNode.shapeArgs.y||0)+(toNode.shapeArgs.height||0):(toNode.shapeArgs.y||0)+hangingIndent/2}else{y1=crisp((fromNode.shapeArgs.y||0)+hangingIndent/2,linkWidth)}xMiddle=x2=crisp((toNode.shapeArgs.x||0)+(toNode.shapeArgs.width||0)/2,linkWidth)}point.plotX=xMiddle;point.plotY=(y1+y2)/2;point.shapeType="path";if(type==="straight"){point.shapeArgs={d:[["M",x1,y1],["L",x2,y2]]}}else if(type==="curved"){const offset=Math.abs(x2-x1)*factor*(inverted?-1:1);point.shapeArgs={d:[["M",x1,y1],["C",x1+offset,y1,x2-offset,y2,x2,y2]]}}else{point.shapeArgs={d:PathUtilities.applyRadius([["M",x1,y1],["L",xMiddle,y1],["L",xMiddle,y2],["L",x2,y2]],pick(options.linkRadius,options.link.radius))}}point.dlBox={x:(x1+x2)/2,y:(y1+y2)/2,height:linkWidth,width:0}}}translateNode(node,column){super.translateNode(node,column);const chart=this.chart,options=this.options,sum=node.getSum(),translationFactor=this.translationFactor,nodeHeight=Math.max(Math.round(sum*translationFactor),options.minLinkWidth||0),hangingRight=options.hangingSide==="right",indent=options.hangingIndent||0,indentLogic=options.hangingIndentTranslation,minLength=options.minNodeLength||10,nodeWidth=Math.round(this.nodeWidth),shapeArgs=node.shapeArgs,sign=chart.inverted?-1:1;let parentNode=node.hangsFrom;if(parentNode){if(indentLogic==="cumulative"){shapeArgs.height-=indent;if(chart.inverted&&!hangingRight){shapeArgs.y-=sign*indent}while(parentNode){shapeArgs.y+=(hangingRight?1:sign)*indent;parentNode=parentNode.hangsFrom}}else if(indentLogic==="shrink"){while(parentNode&&shapeArgs.height>indent+minLength){shapeArgs.height-=indent;if(!chart.inverted||hangingRight){shapeArgs.y+=indent}parentNode=parentNode.hangsFrom}}else{shapeArgs.height-=indent;if(!chart.inverted||hangingRight){shapeArgs.y+=indent}}}node.nodeHeight=chart.inverted?shapeArgs.width:shapeArgs.height;if(node.shapeArgs&&!node.hangsFrom){node.shapeArgs=merge(node.shapeArgs,{x:(node.shapeArgs.x||0)+nodeWidth/2-(node.shapeArgs.width||0)/2,y:(node.shapeArgs.y||0)+nodeHeight/2-(node.shapeArgs.height||0)/2})}}drawDataLabels(){const dlOptions=this.options.dataLabels;if(dlOptions.linkTextPath&&dlOptions.linkTextPath.enabled){for(const link of this.points){link.options.dataLabels=merge(link.options.dataLabels,{useHTML:false})}}super.drawDataLabels()}}OrganizationSeries.defaultOptions=merge(SankeySeries.defaultOptions,OrganizationSeriesDefaults);extend(OrganizationSeries.prototype,{pointClass:OrganizationPoint});SeriesRegistry.registerSeriesType("organization",OrganizationSeries);export default OrganizationSeries;"";