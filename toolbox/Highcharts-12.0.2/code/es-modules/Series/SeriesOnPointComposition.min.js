"use strict";import DataTableCore from"../Data/DataTableCore.js";import H from"../Core/Globals.js";const{composed}=H;import Point from"../Core/Series/Point.js";import Series from"../Core/Series/Series.js";import SeriesRegistry from"../Core/Series/SeriesRegistry.js";const{bubble}=SeriesRegistry.seriesTypes;import SVGRenderer from"../Core/Renderer/SVG/SVGRenderer.js";import U from"../Core/Utilities.js";const{addEvent,defined,find,isNumber,pushUnique}=U;var SeriesOnPointComposition;(function(SeriesOnPointComposition){function compose(SeriesClass,ChartClass){if(pushUnique(composed,"SeriesOnPoint")){const{chartGetZData,seriesAfterInit,seriesAfterRender,seriesGetCenter,seriesShowOrHide,seriesTranslate}=Additions.prototype;SeriesClass.types.pie.prototype.onPointSupported=true;addEvent(SeriesClass,"afterInit",seriesAfterInit);addEvent(SeriesClass,"afterRender",seriesAfterRender);addEvent(SeriesClass,"afterGetCenter",seriesGetCenter);addEvent(SeriesClass,"hide",seriesShowOrHide);addEvent(SeriesClass,"show",seriesShowOrHide);addEvent(SeriesClass,"translate",seriesTranslate);addEvent(ChartClass,"beforeRender",chartGetZData);addEvent(ChartClass,"beforeRedraw",chartGetZData)}return SeriesClass}SeriesOnPointComposition.compose=compose;class Additions{constructor(series){this.getColumn=bubble.prototype.getColumn;this.getRadii=bubble.prototype.getRadii;this.getRadius=bubble.prototype.getRadius;this.getPxExtremes=bubble.prototype.getPxExtremes;this.getZExtremes=bubble.prototype.getZExtremes;this.chart=series.chart;this.series=series;this.options=series.options.onPoint}drawConnector(){if(!this.connector){this.connector=this.series.chart.renderer.path().addClass("highcharts-connector-seriesonpoint").attr({zIndex:-1}).add(this.series.markerGroup)}const attribs=this.getConnectorAttributes();attribs&&this.connector.animate(attribs)}getConnectorAttributes(){const chart=this.series.chart,onPointOptions=this.options;if(!onPointOptions){return}const connectorOpts=onPointOptions.connectorOptions||{},position=onPointOptions.position,connectedPoint=chart.get(onPointOptions.id);if(!(connectedPoint instanceof Point)||!position||!defined(connectedPoint.plotX)||!defined(connectedPoint.plotY)){return}const xFrom=defined(position.x)?position.x:connectedPoint.plotX,yFrom=defined(position.y)?position.y:connectedPoint.plotY,xTo=xFrom+(position.offsetX||0),yTo=yFrom+(position.offsetY||0),width=connectorOpts.width||1,color=connectorOpts.stroke||this.series.color,dashStyle=connectorOpts.dashstyle,attribs={d:SVGRenderer.prototype.crispLine([["M",xFrom,yFrom],["L",xTo,yTo]],width),"stroke-width":width};if(!chart.styledMode){attribs.stroke=color;attribs.dashstyle=dashStyle}return attribs}seriesAfterInit(){if(this.onPointSupported&&this.options.onPoint){this.bubblePadding=true;this.useMapGeometry=true;this.onPoint=new Additions(this)}}seriesAfterRender(){delete this.chart.bubbleZExtremes;this.onPoint&&this.onPoint.drawConnector()}seriesGetCenter(e){const onPointOptions=this.options.onPoint,center=e.positions;if(onPointOptions){const connectedPoint=this.chart.get(onPointOptions.id);if(connectedPoint instanceof Point&&defined(connectedPoint.plotX)&&defined(connectedPoint.plotY)){center[0]=connectedPoint.plotX;center[1]=connectedPoint.plotY}const position=onPointOptions.position;if(position){if(defined(position.x)){center[0]=position.x}if(defined(position.y)){center[1]=position.y}if(position.offsetX){center[0]+=position.offsetX}if(position.offsetY){center[1]+=position.offsetY}}}const radius=this.radii&&this.radii[this.index];if(isNumber(radius)){center[2]=radius*2}e.positions=center}seriesShowOrHide(){const allSeries=this.chart.series;this.points?.forEach(point=>{const series=find(allSeries,series=>{const id=((series.onPoint||{}).options||{}).id;if(!id){return false}return id===point.id});series&&series.setVisible(!series.visible,false)})}seriesTranslate(){if(this.onPoint){this.onPoint.getRadii();this.radii=this.onPoint.radii}}chartGetZData(){const zData=[];this.series.forEach(series=>{const onPointOpts=series.options.onPoint;zData.push(onPointOpts?.z??null)});const dataTable=new DataTableCore({columns:{z:zData}});this.series.forEach(series=>{if(series.onPoint){series.onPoint.dataTable=series.dataTable=dataTable}})}}SeriesOnPointComposition.Additions=Additions})(SeriesOnPointComposition||(SeriesOnPointComposition={}));export default SeriesOnPointComposition;"";