"use strict";import SeriesRegistry from"../Core/Series/SeriesRegistry.js";const{column:{prototype:columnProto}}=SeriesRegistry.seriesTypes;import SVGElement from"../Core/Renderer/SVG/SVGElement.js";import U from"../Core/Utilities.js";const{addEvent,defined}=U;var ColorMapComposition;(function(ColorMapComposition){ColorMapComposition.pointMembers={dataLabelOnNull:true,moveToTopOnHover:true,isValid:pointIsValid};ColorMapComposition.seriesMembers={colorKey:"value",axisTypes:["xAxis","yAxis","colorAxis"],parallelArrays:["x","y","value"],pointArrayMap:["value"],trackerGroups:["group","markerGroup","dataLabelsGroup"],colorAttribs:seriesColorAttribs,pointAttribs:columnProto.pointAttribs};function compose(SeriesClass){const PointClass=SeriesClass.prototype.pointClass;addEvent(PointClass,"afterSetState",onPointAfterSetState);return SeriesClass}ColorMapComposition.compose=compose;function onPointAfterSetState(e){const point=this,series=point.series,renderer=series.chart.renderer;if(point.moveToTopOnHover&&point.graphic){if(!series.stateMarkerGraphic){series.stateMarkerGraphic=new SVGElement(renderer,"use").css({pointerEvents:"none"}).add(point.graphic.parentGroup)}if(e?.state==="hover"){point.graphic.attr({id:this.id});series.stateMarkerGraphic.attr({href:`${renderer.url}#${this.id}`,visibility:"visible"})}else{series.stateMarkerGraphic.attr({href:""})}}}function pointIsValid(){return this.value!==null&&this.value!==Infinity&&this.value!==-Infinity&&(this.value===void 0||!isNaN(this.value))}function seriesColorAttribs(point){const ret={};if(defined(point.color)&&(!point.state||point.state==="normal")){ret[this.colorProp||"fill"]=point.color}return ret}})(ColorMapComposition||(ColorMapComposition={}));export default ColorMapComposition;