"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{series:{prototype:{pointClass:Point}},seriesTypes:{treemap:{prototype:{pointClass:TreemapPoint}}}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{correctFloat,extend,pInt}=U;class SunburstPoint extends TreemapPoint{getDataLabelPath(label){const renderer=this.series.chart.renderer,shapeArgs=this.shapeExisting,r=shapeArgs.r+pInt(label.options?.distance||0);let start=shapeArgs.start,end=shapeArgs.end;const angle=start+(end-start)/2;let upperHalf=angle<0&&angle>-Math.PI||angle>Math.PI,moreThanHalf;if(start===-Math.PI/2&&correctFloat(end)===correctFloat(Math.PI*1.5)){start=-Math.PI+Math.PI/360;end=-Math.PI/360;upperHalf=true}if(end-start>Math.PI){upperHalf=false;moreThanHalf=true;if(end-start>2*Math.PI-.01){start+=.01;end-=.01}}if(this.dataLabelPath){this.dataLabelPath=this.dataLabelPath.destroy()}this.dataLabelPath=renderer.arc({open:true,longArc:moreThanHalf?1:0}).attr({start:upperHalf?start:end,end:upperHalf?end:start,clockwise:+upperHalf,x:shapeArgs.x,y:shapeArgs.y,r:(r+shapeArgs.innerR)/2}).add(renderer.defs);return this.dataLabelPath}isValid(){return true}}extend(SunburstPoint.prototype,{getClassName:Point.prototype.getClassName,haloPath:Point.prototype.haloPath,setState:Point.prototype.setState});export default SunburstPoint;