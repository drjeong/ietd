"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{seriesTypes:{treemap:TreemapSeries}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{isNumber,isObject,merge}=U;function calculateLevelSizes(levelOptions,params){const p=isObject(params)?params:{};let result,totalWeight=0,diffRadius,levels,levelsNotIncluded,remainingSize,from,to;if(isObject(levelOptions)){result=merge({},levelOptions);from=isNumber(p.from)?p.from:0;to=isNumber(p.to)?p.to:0;levels=range(from,to);levelsNotIncluded=Object.keys(result).filter(key=>levels.indexOf(+key)===-1);diffRadius=remainingSize=isNumber(p.diffRadius)?p.diffRadius:0;for(const level of levels){const options=result[level],unit=options.levelSize.unit,value=options.levelSize.value;if(unit==="weight"){totalWeight+=value}else if(unit==="percentage"){options.levelSize={unit:"pixels",value:value/100*diffRadius};remainingSize-=options.levelSize.value}else if(unit==="pixels"){remainingSize-=value}}for(const level of levels){const options=result[level];if(options.levelSize.unit==="weight"){const weight=options.levelSize.value;result[level].levelSize={unit:"pixels",value:weight/totalWeight*remainingSize}}}for(const level of levelsNotIncluded){result[level].levelSize={value:0,unit:"pixels"}}}return result}function getLevelFromAndTo({level,height}){const from=level>0?level:1;const to=level+height;return{from:from,to:to}}function range(from,to){const result=[];if(isNumber(from)&&isNumber(to)&&from<=to){for(let i=from;i<=to;i++){result.push(i)}}return result}const SunburstUtilities={calculateLevelSizes:calculateLevelSizes,getLevelFromAndTo:getLevelFromAndTo,range:range,recursive:TreemapSeries.prototype.utils.recursive};export default SunburstUtilities;