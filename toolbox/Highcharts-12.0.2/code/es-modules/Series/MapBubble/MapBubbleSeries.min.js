"use strict";import BubbleSeries from"../Bubble/BubbleSeries.js";import MapBubblePoint from"./MapBubblePoint.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{seriesTypes:{map:{prototype:mapProto},mappoint:{prototype:mapPointProto}}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{extend,merge}=U;class MapBubbleSeries extends BubbleSeries{constructor(){super(...arguments);this.clearBounds=mapProto.clearBounds}searchPoint(e,compareX){return this.searchKDTree({plotX:e.chartX-this.chart.plotLeft,plotY:e.chartY-this.chart.plotTop},compareX,e)}translate(){mapPointProto.translate.call(this);this.getRadii();this.translateBubble()}}MapBubbleSeries.defaultOptions=merge(BubbleSeries.defaultOptions,{lineWidth:0,animationLimit:500,joinBy:"hc-key",tooltip:{pointFormat:"{point.name}: {point.z}"}});extend(MapBubbleSeries.prototype,{type:"mapbubble",axisTypes:["colorAxis"],getProjectedBounds:mapProto.getProjectedBounds,isCartesian:false,pointArrayMap:["z"],pointClass:MapBubblePoint,processData:mapProto.processData,projectPoint:mapPointProto.projectPoint,kdAxisArray:["plotX","plotY"],setData:mapProto.setData,setOptions:mapProto.setOptions,updateData:mapProto.updateData,useMapGeometry:true,xyFromShape:true});SeriesRegistry.registerSeriesType("mapbubble",MapBubbleSeries);export default MapBubbleSeries;"";