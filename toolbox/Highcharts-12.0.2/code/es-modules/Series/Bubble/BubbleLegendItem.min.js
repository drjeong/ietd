"use strict";import Color from"../../Core/Color/Color.js";const{parse:color}=Color;import F from"../../Core/Templating.js";import H from"../../Core/Globals.js";const{noop}=H;import U from"../../Core/Utilities.js";const{arrayMax,arrayMin,isNumber,merge,pick,stableSort}=U;class BubbleLegendItem{constructor(options,legend){this.setState=noop;this.init(options,legend)}init(options,legend){this.options=options;this.visible=true;this.chart=legend.chart;this.legend=legend}addToLegend(items){items.splice(this.options.legendIndex,0,this)}drawLegendSymbol(legend){const itemDistance=pick(legend.options.itemDistance,20),legendItem=this.legendItem||{},options=this.options,ranges=options.ranges,connectorDistance=options.connectorDistance;let connectorSpace;if(!ranges||!ranges.length||!isNumber(ranges[0].value)){legend.options.bubbleLegend.autoRanges=true;return}stableSort(ranges,function(a,b){return b.value-a.value});this.ranges=ranges;this.setOptions();this.render();const maxLabel=this.getMaxLabelSize(),radius=this.ranges[0].radius,size=radius*2;connectorSpace=connectorDistance-radius+maxLabel.width;connectorSpace=connectorSpace>0?connectorSpace:0;this.maxLabel=maxLabel;this.movementX=options.labels.align==="left"?connectorSpace:0;legendItem.labelWidth=size+connectorSpace+itemDistance;legendItem.labelHeight=size+maxLabel.height/2}setOptions(){const ranges=this.ranges,options=this.options,series=this.chart.series[options.seriesIndex],baseline=this.legend.baseline,bubbleAttribs={zIndex:options.zIndex,"stroke-width":options.borderWidth},connectorAttribs={zIndex:options.zIndex,"stroke-width":options.connectorWidth},labelAttribs={align:this.legend.options.rtl||options.labels.align==="left"?"right":"left",zIndex:options.zIndex},fillOpacity=series.options.marker.fillOpacity,styledMode=this.chart.styledMode;ranges.forEach(function(range,i){if(!styledMode){bubbleAttribs.stroke=pick(range.borderColor,options.borderColor,series.color);bubbleAttribs.fill=pick(range.color,options.color,fillOpacity!==1?color(series.color).setOpacity(fillOpacity).get("rgba"):series.color);connectorAttribs.stroke=pick(range.connectorColor,options.connectorColor,series.color)}ranges[i].radius=this.getRangeRadius(range.value);ranges[i]=merge(ranges[i],{center:ranges[0].radius-ranges[i].radius+baseline});if(!styledMode){merge(true,ranges[i],{bubbleAttribs:merge(bubbleAttribs),connectorAttribs:merge(connectorAttribs),labelAttribs:labelAttribs})}},this)}getRangeRadius(value){const options=this.options,seriesIndex=this.options.seriesIndex,bubbleSeries=this.chart.series[seriesIndex],zMax=options.ranges[0].value,zMin=options.ranges[options.ranges.length-1].value,minSize=options.minSize,maxSize=options.maxSize;return bubbleSeries.getRadius.call(this,zMin,zMax,minSize,maxSize,value)}render(){const legendItem=this.legendItem||{},renderer=this.chart.renderer,zThreshold=this.options.zThreshold;if(!this.symbols){this.symbols={connectors:[],bubbleItems:[],labels:[]}}legendItem.symbol=renderer.g("bubble-legend");legendItem.label=renderer.g("bubble-legend-item").css(this.legend.itemStyle||{});legendItem.symbol.translateX=0;legendItem.symbol.translateY=0;legendItem.symbol.add(legendItem.label);legendItem.label.add(legendItem.group);for(const range of this.ranges){if(range.value>=zThreshold){this.renderRange(range)}}this.hideOverlappingLabels()}renderRange(range){const mainRange=this.ranges[0],legend=this.legend,options=this.options,labelsOptions=options.labels,chart=this.chart,bubbleSeries=chart.series[options.seriesIndex],renderer=chart.renderer,symbols=this.symbols,labels=symbols.labels,elementCenter=range.center,absoluteRadius=Math.abs(range.radius),connectorDistance=options.connectorDistance||0,labelsAlign=labelsOptions.align,rtl=legend.options.rtl,borderWidth=options.borderWidth,connectorWidth=options.connectorWidth,posX=mainRange.radius||0,posY=elementCenter-absoluteRadius-borderWidth/2+connectorWidth/2,crispMovement=(posY%1?1:.5)-(connectorWidth%2?0:.5),styledMode=renderer.styledMode;let connectorLength=rtl||labelsAlign==="left"?-connectorDistance:connectorDistance;if(labelsAlign==="center"){connectorLength=0;options.connectorDistance=0;range.labelAttribs.align="center"}symbols.bubbleItems.push(renderer.circle(posX,elementCenter+crispMovement,absoluteRadius).attr(styledMode?{}:range.bubbleAttribs).addClass((styledMode?"highcharts-color-"+bubbleSeries.colorIndex+" ":"")+"highcharts-bubble-legend-symbol "+(options.className||"")).add(this.legendItem.symbol));symbols.connectors.push(renderer.path(renderer.crispLine([["M",posX,posY],["L",posX+connectorLength,posY]],options.connectorWidth)).attr(styledMode?{}:range.connectorAttribs).addClass((styledMode?"highcharts-color-"+this.options.seriesIndex+" ":"")+"highcharts-bubble-legend-connectors "+(options.connectorClassName||"")).add(this.legendItem.symbol));const label=renderer.text(this.formatLabel(range)).attr(styledMode?{}:range.labelAttribs).css(styledMode?{}:labelsOptions.style).addClass("highcharts-bubble-legend-labels "+(options.labels.className||"")).add(this.legendItem.symbol);const position={x:posX+connectorLength+options.labels.x,y:posY+options.labels.y+label.getBBox().height*.4};label.attr(position);labels.push(label);label.placed=true;label.alignAttr=position}getMaxLabelSize(){const labels=this.symbols.labels;let maxLabel,labelSize;labels.forEach(function(label){labelSize=label.getBBox(true);if(maxLabel){maxLabel=labelSize.width>maxLabel.width?labelSize:maxLabel}else{maxLabel=labelSize}});return maxLabel||{}}formatLabel(range){const options=this.options,formatter=options.labels.formatter,format=options.labels.format;const{numberFormatter}=this.chart;return format?F.format(format,range,this.chart):formatter?formatter.call(range):numberFormatter(range.value,1)}hideOverlappingLabels(){const chart=this.chart,allowOverlap=this.options.labels.allowOverlap,symbols=this.symbols;if(!allowOverlap&&symbols){chart.hideOverlappingLabels(symbols.labels);symbols.labels.forEach(function(label,index){if(!label.newOpacity){symbols.connectors[index].hide()}else if(label.newOpacity!==label.oldOpacity){symbols.connectors[index].show()}})}}getRanges(){const bubbleLegend=this.legend.bubbleLegend,series=bubbleLegend.chart.series,rangesOptions=bubbleLegend.options.ranges;let ranges,zData,minZ=Number.MAX_VALUE,maxZ=-Number.MAX_VALUE;series.forEach(function(s){if(s.isBubble&&!s.ignoreSeries){zData=s.getColumn("z").filter(isNumber);if(zData.length){minZ=pick(s.options.zMin,Math.min(minZ,Math.max(arrayMin(zData),s.options.displayNegative===false?s.options.zThreshold:-Number.MAX_VALUE)));maxZ=pick(s.options.zMax,Math.max(maxZ,arrayMax(zData)))}}});if(minZ===maxZ){ranges=[{value:maxZ}]}else{ranges=[{value:minZ},{value:(minZ+maxZ)/2},{value:maxZ,autoRanges:true}]}if(rangesOptions.length&&rangesOptions[0].radius){ranges.reverse()}ranges.forEach(function(range,i){if(rangesOptions&&rangesOptions[i]){ranges[i]=merge(rangesOptions[i],range)}});return ranges}predictBubbleSizes(){const chart=this.chart,legendOptions=chart.legend.options,floating=legendOptions.floating,horizontal=legendOptions.layout==="horizontal",lastLineHeight=horizontal?chart.legend.lastLineHeight:0,plotSizeX=chart.plotSizeX,plotSizeY=chart.plotSizeY,bubbleSeries=chart.series[this.options.seriesIndex],pxSizes=bubbleSeries.getPxExtremes(),minSize=Math.ceil(pxSizes.minPxSize),maxPxSize=Math.ceil(pxSizes.maxPxSize),plotSize=Math.min(plotSizeY,plotSizeX);let calculatedSize,maxSize=bubbleSeries.options.maxSize;if(floating||!/%$/.test(maxSize)){calculatedSize=maxPxSize}else{maxSize=parseFloat(maxSize);calculatedSize=(plotSize+lastLineHeight)*maxSize/100/(maxSize/100+1);if(horizontal&&plotSizeY-calculatedSize>=plotSizeX||!horizontal&&plotSizeX-calculatedSize>=plotSizeY){calculatedSize=maxPxSize}}return[minSize,Math.ceil(calculatedSize)]}updateRanges(min,max){const bubbleLegendOptions=this.legend.options.bubbleLegend;bubbleLegendOptions.minSize=min;bubbleLegendOptions.maxSize=max;bubbleLegendOptions.ranges=this.getRanges()}correctSizes(){const legend=this.legend,chart=this.chart,bubbleSeries=chart.series[this.options.seriesIndex],pxSizes=bubbleSeries.getPxExtremes(),bubbleSeriesSize=pxSizes.maxPxSize,bubbleLegendSize=this.options.maxSize;if(Math.abs(Math.ceil(bubbleSeriesSize)-bubbleLegendSize)>1){this.updateRanges(this.options.minSize,pxSizes.maxPxSize);legend.render()}}}export default BubbleLegendItem;"";