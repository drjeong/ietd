"use strict";import A from"../../Core/Animation/AnimationUtilities.js";const{animObject}=A;import H from"../../Core/Globals.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{series:Series,seriesTypes:{scatter:ScatterSeries}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{arrayMax,extend,merge,pick}=U;import VectorSeriesDefaults from"./VectorSeriesDefaults.js";class VectorSeries extends ScatterSeries{animate(init){if(init){this.markerGroup.attr({opacity:.01})}else{this.markerGroup.animate({opacity:1},animObject(this.options.animation))}}arrow(point){const fraction=point.length/this.lengthMax,u=fraction*this.options.vectorLength/20,o={start:10*u,center:0,end:-10*u}[this.options.rotationOrigin]||0,path=[["M",0,7*u+o],["L",-1.5*u,7*u+o],["L",0,10*u+o],["L",1.5*u,7*u+o],["L",0,7*u+o],["L",0,-10*u+o]];return path}drawPoints(){const chart=this.chart;for(const point of this.points){const plotX=point.plotX,plotY=point.plotY;if(this.options.clip===false||chart.isInsidePlot(plotX,plotY,{inverted:chart.inverted})){if(!point.graphic){point.graphic=this.chart.renderer.path().add(this.markerGroup).addClass("highcharts-point "+"highcharts-color-"+pick(point.colorIndex,point.series.colorIndex))}point.graphic.attr({d:this.arrow(point),translateX:plotX,translateY:plotY,rotation:point.direction});if(!this.chart.styledMode){point.graphic.attr(this.pointAttribs(point))}}else if(point.graphic){point.graphic=point.graphic.destroy()}}}pointAttribs(point,state){const options=this.options;let stroke=point?.color||this.color,strokeWidth=this.options.lineWidth;if(state){stroke=options.states[state].color||stroke;strokeWidth=(options.states[state].lineWidth||strokeWidth)+(options.states[state].lineWidthPlus||0)}return{stroke:stroke,"stroke-width":strokeWidth}}translate(){Series.prototype.translate.call(this);this.lengthMax=arrayMax(this.getColumn("length"))}}VectorSeries.defaultOptions=merge(ScatterSeries.defaultOptions,VectorSeriesDefaults);extend(VectorSeries.prototype,{drawGraph:H.noop,getSymbol:H.noop,markerAttribs:H.noop,parallelArrays:["x","y","length","direction"],pointArrayMap:["y","length","direction"]});SeriesRegistry.registerSeriesType("vector",VectorSeries);export default VectorSeries;