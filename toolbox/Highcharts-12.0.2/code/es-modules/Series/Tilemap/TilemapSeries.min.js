"use strict";import H from"../../Core/Globals.js";const{composed,noop}=H;import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries,heatmap:HeatmapSeries,scatter:ScatterSeries}=SeriesRegistry.seriesTypes;import TilemapPoint from"./TilemapPoint.js";import TilemapSeriesDefaults from"./TilemapSeriesDefaults.js";import TilemapShapes from"./TilemapShapes.js";import U from"../../Core/Utilities.js";const{addEvent,extend,merge,pushUnique}=U;function onAxisAfterSetAxisTranslation(){if(this.recomputingForTilemap||this.coll==="colorAxis"){return}const axis=this,seriesPadding=axis.series.map(function(series){return series.getSeriesPixelPadding&&series.getSeriesPixelPadding(axis)}).reduce(function(a,b){return(a&&a.padding)>(b&&b.padding)?a:b},void 0)||{padding:0,axisLengthFactor:1},lengthPadding=Math.round(seriesPadding.padding*seriesPadding.axisLengthFactor);if(seriesPadding.padding){axis.len-=lengthPadding;axis.recomputingForTilemap=true;axis.setAxisTranslation();delete axis.recomputingForTilemap;axis.minPixelPadding+=seriesPadding.padding;axis.len+=lengthPadding}}class TilemapSeries extends HeatmapSeries{static compose(AxisClass){if(pushUnique(composed,"TilemapSeries")){addEvent(AxisClass,"afterSetAxisTranslation",onAxisAfterSetAxisTranslation)}}alignDataLabel(){return this.tileShape.alignDataLabel.apply(this,arguments)}drawPoints(){ColumnSeries.prototype.drawPoints.call(this);for(const point of this.points){if(point.graphic){point.graphic[this.chart.styledMode?"css":"animate"](this.colorAttribs(point))}}}getSeriesPixelPadding(axis){const isX=axis.isXAxis,padding=this.tileShape.getSeriesPadding(this);if(!padding){return{padding:0,axisLengthFactor:1}}const coord1=Math.round(axis.translate(isX?padding.xPad*2:padding.yPad,0,1,0,1));const coord2=Math.round(axis.translate(isX?padding.xPad:0,0,1,0,1));return{padding:(axis.single?Math.abs(coord1-coord2)/2:Math.abs(coord1-coord2))||0,axisLengthFactor:isX?2:1.1}}setOptions(){const ret=super.setOptions.apply(this,arguments);this.tileShape=TilemapShapes[ret.tileShape];return ret}translate(){return this.tileShape.translate.apply(this,arguments)}}TilemapSeries.defaultOptions=merge(HeatmapSeries.defaultOptions,TilemapSeriesDefaults);extend(TilemapSeries.prototype,{getSymbol:noop,markerAttribs:ScatterSeries.prototype.markerAttribs,pointAttribs:ColumnSeries.prototype.pointAttribs,pointClass:TilemapPoint});SeriesRegistry.registerSeriesType("tilemap",TilemapSeries);export default TilemapSeries;"";