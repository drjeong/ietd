"use strict";import ScatterSeriesDefaults from"./ScatterSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries,line:LineSeries}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{addEvent,extend,merge}=U;class ScatterSeries extends LineSeries{applyJitter(){const series=this,jitter=this.options.jitter,len=this.points.length;function unrandom(seed){const rand=Math.sin(seed)*1e4;return rand-Math.floor(rand)}if(jitter){this.points.forEach(function(point,i){["x","y"].forEach(function(dim,j){if(jitter[dim]&&!point.isNull){const plotProp=`plot${dim.toUpperCase()}`,axis=series[`${dim}Axis`],translatedJitter=jitter[dim]*axis.transA;if(axis&&!axis.logarithmic){const min=Math.max(0,(point[plotProp]||0)-translatedJitter),max=Math.min(axis.len,(point[plotProp]||0)+translatedJitter);point[plotProp]=min+(max-min)*unrandom(i+j*len);if(dim==="x"){point.clientX=point.plotX}}}})})}}drawGraph(){if(this.options.lineWidth){super.drawGraph()}else if(this.graph){this.graph=this.graph.destroy()}}}ScatterSeries.defaultOptions=merge(LineSeries.defaultOptions,ScatterSeriesDefaults);extend(ScatterSeries.prototype,{drawTracker:ColumnSeries.prototype.drawTracker,sorted:false,requireSorting:false,noSharedTooltip:true,trackerGroups:["group","markerGroup","dataLabelsGroup"]});addEvent(ScatterSeries,"afterTranslate",function(){this.applyJitter()});SeriesRegistry.registerSeriesType("scatter",ScatterSeries);export default ScatterSeries;