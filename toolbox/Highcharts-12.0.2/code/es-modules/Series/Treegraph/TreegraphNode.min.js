"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{seriesTypes:{treemap:{prototype:{NodeClass:TreemapNode}}}}=SeriesRegistry;class TreegraphNode extends TreemapNode{constructor(){super(...arguments);this.mod=0;this.shift=0;this.change=0;this.children=[];this.preX=0;this.hidden=false;this.wasVisited=false;this.collapsed=false}nextLeft(){return this.getLeftMostChild()||this.thread}nextRight(){return this.getRightMostChild()||this.thread}getAncestor(leftIntNode,defaultAncestor){const leftAnc=leftIntNode.ancestor;if(leftAnc.children[0]===this.children[0]){return leftIntNode.ancestor}return defaultAncestor}getLeftMostSibling(){const parent=this.getParent();if(parent){for(const child of parent.children){if(child&&child.point.visible){return child}}}}hasChildren(){const children=this.children;for(let i=0;i<children.length;i++){if(children[i].point.visible){return true}}return false}getLeftSibling(){const parent=this.getParent();if(parent){const children=parent.children;for(let i=this.relativeXPosition-1;i>=0;i--){if(children[i]&&children[i].point.visible){return children[i]}}}}getLeftMostChild(){const children=this.children;for(let i=0;i<children.length;i++){if(children[i].point.visible){return children[i]}}}getRightMostChild(){const children=this.children;for(let i=children.length-1;i>=0;i--){if(children[i].point.visible){return children[i]}}}getParent(){return this.parentNode}getFirstChild(){const children=this.children;for(let i=0;i<children.length;i++){if(children[i].point.visible){return children[i]}}}}export default TreegraphNode;