"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{area:{prototype:{pointClass:AreaPoint,pointClass:{prototype:areaProto}}}}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{defined,isNumber}=U;class AreaRangePoint extends AreaPoint{setState(){const prevState=this.state,series=this.series,isPolar=series.chart.polar;if(!defined(this.plotHigh)){this.plotHigh=series.yAxis.toPixels(this.high,true)}if(!defined(this.plotLow)){this.plotLow=this.plotY=series.yAxis.toPixels(this.low,true)}series.lowerStateMarkerGraphic=series.stateMarkerGraphic;series.stateMarkerGraphic=series.upperStateMarkerGraphic;this.graphic=this.graphics&&this.graphics[1];this.plotY=this.plotHigh;if(isPolar&&isNumber(this.plotHighX)){this.plotX=this.plotHighX}areaProto.setState.apply(this,arguments);this.state=prevState;this.plotY=this.plotLow;this.graphic=this.graphics&&this.graphics[0];if(isPolar&&isNumber(this.plotLowX)){this.plotX=this.plotLowX}series.upperStateMarkerGraphic=series.stateMarkerGraphic;series.stateMarkerGraphic=series.lowerStateMarkerGraphic;series.lowerStateMarkerGraphic=void 0;const originalSettings=series.modifyMarkerSettings();areaProto.setState.apply(this,arguments);series.restoreMarkerSettings(originalSettings)}haloPath(){const isPolar=this.series.chart.polar;let path=[];this.plotY=this.plotLow;if(isPolar&&isNumber(this.plotLowX)){this.plotX=this.plotLowX}if(this.isInside){path=areaProto.haloPath.apply(this,arguments)}this.plotY=this.plotHigh;if(isPolar&&isNumber(this.plotHighX)){this.plotX=this.plotHighX}if(this.isTopInside){path=path.concat(areaProto.haloPath.apply(this,arguments))}return path}isValid(){return isNumber(this.low)&&isNumber(this.high)}}export default AreaRangePoint;