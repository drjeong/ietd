"use strict";import U from"../../Core/Utilities.js";const{defined,getAlignFactor,relativeLength}=U;var SankeyColumnComposition;(function(SankeyColumnComposition){function compose(points,series){const sankeyColumnArray=points;sankeyColumnArray.sankeyColumn=new SankeyColumnAdditions(sankeyColumnArray,series);return sankeyColumnArray}SankeyColumnComposition.compose=compose;class SankeyColumnAdditions{constructor(points,series){this.points=points;this.series=series}getTranslationFactor(series){const column=this.points,nodes=column.slice(),chart=series.chart,minLinkWidth=series.options.minLinkWidth||0;let skipPoint,factor=0,i,remainingHeight=(chart.plotSizeY||0)-(series.options.borderWidth||0)-(column.length-1)*series.nodePadding;while(column.length){factor=remainingHeight/column.sankeyColumn.sum();skipPoint=false;i=column.length;while(i--){if(column[i].getSum()*factor<minLinkWidth){column.splice(i,1);remainingHeight=Math.max(0,remainingHeight-minLinkWidth);skipPoint=true}}if(!skipPoint){break}}column.length=0;for(const node of nodes){column.push(node)}return factor}top(factor){const series=this.series,nodePadding=series.nodePadding,height=this.points.reduce((height,node)=>{if(height>0){height+=nodePadding}const nodeHeight=Math.max(node.getSum()*factor,series.options.minLinkWidth||0);height+=nodeHeight;return height},0);return getAlignFactor(series.options.nodeAlignment||"center")*((series.chart.plotSizeY||0)-height)}left(factor){const series=this.series,chart=series.chart,equalNodes=series.options.equalNodes,maxNodesLength=chart.inverted?chart.plotHeight:chart.plotWidth,nodePadding=series.nodePadding,width=this.points.reduce((width,node)=>{if(width>0){width+=nodePadding}const nodeWidth=equalNodes?maxNodesLength/node.series.nodes.length-nodePadding:Math.max(node.getSum()*factor,series.options.minLinkWidth||0);width+=nodeWidth;return width},0);return((chart.plotSizeX||0)-Math.round(width))/2}sum(){return this.points.reduce((sum,node)=>sum+node.getSum(),0)}offset(node,factor){const column=this.points,series=this.series,nodePadding=series.nodePadding;let offset=0,totalNodeOffset;if(series.is("organization")&&node.hangsFrom){return{absoluteTop:node.hangsFrom.nodeY}}for(let i=0;i<column.length;i++){const sum=column[i].getSum();const height=Math.max(sum*factor,series.options.minLinkWidth||0);const directionOffset=node.options[series.chart.inverted?"offsetHorizontal":"offsetVertical"],optionOffset=node.options.offset||0;if(sum){totalNodeOffset=height+nodePadding}else{totalNodeOffset=0}if(column[i]===node){return{relativeTop:offset+(defined(directionOffset)?relativeLength(directionOffset,height):relativeLength(optionOffset,totalNodeOffset))}}offset+=totalNodeOffset}}}SankeyColumnComposition.SankeyColumnAdditions=SankeyColumnAdditions})(SankeyColumnComposition||(SankeyColumnComposition={}));export default SankeyColumnComposition;