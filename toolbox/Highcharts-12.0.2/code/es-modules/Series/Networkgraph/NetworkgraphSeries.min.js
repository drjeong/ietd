"use strict";import SVGElement from"../../Core/Renderer/SVG/SVGElement.js";import DragNodesComposition from"../DragNodesComposition.js";import GraphLayout from"../GraphLayoutComposition.js";import H from"../../Core/Globals.js";const{noop}=H;import NetworkgraphPoint from"./NetworkgraphPoint.js";import NetworkgraphSeriesDefaults from"./NetworkgraphSeriesDefaults.js";import NodesComposition from"../NodesComposition.js";import ReingoldFruchtermanLayout from"./ReingoldFruchtermanLayout.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{series:Series,seriesTypes:{column:{prototype:columnProto},line:{prototype:lineProto}}}=SeriesRegistry;import D from"../SimulationSeriesUtilities.js";const{initDataLabels,initDataLabelsDefer}=D;import U from"../../Core/Utilities.js";const{addEvent,defined,extend,merge,pick}=U;import TextPath from"../../Extensions/TextPath.js";TextPath.compose(SVGElement);class NetworkgraphSeries extends Series{constructor(){super(...arguments);this.deferDataLabels=true}static compose(ChartClass){DragNodesComposition.compose(ChartClass);ReingoldFruchtermanLayout.compose(ChartClass)}deferLayout(){const layoutOptions=this.options.layoutAlgorithm,chartOptions=this.chart.options.chart;let layout,graphLayoutsStorage=this.chart.graphLayoutsStorage,graphLayoutsLookup=this.chart.graphLayoutsLookup;if(!this.visible){return}if(!graphLayoutsStorage){this.chart.graphLayoutsStorage=graphLayoutsStorage={};this.chart.graphLayoutsLookup=graphLayoutsLookup=[]}layout=graphLayoutsStorage[layoutOptions.type];if(!layout){layoutOptions.enableSimulation=!defined(chartOptions.forExport)?layoutOptions.enableSimulation:!chartOptions.forExport;graphLayoutsStorage[layoutOptions.type]=layout=new GraphLayout.layouts[layoutOptions.type];layout.init(layoutOptions);graphLayoutsLookup.splice(layout.index,0,layout)}this.layout=layout;layout.setArea(0,0,this.chart.plotWidth,this.chart.plotHeight);layout.addElementsToCollection([this],layout.series);layout.addElementsToCollection(this.nodes,layout.nodes);layout.addElementsToCollection(this.points,layout.links)}destroy(){if(this.layout){this.layout.removeElementFromCollection(this,this.layout.series)}NodesComposition.destroy.call(this)}drawDataLabels(){if(this.deferDataLabels){return}const dlOptions=this.options.dataLabels;let textPath;if(dlOptions?.textPath){textPath=dlOptions.textPath}Series.prototype.drawDataLabels.call(this,this.nodes);if(dlOptions?.linkTextPath){dlOptions.textPath=dlOptions.linkTextPath}Series.prototype.drawDataLabels.call(this,this.data);if(dlOptions?.textPath){dlOptions.textPath=textPath}}generatePoints(){let node,i;NodesComposition.generatePoints.apply(this,arguments);if(this.options.nodes){this.options.nodes.forEach(function(nodeOptions){if(!this.nodeLookup[nodeOptions.id]){this.nodeLookup[nodeOptions.id]=this.createNode(nodeOptions.id)}},this)}for(i=this.nodes.length-1;i>=0;i--){node=this.nodes[i];node.degree=node.getDegree();node.radius=pick(node.marker&&node.marker.radius,this.options.marker&&this.options.marker.radius,0);node.key=node.name;if(!this.nodeLookup[node.id]){node.remove()}}this.data.forEach(function(link){link.formatPrefix="link"});this.indexateNodes()}getPointsCollection(){return this.nodes||[]}indexateNodes(){this.nodes.forEach(function(node,index){node.index=index})}init(chart,options){super.init(chart,options);initDataLabelsDefer.call(this);addEvent(this,"updatedData",()=>{if(this.layout){this.layout.stop()}});addEvent(this,"afterUpdate",()=>{this.nodes.forEach(node=>{if(node&&node.series){node.resolveColor()}})});addEvent(this,"afterSimulation",function(){this.deferDataLabels=false;this.drawDataLabels()});return this}markerAttribs(point,state){const attribs=Series.prototype.markerAttribs.call(this,point,state);if(!defined(point.plotY)){attribs.y=0}attribs.x=(point.plotX||0)-(attribs.width||0)/2;return attribs}pointAttribs(point,state){const pointState=state||point&&point.state||"normal",stateOptions=this.options.states[pointState];let attribs=Series.prototype.pointAttribs.call(this,point,pointState);if(point&&!point.isNode){attribs=point.getLinkAttributes();if(stateOptions){attribs={stroke:stateOptions.linkColor||attribs.stroke,dashstyle:stateOptions.linkDashStyle||attribs.dashstyle,opacity:pick(stateOptions.linkOpacity,attribs.opacity),"stroke-width":stateOptions.linkColor||attribs["stroke-width"]}}}return attribs}render(){const series=this,points=series.points,hoverPoint=series.chart.hoverPoint,dataLabels=[];series.points=series.nodes;lineProto.render.call(this);series.points=points;points.forEach(function(point){if(point.fromNode&&point.toNode){point.renderLink();point.redrawLink()}});if(hoverPoint&&hoverPoint.series===series){series.redrawHalo(hoverPoint)}if(series.chart.hasRendered&&!series.options.dataLabels.allowOverlap){series.nodes.concat(series.points).forEach(function(node){if(node.dataLabel){dataLabels.push(node.dataLabel)}});series.chart.hideOverlappingLabels(dataLabels)}}setState(state,inherit){if(inherit){this.points=this.nodes.concat(this.data);Series.prototype.setState.apply(this,arguments);this.points=this.data}else{Series.prototype.setState.apply(this,arguments)}if(!this.layout.simulation&&!state){this.render()}}translate(){this.generatePoints();this.deferLayout();this.nodes.forEach(function(node){node.isInside=true;node.linksFrom.forEach(function(point){point.shapeType="path";point.y=1})})}}NetworkgraphSeries.defaultOptions=merge(Series.defaultOptions,NetworkgraphSeriesDefaults);extend(NetworkgraphSeries.prototype,{pointClass:NetworkgraphPoint,animate:void 0,directTouch:true,drawGraph:void 0,forces:["barycenter","repulsive","attractive"],hasDraggableNodes:true,isCartesian:false,noSharedTooltip:true,pointArrayMap:["from","to"],requireSorting:false,trackerGroups:["group","markerGroup","dataLabelsGroup"],initDataLabels:initDataLabels,buildKDTree:noop,createNode:NodesComposition.createNode,drawTracker:columnProto.drawTracker,onMouseDown:DragNodesComposition.onMouseDown,onMouseMove:DragNodesComposition.onMouseMove,onMouseUp:DragNodesComposition.onMouseUp,redrawHalo:DragNodesComposition.redrawHalo});SeriesRegistry.registerSeriesType("networkgraph",NetworkgraphSeries);export default NetworkgraphSeries;"";