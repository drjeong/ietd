"use strict";import Axis from"../Core/Axis/Axis.js";import Point from"../Core/Series/Point.js";const{tooltipFormatter:pointTooltipFormatter}=Point.prototype;import Series from"../Core/Series/Series.js";import U from"../Core/Utilities.js";const{addEvent,arrayMax,arrayMin,correctFloat,defined,isArray,isNumber,isString,pick}=U;var DataModifyComposition;(function(DataModifyComposition){function compose(SeriesClass,AxisClass,PointClass){const axisProto=AxisClass.prototype,pointProto=PointClass.prototype,seriesProto=SeriesClass.prototype;if(!seriesProto.setCompare){seriesProto.setCompare=seriesSetCompare;seriesProto.setCumulative=seriesSetCumulative;addEvent(SeriesClass,"afterInit",afterInit);addEvent(SeriesClass,"afterGetExtremes",afterGetExtremes);addEvent(SeriesClass,"afterProcessData",afterProcessData)}if(!axisProto.setCompare){axisProto.setCompare=axisSetCompare;axisProto.setModifier=setModifier;axisProto.setCumulative=axisSetCumulative;pointProto.tooltipFormatter=tooltipFormatter}return SeriesClass}DataModifyComposition.compose=compose;function setModifier(mode,modeState,redraw){if(!this.isXAxis){this.series.forEach(function(series){if(mode==="compare"&&typeof modeState!=="boolean"){series.setCompare(modeState,false)}else if(mode==="cumulative"&&!isString(modeState)){series.setCumulative(modeState,false)}});if(pick(redraw,true)){this.chart.redraw()}}}function tooltipFormatter(pointFormat){const point=this,{numberFormatter}=point.series.chart,replace=function(value){pointFormat=pointFormat.replace("{point."+value+"}",(point[value]>0&&value==="change"?"+":"")+numberFormatter(point[value],pick(point.series.tooltipOptions.changeDecimals,2)))};if(defined(point.change)){replace("change")}if(defined(point.cumulativeSum)){replace("cumulativeSum")}return pointTooltipFormatter.apply(this,[pointFormat])}function afterInit(){const compare=this.options.compare;let dataModify;if(compare==="percent"||compare==="value"||this.options.cumulative){dataModify=new Additions(this);if(compare==="percent"||compare==="value"){dataModify.initCompare(compare)}else{dataModify.initCumulative()}}this.dataModify=dataModify}function afterGetExtremes(e){const dataExtremes=e.dataExtremes,activeYData=dataExtremes.activeYData;if(this.dataModify&&dataExtremes){let extremes;if(this.options.compare){extremes=[this.dataModify.modifyValue(dataExtremes.dataMin),this.dataModify.modifyValue(dataExtremes.dataMax)]}else if(this.options.cumulative&&isArray(activeYData)&&activeYData.length>=2){extremes=Additions.getCumulativeExtremes(activeYData)}if(extremes){dataExtremes.dataMin=arrayMin(extremes);dataExtremes.dataMax=arrayMax(extremes)}}}function seriesSetCompare(compare,redraw){this.options.compare=this.userOptions.compare=compare;this.update({},pick(redraw,true));if(this.dataModify&&(compare==="value"||compare==="percent")){this.dataModify.initCompare(compare)}else{this.points.forEach(point=>{delete point.change})}}function afterProcessData(){const series=this,compareColumn=this.getColumn(series.pointArrayMap&&(series.options.pointValKey||series.pointValKey)||"y",true);if(series.xAxis&&compareColumn.length&&series.dataModify){const processedXData=series.getColumn("x",true),length=series.dataTable.rowCount,compareStart=series.options.compareStart===true?0:1;for(let i=0;i<length-compareStart;i++){const compareValue=compareColumn[i];if(isNumber(compareValue)&&compareValue!==0&&processedXData[i+compareStart]>=(series.xAxis.min||0)){series.dataModify.compareValue=compareValue;break}}}}function axisSetCompare(compare,redraw){this.setModifier("compare",compare,redraw)}function seriesSetCumulative(cumulative,redraw){cumulative=pick(cumulative,false);this.options.cumulative=this.userOptions.cumulative=cumulative;this.update({},pick(redraw,true));if(this.dataModify){this.dataModify.initCumulative()}else{this.points.forEach(point=>{delete point.cumulativeSum})}}function axisSetCumulative(cumulative,redraw){this.setModifier("cumulative",cumulative,redraw)}class Additions{constructor(series){this.series=series}modifyValue(){return 0}static getCumulativeExtremes(activeYData){let cumulativeDataMin=Infinity,cumulativeDataMax=-Infinity;activeYData.reduce((prev,cur)=>{const sum=prev+cur;cumulativeDataMin=Math.min(cumulativeDataMin,sum,prev);cumulativeDataMax=Math.max(cumulativeDataMax,sum,prev);return sum});return[cumulativeDataMin,cumulativeDataMax]}initCompare(compare){this.modifyValue=function(value,index){if(value===null){value=0}const compareValue=this.compareValue;if(typeof value!=="undefined"&&typeof compareValue!=="undefined"){if(compare==="value"){value-=compareValue}else{const compareBase=this.series.options.compareBase;value=100*(value/compareValue)-(compareBase===100?0:100)}if(typeof index!=="undefined"){const point=this.series.points[index];if(point){point.change=value}}return value}return 0}}initCumulative(){this.modifyValue=function(value,index){if(value===null){value=0}if(value!==void 0&&index!==void 0){const prevPoint=index>0?this.series.points[index-1]:null;if(prevPoint&&prevPoint.cumulativeSum){value=correctFloat(prevPoint.cumulativeSum+value)}const point=this.series.points[index];const cumulativeStart=point.series.options.cumulativeStart,withinRange=point.x<=this.series.xAxis.max&&point.x>=this.series.xAxis.min;if(point){if(!cumulativeStart||withinRange){point.cumulativeSum=value}else{point.cumulativeSum=void 0}}return value}return 0}}}DataModifyComposition.Additions=Additions})(DataModifyComposition||(DataModifyComposition={}));export default DataModifyComposition;"";