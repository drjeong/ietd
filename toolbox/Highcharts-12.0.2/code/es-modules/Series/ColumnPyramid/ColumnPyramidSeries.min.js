"use strict";import ColumnPyramidSeriesDefaults from"./ColumnPyramidSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{clamp,merge,pick}=U;class ColumnPyramidSeries extends ColumnSeries{translate(){const series=this,chart=series.chart,options=series.options,dense=series.dense=series.closestPointRange*series.xAxis.transA<2,borderWidth=series.borderWidth=pick(options.borderWidth,dense?0:1),yAxis=series.yAxis,threshold=options.threshold,minPointLength=pick(options.minPointLength,5),metrics=series.getColumnMetrics(),pointWidth=metrics.width,pointXOffset=series.pointXOffset=metrics.offset;let translatedThreshold=series.translatedThreshold=yAxis.getThreshold(threshold),seriesBarW=series.barW=Math.max(pointWidth,1+2*borderWidth);if(chart.inverted){translatedThreshold-=.5}if(options.pointPadding){seriesBarW=Math.ceil(seriesBarW)}super.translate();for(const point of series.points){const yBottom=pick(point.yBottom,translatedThreshold),safeDistance=999+Math.abs(yBottom),plotY=clamp(point.plotY,-safeDistance,yAxis.len+safeDistance),barW=seriesBarW/2,barY=Math.min(plotY,yBottom),barH=Math.max(plotY,yBottom)-barY;let barX=point.plotX+pointXOffset,stackTotal,stackHeight,topXwidth,bottomXwidth,invBarPos,x1,x2,x3,x4,y1,y2;if(options.centerInCategory){barX=series.adjustForMissingColumns(barX,pointWidth,point,metrics)}point.barX=barX;point.pointWidth=pointWidth;point.tooltipPos=chart.inverted?[yAxis.len+yAxis.pos-chart.plotLeft-plotY,series.xAxis.len-barX-barW,barH]:[barX+barW,plotY+yAxis.pos-chart.plotTop,barH];stackTotal=threshold+(point.total||point.y);if(options.stacking==="percent"){stackTotal=threshold+(point.y<0)?-100:100}const topPointY=yAxis.toPixels(stackTotal,true);stackHeight=chart.plotHeight-topPointY-(chart.plotHeight-translatedThreshold);topXwidth=stackHeight?barW*(barY-topPointY)/stackHeight:0;bottomXwidth=stackHeight?barW*(barY+barH-topPointY)/stackHeight:0;x1=barX-topXwidth+barW;x2=barX+topXwidth+barW;x3=barX+bottomXwidth+barW;x4=barX-bottomXwidth+barW;y1=barY-minPointLength;y2=barY+barH;if(point.y<0){y1=barY;y2=barY+barH+minPointLength}if(chart.inverted){invBarPos=yAxis.width-barY;stackHeight=topPointY-(yAxis.width-translatedThreshold);topXwidth=barW*(topPointY-invBarPos)/stackHeight;bottomXwidth=barW*(topPointY-(invBarPos-barH))/stackHeight;x1=barX+barW+topXwidth;x2=x1-2*topXwidth;x3=barX-bottomXwidth+barW;x4=barX+bottomXwidth+barW;y1=barY;y2=barY+barH-minPointLength;if(point.y<0){y2=barY+barH+minPointLength}}point.shapeType="path";point.shapeArgs={x:x1,y:y1,width:x2-x1,height:barH,d:[["M",x1,y1],["L",x2,y1],["L",x3,y2],["L",x4,y2],["Z"]]}}}}ColumnPyramidSeries.defaultOptions=merge(ColumnSeries.defaultOptions,ColumnPyramidSeriesDefaults);SeriesRegistry.registerSeriesType("columnpyramid",ColumnPyramidSeries);export default ColumnPyramidSeries;