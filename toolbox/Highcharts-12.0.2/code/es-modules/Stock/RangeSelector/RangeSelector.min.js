"use strict";import Axis from"../../Core/Axis/Axis.js";import D from"../../Core/Defaults.js";const{defaultOptions}=D;import H from"../../Core/Globals.js";import RangeSelectorComposition from"./RangeSelectorComposition.js";import SVGElement from"../../Core/Renderer/SVG/SVGElement.js";import U from"../../Core/Utilities.js";import OrdinalAxis from"../../Core/Axis/OrdinalAxis.js";const{addEvent,createElement,css,defined,destroyObjectProperties,diffObjects,discardElement,extend,fireEvent,isNumber,isString,merge,objectEach,pick,splat}=U;function preferredInputType(format){const ms=isString(format)?format.indexOf("%L")!==-1:format.fractionalSecondDigits;if(ms){return"text"}const date=isString(format)?["a","A","d","e","w","b","B","m","o","y","Y"].some(char=>format.indexOf("%"+char)!==-1):format.dateStyle||format.day||format.month||format.year;const time=isString(format)?["H","k","I","l","M","S"].some(char=>format.indexOf("%"+char)!==-1):format.timeStyle||format.hour||format.minute||format.second;if(date&&time){return"datetime-local"}if(date){return"date"}if(time){return"time"}return"text"}class RangeSelector{static compose(AxisClass,ChartClass){RangeSelectorComposition.compose(AxisClass,ChartClass,RangeSelector)}constructor(chart){this.isDirty=false;this.buttonOptions=RangeSelector.prototype.defaultButtons;this.initialButtonGroupWidth=0;this.init(chart)}clickButton(i,redraw){const rangeSelector=this,chart=rangeSelector.chart,rangeOptions=rangeSelector.buttonOptions[i],baseAxis=chart.xAxis[0],unionExtremes=chart.scroller&&chart.scroller.getUnionExtremes()||baseAxis||{},type=rangeOptions.type,dataGrouping=rangeOptions.dataGrouping;let dataMin=unionExtremes.dataMin,dataMax=unionExtremes.dataMax,newMin,newMax=isNumber(baseAxis?.max)?Math.round(Math.min(baseAxis.max,dataMax??baseAxis.max)):void 0,baseXAxisOptions,range=rangeOptions._range,rangeMin,ctx,ytdExtremes,addOffsetMin=true;if(dataMin===null||dataMax===null){return}rangeSelector.setSelected(i);if(dataGrouping){this.forcedDataGrouping=true;Axis.prototype.setDataGrouping.call(baseAxis||{chart:this.chart},dataGrouping,false);this.frozenStates=rangeOptions.preserveDataGrouping}if(type==="month"||type==="year"){if(!baseAxis){range=rangeOptions}else{ctx={range:rangeOptions,max:newMax,chart:chart,dataMin:dataMin,dataMax:dataMax};newMin=baseAxis.minFromRange.call(ctx);if(isNumber(ctx.newMax)){newMax=ctx.newMax}addOffsetMin=false}}else if(range){if(isNumber(newMax)){newMin=Math.max(newMax-range,dataMin);newMax=Math.min(newMin+range,dataMax);addOffsetMin=false}}else if(type==="ytd"){if(baseAxis){if(baseAxis.hasData()&&(!isNumber(dataMax)||!isNumber(dataMin))){dataMin=Number.MAX_VALUE;dataMax=-Number.MAX_VALUE;chart.series.forEach(series=>{const xData=series.getColumn("x");if(xData.length){dataMin=Math.min(xData[0],dataMin);dataMax=Math.max(xData[xData.length-1],dataMax)}});redraw=false}if(isNumber(dataMax)&&isNumber(dataMin)){ytdExtremes=rangeSelector.getYTDExtremes(dataMax,dataMin);newMin=rangeMin=ytdExtremes.min;newMax=ytdExtremes.max}}else{rangeSelector.deferredYTDClick=i;return}}else if(type==="all"&&baseAxis){if(chart.navigator&&chart.navigator.baseSeries[0]){chart.navigator.baseSeries[0].xAxis.options.range=void 0}newMin=dataMin;newMax=dataMax}if(addOffsetMin&&rangeOptions._offsetMin&&defined(newMin)){newMin+=rangeOptions._offsetMin}if(rangeOptions._offsetMax&&defined(newMax)){newMax+=rangeOptions._offsetMax}if(this.dropdown){this.dropdown.selectedIndex=i+1}if(!baseAxis){baseXAxisOptions=splat(chart.options.xAxis||{})[0];const axisRangeUpdateEvent=addEvent(chart,"afterCreateAxes",function(){const xAxis=chart.xAxis[0];xAxis.range=xAxis.options.range=range;xAxis.min=xAxis.options.min=rangeMin});addEvent(chart,"load",function resetMinAndRange(){const xAxis=chart.xAxis[0];chart.setFixedRange(rangeOptions._range);xAxis.options.range=baseXAxisOptions.range;xAxis.options.min=baseXAxisOptions.min;axisRangeUpdateEvent()})}else if(isNumber(newMin)&&isNumber(newMax)){baseAxis.setExtremes(newMin,newMax,pick(redraw,true),void 0,{trigger:"rangeSelectorButton",rangeSelectorButton:rangeOptions});chart.setFixedRange(rangeOptions._range)}fireEvent(this,"afterBtnClick")}setSelected(selected){this.selected=this.options.selected=selected}init(chart){const rangeSelector=this,options=chart.options.rangeSelector,buttonOptions=options.buttons,selectedOption=options.selected,blurInputs=function(){const minInput=rangeSelector.minInput,maxInput=rangeSelector.maxInput;if(minInput&&!!minInput.blur){fireEvent(minInput,"blur")}if(maxInput&&!!maxInput.blur){fireEvent(maxInput,"blur")}};rangeSelector.chart=chart;rangeSelector.options=options;rangeSelector.buttons=[];rangeSelector.buttonOptions=buttonOptions;this.eventsToUnbind=[];this.eventsToUnbind.push(addEvent(chart.container,"mousedown",blurInputs));this.eventsToUnbind.push(addEvent(chart,"resize",blurInputs));buttonOptions.forEach(rangeSelector.computeButtonRange);if(typeof selectedOption!=="undefined"&&buttonOptions[selectedOption]){this.clickButton(selectedOption,false)}this.eventsToUnbind.push(addEvent(chart,"load",function(){if(chart.xAxis&&chart.xAxis[0]){addEvent(chart.xAxis[0],"setExtremes",function(e){if(isNumber(this.max)&&isNumber(this.min)&&this.max-this.min!==chart.fixedRange&&e.trigger!=="rangeSelectorButton"&&e.trigger!=="updatedData"&&rangeSelector.forcedDataGrouping&&!rangeSelector.frozenStates){this.setDataGrouping(false,false)}})}}));this.createElements()}updateButtonStates(){const rangeSelector=this,chart=this.chart,dropdown=this.dropdown,dropdownLabel=this.dropdownLabel,baseAxis=chart.xAxis[0],actualRange=Math.round(baseAxis.max-baseAxis.min),hasNoData=!baseAxis.hasVisibleSeries,day=24*36e5,unionExtremes=chart.scroller&&chart.scroller.getUnionExtremes()||baseAxis,dataMin=unionExtremes.dataMin,dataMax=unionExtremes.dataMax,ytdExtremes=rangeSelector.getYTDExtremes(dataMax,dataMin),ytdMin=ytdExtremes.min,ytdMax=ytdExtremes.max,selected=rangeSelector.selected,allButtonsEnabled=rangeSelector.options.allButtonsEnabled,buttonStates=new Array(rangeSelector.buttonOptions.length).fill(0),selectedExists=isNumber(selected),buttons=rangeSelector.buttons;let isSelectedTooGreat=false,selectedIndex=null;rangeSelector.buttonOptions.forEach((rangeOptions,i)=>{const range=rangeOptions._range,type=rangeOptions.type,count=rangeOptions.count||1,offsetRange=rangeOptions._offsetMax-rangeOptions._offsetMin,isSelected=i===selected,isTooGreatRange=range>dataMax-dataMin,isTooSmallRange=range<baseAxis.minRange;let isYTDButNotSelected=false,isSameRange=range===actualRange;if(isSelected&&isTooGreatRange){isSelectedTooGreat=true}if(baseAxis.isOrdinal&&baseAxis.ordinal?.positions&&range&&actualRange<range){const positions=baseAxis.ordinal.positions,prevOrdinalPosition=OrdinalAxis.Additions.findIndexOf(positions,baseAxis.min,true),nextOrdinalPosition=Math.min(OrdinalAxis.Additions.findIndexOf(positions,baseAxis.max,true)+1,positions.length-1);if(positions[nextOrdinalPosition]-positions[prevOrdinalPosition]>range){isSameRange=true}}else if((type==="month"||type==="year")&&actualRange+36e5>={month:28,year:365}[type]*day*count-offsetRange&&actualRange-36e5<={month:31,year:366}[type]*day*count+offsetRange){isSameRange=true}else if(type==="ytd"){isSameRange=ytdMax-ytdMin+offsetRange===actualRange;isYTDButNotSelected=!isSelected}else if(type==="all"){isSameRange=baseAxis.max-baseAxis.min>=dataMax-dataMin}const disable=!allButtonsEnabled&&!(isSelectedTooGreat&&type==="all")&&(isTooGreatRange||isTooSmallRange||hasNoData);const select=isSelectedTooGreat&&type==="all"||(isYTDButNotSelected?false:isSameRange)||isSelected&&rangeSelector.frozenStates;if(disable){buttonStates[i]=3}else if(select){if(!selectedExists||i===selected){selectedIndex=i}}});if(selectedIndex!==null){buttonStates[selectedIndex]=2;rangeSelector.setSelected(selectedIndex)}else{rangeSelector.setSelected();if(dropdownLabel){dropdownLabel.setState(0);dropdownLabel.attr({text:(defaultOptions.lang.rangeSelectorZoom||"")+" ▾"})}}for(let i=0;i<buttonStates.length;i++){const state=buttonStates[i];const button=buttons[i];if(button.state!==state){button.setState(state);if(dropdown){dropdown.options[i+1].disabled=state===3;if(state===2){if(dropdownLabel){dropdownLabel.setState(2);dropdownLabel.attr({text:rangeSelector.buttonOptions[i].text+" ▾"})}dropdown.selectedIndex=i+1}const bbox=dropdownLabel.getBBox();css(dropdown,{width:`${bbox.width}px`,height:`${bbox.height}px`})}}}}computeButtonRange(rangeOptions){const type=rangeOptions.type,count=rangeOptions.count||1,fixedTimes={millisecond:1,second:1e3,minute:60*1e3,hour:3600*1e3,day:24*3600*1e3,week:7*24*3600*1e3};if(fixedTimes[type]){rangeOptions._range=fixedTimes[type]*count}else if(type==="month"||type==="year"){rangeOptions._range={month:30,year:365}[type]*24*36e5*count}rangeOptions._offsetMin=pick(rangeOptions.offsetMin,0);rangeOptions._offsetMax=pick(rangeOptions.offsetMax,0);rangeOptions._range+=rangeOptions._offsetMax-rangeOptions._offsetMin}getInputValue(name){const input=name==="min"?this.minInput:this.maxInput;const options=this.chart.options.rangeSelector;const time=this.chart.time;if(input){return(input.type==="text"&&options.inputDateParser||this.defaultInputDateParser)(input.value,time.timezone==="UTC",time)}return 0}setInputValue(name,inputTime){const options=this.options,time=this.chart.time,input=name==="min"?this.minInput:this.maxInput,dateBox=name==="min"?this.minDateBox:this.maxDateBox;if(input){input.setAttribute("type",preferredInputType(options.inputDateFormat||"%e %b %Y"));const hcTimeAttr=input.getAttribute("data-hc-time");let updatedTime=defined(hcTimeAttr)?Number(hcTimeAttr):void 0;if(defined(inputTime)){const previousTime=updatedTime;if(defined(previousTime)){input.setAttribute("data-hc-time-previous",previousTime)}input.setAttribute("data-hc-time",inputTime);updatedTime=inputTime}input.value=time.dateFormat(this.inputTypeFormats[input.type]||options.inputEditDateFormat,updatedTime);if(dateBox){dateBox.attr({text:time.dateFormat(options.inputDateFormat,updatedTime)})}}}setInputExtremes(name,min,max){const input=name==="min"?this.minInput:this.maxInput;if(input){const format=this.inputTypeFormats[input.type];const time=this.chart.time;if(format){const newMin=time.dateFormat(format,min);if(input.min!==newMin){input.min=newMin}const newMax=time.dateFormat(format,max);if(input.max!==newMax){input.max=newMax}}}}showInput(name){const dateBox=name==="min"?this.minDateBox:this.maxDateBox,input=name==="min"?this.minInput:this.maxInput;if(input&&dateBox&&this.inputGroup){const isTextInput=input.type==="text",{translateX=0,translateY=0}=this.inputGroup,{x=0,width=0,height=0}=dateBox,{inputBoxWidth}=this.options;css(input,{width:isTextInput?width+(inputBoxWidth?-2:20)+"px":"auto",height:height-2+"px",border:"2px solid silver"});if(isTextInput&&inputBoxWidth){css(input,{left:translateX+x+"px",top:translateY+"px"})}else{css(input,{left:Math.min(Math.round(x+translateX-(input.offsetWidth-width)/2),this.chart.chartWidth-input.offsetWidth)+"px",top:translateY-(input.offsetHeight-height)/2+"px"})}}}hideInput(name){const input=name==="min"?this.minInput:this.maxInput;if(input){css(input,{top:"-9999em",border:0,width:"1px",height:"1px"})}}defaultInputDateParser(inputDate,useUTC,time){return time?.parse(inputDate)||0}drawInput(name){const{chart,div,inputGroup}=this;const rangeSelector=this,chartStyle=chart.renderer.style||{},renderer=chart.renderer,options=chart.options.rangeSelector,lang=defaultOptions.lang,isMin=name==="min";function updateExtremes(name){const{maxInput,minInput}=rangeSelector,chartAxis=chart.xAxis[0],unionExtremes=chart.scroller?.getUnionExtremes()||chartAxis,dataMin=unionExtremes.dataMin,dataMax=unionExtremes.dataMax,currentExtreme=chart.xAxis[0].getExtremes()[name];let value=rangeSelector.getInputValue(name);if(isNumber(value)&&value!==currentExtreme){if(isMin&&maxInput&&isNumber(dataMin)){if(value>Number(maxInput.getAttribute("data-hc-time"))){value=void 0}else if(value<dataMin){value=dataMin}}else if(minInput&&isNumber(dataMax)){if(value<Number(minInput.getAttribute("data-hc-time"))){value=void 0}else if(value>dataMax){value=dataMax}}if(typeof value!=="undefined"){chartAxis.setExtremes(isMin?value:chartAxis.min,isMin?chartAxis.max:value,void 0,void 0,{trigger:"rangeSelectorInput"})}}}const text=lang[isMin?"rangeSelectorFrom":"rangeSelectorTo"]||"";const label=renderer.label(text,0).addClass("highcharts-range-label").attr({padding:text?2:0,height:text?options.inputBoxHeight:0}).add(inputGroup);const dateBox=renderer.label("",0).addClass("highcharts-range-input").attr({padding:2,width:options.inputBoxWidth,height:options.inputBoxHeight,"text-align":"center"}).on("click",function(){rangeSelector.showInput(name);rangeSelector[name+"Input"].focus()});if(!chart.styledMode){dateBox.attr({stroke:options.inputBoxBorderColor,"stroke-width":1})}dateBox.add(inputGroup);const input=createElement("input",{name:name,className:"highcharts-range-selector"},void 0,div);input.setAttribute("type",preferredInputType(options.inputDateFormat||"%e %b %Y"));if(!chart.styledMode){label.css(merge(chartStyle,options.labelStyle));dateBox.css(merge({color:"#333333"},chartStyle,options.inputStyle));css(input,extend({position:"absolute",border:0,boxShadow:"0 0 15px rgba(0,0,0,0.3)",width:"1px",height:"1px",padding:0,textAlign:"center",fontSize:chartStyle.fontSize,fontFamily:chartStyle.fontFamily,top:"-9999em"},options.inputStyle))}input.onfocus=()=>{rangeSelector.showInput(name)};input.onblur=()=>{if(input===H.doc.activeElement){updateExtremes(name)}rangeSelector.hideInput(name);rangeSelector.setInputValue(name);input.blur()};let keyDown=false;input.onchange=()=>{if(!keyDown){updateExtremes(name);rangeSelector.hideInput(name);input.blur()}};input.onkeypress=event=>{if(event.keyCode===13){updateExtremes(name)}};input.onkeydown=event=>{keyDown=true;if(event.key==="ArrowUp"||event.key==="ArrowDown"||event.key==="Tab"){updateExtremes(name)}};input.onkeyup=()=>{keyDown=false};return{dateBox:dateBox,input:input,label:label}}getPosition(){const chart=this.chart,options=chart.options.rangeSelector,top=options.verticalAlign==="top"?chart.plotTop-chart.axisOffset[0]:0;return{buttonTop:top+options.buttonPosition.y,inputTop:top+options.inputPosition.y-10}}getYTDExtremes(dataMax,dataMin){const time=this.chart.time,year=time.toParts(dataMax)[0],startOfYear=time.makeTime(year,0);return{max:dataMax,min:Math.max(dataMin,startOfYear)}}createElements(){const chart=this.chart,renderer=chart.renderer,container=chart.container,chartOptions=chart.options,options=chartOptions.rangeSelector,inputEnabled=options.inputEnabled,inputsZIndex=pick(chartOptions.chart.style?.zIndex,0)+1;if(options.enabled===false){return}this.group=renderer.g("range-selector-group").attr({zIndex:7}).add();this.div=createElement("div",void 0,{position:"relative",height:0,zIndex:inputsZIndex});if(this.buttonOptions.length){this.renderButtons()}if(container.parentNode){container.parentNode.insertBefore(this.div,container)}if(inputEnabled){this.createInputs()}}createInputs(){this.inputGroup=this.chart.renderer.g("input-group").add(this.group);const minElems=this.drawInput("min");this.minDateBox=minElems.dateBox;this.minLabel=minElems.label;this.minInput=minElems.input;const maxElems=this.drawInput("max");this.maxDateBox=maxElems.dateBox;this.maxLabel=maxElems.label;this.maxInput=maxElems.input}render(min,max){if(this.options.enabled===false){return}const chart=this.chart,chartOptions=chart.options,options=chartOptions.rangeSelector,inputEnabled=options.inputEnabled;if(inputEnabled){if(!this.inputGroup){this.createInputs()}this.setInputValue("min",min);this.setInputValue("max",max);if(!this.chart.styledMode){this.maxLabel?.css(options.labelStyle);this.minLabel?.css(options.labelStyle)}const unionExtremes=chart.scroller&&chart.scroller.getUnionExtremes()||chart.xAxis[0]||{};if(defined(unionExtremes.dataMin)&&defined(unionExtremes.dataMax)){const minRange=chart.xAxis[0].minRange||0;this.setInputExtremes("min",unionExtremes.dataMin,Math.min(unionExtremes.dataMax,this.getInputValue("max"))-minRange);this.setInputExtremes("max",Math.max(unionExtremes.dataMin,this.getInputValue("min"))+minRange,unionExtremes.dataMax)}if(this.inputGroup){let x=0;[this.minLabel,this.minDateBox,this.maxLabel,this.maxDateBox].forEach(label=>{if(label){const{width}=label.getBBox();if(width){label.attr({x:x});x+=width+options.inputSpacing}}})}}else{if(this.inputGroup){this.inputGroup.destroy();delete this.inputGroup}}if(!this.chart.styledMode){if(this.zoomText){this.zoomText.css(options.labelStyle)}}this.alignElements();this.updateButtonStates()}renderButtons(){var _a;const{chart,options}=this;const lang=defaultOptions.lang;const renderer=chart.renderer;const buttonTheme=merge(options.buttonTheme);const states=buttonTheme&&buttonTheme.states;delete buttonTheme.width;delete buttonTheme.states;this.buttonGroup=renderer.g("range-selector-buttons").add(this.group);const dropdown=this.dropdown=createElement("select",void 0,{position:"absolute",padding:0,border:0,cursor:"pointer",opacity:1e-4},this.div);const userButtonTheme=chart.userOptions.rangeSelector?.buttonTheme;this.dropdownLabel=renderer.button("",0,0,()=>{},merge(buttonTheme,{"stroke-width":pick(buttonTheme["stroke-width"],0),width:"auto",paddingLeft:pick(options.buttonTheme.paddingLeft,userButtonTheme?.padding,8),paddingRight:pick(options.buttonTheme.paddingRight,userButtonTheme?.padding,8)}),states&&states.hover,states&&states.select,states&&states.disabled).hide().add(this.group);addEvent(dropdown,"touchstart",()=>{dropdown.style.fontSize="16px"});const mouseOver=H.isMS?"mouseover":"mouseenter",mouseOut=H.isMS?"mouseout":"mouseleave";addEvent(dropdown,mouseOver,()=>{fireEvent(this.dropdownLabel.element,mouseOver)});addEvent(dropdown,mouseOut,()=>{fireEvent(this.dropdownLabel.element,mouseOut)});addEvent(dropdown,"change",()=>{const button=this.buttons[dropdown.selectedIndex-1];fireEvent(button.element,"click")});this.zoomText=renderer.label(lang.rangeSelectorZoom||"",0).attr({padding:options.buttonTheme.padding,height:options.buttonTheme.height,paddingLeft:0,paddingRight:0}).add(this.buttonGroup);if(!this.chart.styledMode){this.zoomText.css(options.labelStyle);(_a=options.buttonTheme)["stroke-width"]??(_a["stroke-width"]=0)}createElement("option",{textContent:this.zoomText.textStr,disabled:true},void 0,dropdown);this.createButtons()}createButtons(){const{options}=this;const buttonTheme=merge(options.buttonTheme);const states=buttonTheme&&buttonTheme.states;const width=buttonTheme.width||28;delete buttonTheme.width;delete buttonTheme.states;this.buttonOptions.forEach((rangeOptions,i)=>{this.createButton(rangeOptions,i,width,states)})}createButton(rangeOptions,i,width,states){const{dropdown,buttons,chart,options}=this;const renderer=chart.renderer;const buttonTheme=merge(options.buttonTheme);dropdown?.add(createElement("option",{textContent:rangeOptions.title||rangeOptions.text}),i+2);buttons[i]=renderer.button(rangeOptions.text,0,0,e=>{const buttonEvents=rangeOptions.events&&rangeOptions.events.click;let callDefaultEvent;if(buttonEvents){callDefaultEvent=buttonEvents.call(rangeOptions,e)}if(callDefaultEvent!==false){this.clickButton(i)}this.isActive=true},buttonTheme,states&&states.hover,states&&states.select,states&&states.disabled).attr({"text-align":"center",width:width}).add(this.buttonGroup);if(rangeOptions.title){buttons[i].attr("title",rangeOptions.title)}}alignElements(){const{buttonGroup,buttons,chart,group,inputGroup,options,zoomText}=this;const chartOptions=chart.options;const navButtonOptions=chartOptions.exporting&&chartOptions.exporting.enabled!==false&&chartOptions.navigation&&chartOptions.navigation.buttonOptions;const{buttonPosition,inputPosition,verticalAlign}=options;const getXOffsetForExportButton=(group,position)=>{if(navButtonOptions&&this.titleCollision(chart)&&verticalAlign==="top"&&position.align==="right"&&position.y-group.getBBox().height-12<(navButtonOptions.y||0)+(navButtonOptions.height||0)+chart.spacing[0]){return-40}return 0};let plotLeft=chart.plotLeft;if(group&&buttonPosition&&inputPosition){let translateX=buttonPosition.x-chart.spacing[3];if(buttonGroup){this.positionButtons();if(!this.initialButtonGroupWidth){let width=0;if(zoomText){width+=zoomText.getBBox().width+5}buttons.forEach((button,i)=>{width+=button.width||0;if(i!==buttons.length-1){width+=options.buttonSpacing}});this.initialButtonGroupWidth=width}plotLeft-=chart.spacing[3];const xOffsetForExportButton=getXOffsetForExportButton(buttonGroup,buttonPosition);this.alignButtonGroup(xOffsetForExportButton);if(this.buttonGroup?.translateY){this.dropdownLabel.attr({y:this.buttonGroup.translateY})}group.placed=buttonGroup.placed=chart.hasLoaded}let xOffsetForExportButton=0;if(options.inputEnabled&&inputGroup){xOffsetForExportButton=getXOffsetForExportButton(inputGroup,inputPosition);if(inputPosition.align==="left"){translateX=plotLeft}else if(inputPosition.align==="right"){translateX=-Math.max(chart.axisOffset[1],-xOffsetForExportButton)}inputGroup.align({y:inputPosition.y,width:inputGroup.getBBox().width,align:inputPosition.align,x:inputPosition.x+translateX-2},true,chart.spacingBox);inputGroup.placed=chart.hasLoaded}this.handleCollision(xOffsetForExportButton);group.align({verticalAlign:verticalAlign},true,chart.spacingBox);const alignTranslateY=group.alignAttr.translateY;let groupHeight=group.getBBox().height+20;let translateY=0;if(verticalAlign==="bottom"){const legendOptions=chart.legend&&chart.legend.options;const legendHeight=legendOptions&&legendOptions.verticalAlign==="bottom"&&legendOptions.enabled&&!legendOptions.floating?chart.legend.legendHeight+pick(legendOptions.margin,10):0;groupHeight=groupHeight+legendHeight-20;translateY=alignTranslateY-groupHeight-(options.floating?0:options.y)-(chart.titleOffset?chart.titleOffset[2]:0)-10}if(verticalAlign==="top"){if(options.floating){translateY=0}if(chart.titleOffset&&chart.titleOffset[0]){translateY=chart.titleOffset[0]}translateY+=chart.margin[0]-chart.spacing[0]||0}else if(verticalAlign==="middle"){if(inputPosition.y===buttonPosition.y){translateY=alignTranslateY}else if(inputPosition.y||buttonPosition.y){if(inputPosition.y<0||buttonPosition.y<0){translateY-=Math.min(inputPosition.y,buttonPosition.y)}else{translateY=alignTranslateY-groupHeight}}}group.translate(options.x,options.y+Math.floor(translateY));const{minInput,maxInput,dropdown}=this;if(options.inputEnabled&&minInput&&maxInput){minInput.style.marginTop=group.translateY+"px";maxInput.style.marginTop=group.translateY+"px"}if(dropdown){dropdown.style.marginTop=group.translateY+"px"}}}redrawElements(){const chart=this.chart,{inputBoxHeight,inputBoxBorderColor}=this.options;this.maxDateBox?.attr({height:inputBoxHeight});this.minDateBox?.attr({height:inputBoxHeight});if(!chart.styledMode){this.maxDateBox?.attr({stroke:inputBoxBorderColor});this.minDateBox?.attr({stroke:inputBoxBorderColor})}if(this.isDirty){this.isDirty=false;this.isCollapsed=void 0;const newButtonsOptions=this.options.buttons??[];const btnLength=Math.min(newButtonsOptions.length,this.buttonOptions.length);const{dropdown,options}=this;const buttonTheme=merge(options.buttonTheme);const states=buttonTheme&&buttonTheme.states;const width=buttonTheme.width||28;if(newButtonsOptions.length<this.buttonOptions.length){for(let i=this.buttonOptions.length-1;i>=newButtonsOptions.length;i--){const btn=this.buttons.pop();btn?.destroy();this.dropdown?.options.remove(i+1)}}for(let i=btnLength-1;i>=0;i--){const diff=diffObjects(newButtonsOptions[i],this.buttonOptions[i]);if(Object.keys(diff).length!==0){const rangeOptions=newButtonsOptions[i];this.buttons[i].destroy();dropdown?.options.remove(i+1);this.createButton(rangeOptions,i,width,states);this.computeButtonRange(rangeOptions)}}if(newButtonsOptions.length>this.buttonOptions.length){for(let i=this.buttonOptions.length;i<newButtonsOptions.length;i++){this.createButton(newButtonsOptions[i],i,width,states);this.computeButtonRange(newButtonsOptions[i])}}this.buttonOptions=this.options.buttons??[];if(defined(this.options.selected)&&this.buttons.length){this.clickButton(this.options.selected,false)}}}alignButtonGroup(xOffsetForExportButton,width){const{chart,options,buttonGroup}=this;const{buttonPosition}=options;const plotLeft=chart.plotLeft-chart.spacing[3];let translateX=buttonPosition.x-chart.spacing[3];if(buttonPosition.align==="right"){translateX+=xOffsetForExportButton-plotLeft}else if(buttonPosition.align==="center"){translateX-=plotLeft/2}if(buttonGroup){buttonGroup.align({y:buttonPosition.y,width:pick(width,this.initialButtonGroupWidth),align:buttonPosition.align,x:translateX},true,chart.spacingBox)}}positionButtons(){const{buttons,chart,options,zoomText}=this;const verb=chart.hasLoaded?"animate":"attr";const{buttonPosition}=options;const plotLeft=chart.plotLeft;let buttonLeft=plotLeft;if(zoomText&&zoomText.visibility!=="hidden"){zoomText[verb]({x:pick(plotLeft+buttonPosition.x,plotLeft)});buttonLeft+=buttonPosition.x+zoomText.getBBox().width+5}for(let i=0,iEnd=this.buttonOptions.length;i<iEnd;++i){if(buttons[i].visibility!=="hidden"){buttons[i][verb]({x:buttonLeft});buttonLeft+=(buttons[i].width||0)+options.buttonSpacing}else{buttons[i][verb]({x:plotLeft})}}}handleCollision(xOffsetForExportButton){const{chart,buttonGroup,inputGroup}=this;const{buttonPosition,dropdown,inputPosition}=this.options;const maxButtonWidth=()=>{let buttonWidth=0;this.buttons.forEach(button=>{const bBox=button.getBBox();if(bBox.width>buttonWidth){buttonWidth=bBox.width}});return buttonWidth};const groupsOverlap=buttonGroupWidth=>{if(inputGroup?.alignOptions&&buttonGroup){const inputGroupX=inputGroup.alignAttr.translateX+inputGroup.alignOptions.x-xOffsetForExportButton+inputGroup.getBBox().x+2;const inputGroupWidth=inputGroup.alignOptions.width||0;const buttonGroupX=buttonGroup.alignAttr.translateX+buttonGroup.getBBox().x;return buttonGroupX+buttonGroupWidth>inputGroupX&&inputGroupX+inputGroupWidth>buttonGroupX&&buttonPosition.y<inputPosition.y+inputGroup.getBBox().height}return false};const moveInputsDown=()=>{if(inputGroup&&buttonGroup){inputGroup.attr({translateX:inputGroup.alignAttr.translateX+(chart.axisOffset[1]>=-xOffsetForExportButton?0:-xOffsetForExportButton),translateY:inputGroup.alignAttr.translateY+buttonGroup.getBBox().height+10})}};if(buttonGroup){if(dropdown==="always"){this.collapseButtons();if(groupsOverlap(maxButtonWidth())){moveInputsDown()}return}if(dropdown==="never"){this.expandButtons()}}if(inputGroup&&buttonGroup){if(inputPosition.align===buttonPosition.align||groupsOverlap(this.initialButtonGroupWidth+20)){if(dropdown==="responsive"){this.collapseButtons();if(groupsOverlap(maxButtonWidth())){moveInputsDown()}}else{moveInputsDown()}}else if(dropdown==="responsive"){this.expandButtons()}}else if(buttonGroup&&dropdown==="responsive"){if(this.initialButtonGroupWidth>chart.plotWidth){this.collapseButtons()}else{this.expandButtons()}}}collapseButtons(){const{buttons,zoomText}=this;if(this.isCollapsed===true){return}this.isCollapsed=true;zoomText.hide();buttons.forEach(button=>void button.hide());this.showDropdown()}expandButtons(){const{buttons,zoomText}=this;if(this.isCollapsed===false){return}this.isCollapsed=false;this.hideDropdown();zoomText.show();buttons.forEach(button=>void button.show());this.positionButtons()}showDropdown(){const{buttonGroup,chart,dropdownLabel,dropdown}=this;if(buttonGroup&&dropdown){const{translateX=0,translateY=0}=buttonGroup,left=chart.plotLeft+translateX,top=translateY;dropdownLabel.attr({x:left,y:top}).show();css(dropdown,{left:left+"px",top:top+"px",visibility:"inherit"});this.hasVisibleDropdown=true}}hideDropdown(){const{dropdown}=this;if(dropdown){this.dropdownLabel.hide();css(dropdown,{visibility:"hidden",width:"1px",height:"1px"});this.hasVisibleDropdown=false}}getHeight(){const rangeSelector=this,options=rangeSelector.options,rangeSelectorGroup=rangeSelector.group,inputPosition=options.inputPosition,buttonPosition=options.buttonPosition,yPosition=options.y,buttonPositionY=buttonPosition.y,inputPositionY=inputPosition.y;let rangeSelectorHeight=0;if(options.height){return options.height}this.alignElements();rangeSelectorHeight=rangeSelectorGroup?rangeSelectorGroup.getBBox(true).height+13+yPosition:0;const minPosition=Math.min(inputPositionY,buttonPositionY);if(inputPositionY<0&&buttonPositionY<0||inputPositionY>0&&buttonPositionY>0){rangeSelectorHeight+=Math.abs(minPosition)}return rangeSelectorHeight}titleCollision(chart){return!(chart.options.title.text||chart.options.subtitle.text)}update(options,redraw=true){const chart=this.chart;merge(true,this.options,options);if(this.options.selected&&this.options.selected>=this.options.buttons.length){this.options.selected=void 0;chart.options.rangeSelector.selected=void 0}if(defined(options.enabled)){this.destroy();return this.init(chart)}this.isDirty=!!options.buttons;if(redraw){this.render()}}destroy(){const rSelector=this,minInput=rSelector.minInput,maxInput=rSelector.maxInput;if(rSelector.eventsToUnbind){rSelector.eventsToUnbind.forEach(unbind=>unbind());rSelector.eventsToUnbind=void 0}destroyObjectProperties(rSelector.buttons);if(minInput){minInput.onfocus=minInput.onblur=minInput.onchange=null}if(maxInput){maxInput.onfocus=maxInput.onblur=maxInput.onchange=null}objectEach(rSelector,function(val,key){if(val&&key!=="chart"){if(val instanceof SVGElement){val.destroy()}else if(val instanceof window.HTMLElement){discardElement(val)}delete rSelector[key]}if(val!==RangeSelector.prototype[key]){rSelector[key]=null}},this);this.buttons=[]}}extend(RangeSelector.prototype,{inputTypeFormats:{"datetime-local":"%Y-%m-%dT%H:%M:%S",date:"%Y-%m-%d",time:"%H:%M:%S"}});export default RangeSelector;"";