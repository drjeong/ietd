"use strict";import D from"../../Core/Defaults.js";const{defaultOptions}=D;import H from"../../Core/Globals.js";const{composed}=H;import RangeSelectorDefaults from"./RangeSelectorDefaults.js";import U from"../../Core/Utilities.js";const{addEvent,defined,extend,isNumber,merge,pick,pushUnique}=U;const chartDestroyEvents=[];let RangeSelectorConstructor;function axisMinFromRange(){const rangeOptions=this.range,type=rangeOptions.type,max=this.max,time=this.chart.time,getTrueRange=function(base,count){const original=time.toParts(base),modified=original.slice();if(type==="year"){modified[0]+=count}else{modified[1]+=count}let d=time.makeTime.apply(time,modified);const numbers=time.toParts(d);if(type==="month"&&original[1]===numbers[1]&&Math.abs(count)===1){modified[0]=original[0];modified[1]=original[1];modified[2]=0}d=time.makeTime.apply(time,modified);return d-base};let min,range;if(isNumber(rangeOptions)){min=max-rangeOptions;range=rangeOptions}else if(rangeOptions){min=max+getTrueRange(max,-(rangeOptions.count||1));if(this.chart){this.chart.setFixedRange(max-min)}}const dataMin=pick(this.dataMin,Number.MIN_VALUE);if(!isNumber(min)){min=dataMin}if(min<=dataMin){min=dataMin;if(typeof range==="undefined"){range=getTrueRange(min,rangeOptions.count)}this.newMax=Math.min(min+range,pick(this.dataMax,Number.MAX_VALUE))}if(!isNumber(max)){min=void 0}else if(!isNumber(rangeOptions)&&rangeOptions&&rangeOptions._offsetMin){min+=rangeOptions._offsetMin}return min}function updateRangeSelectorButtons(){this.rangeSelector?.redrawElements()}function compose(AxisClass,ChartClass,RangeSelectorClass){RangeSelectorConstructor=RangeSelectorClass;if(pushUnique(composed,"RangeSelector")){const chartProto=ChartClass.prototype;AxisClass.prototype.minFromRange=axisMinFromRange;addEvent(ChartClass,"afterGetContainer",createRangeSelector);addEvent(ChartClass,"beforeRender",onChartBeforeRender);addEvent(ChartClass,"destroy",onChartDestroy);addEvent(ChartClass,"getMargins",onChartGetMargins);addEvent(ChartClass,"redraw",redrawRangeSelector);addEvent(ChartClass,"update",onChartUpdate);addEvent(ChartClass,"beforeRedraw",updateRangeSelectorButtons);chartProto.callbacks.push(redrawRangeSelector);extend(defaultOptions,{rangeSelector:RangeSelectorDefaults.rangeSelector});extend(defaultOptions.lang,RangeSelectorDefaults.lang)}}function createRangeSelector(){if(this.options.rangeSelector&&this.options.rangeSelector.enabled){this.rangeSelector=new RangeSelectorConstructor(this)}}function onChartBeforeRender(){const chart=this,rangeSelector=chart.rangeSelector;if(rangeSelector){if(isNumber(rangeSelector.deferredYTDClick)){rangeSelector.clickButton(rangeSelector.deferredYTDClick);delete rangeSelector.deferredYTDClick}const verticalAlign=rangeSelector.options.verticalAlign;if(!rangeSelector.options.floating){if(verticalAlign==="bottom"){this.extraBottomMargin=true}else if(verticalAlign==="top"){this.extraTopMargin=true}}}}function redrawRangeSelector(){const chart=this;const rangeSelector=this.rangeSelector;if(!rangeSelector){return}let alignTo;const extremes=chart.xAxis[0].getExtremes();const legend=chart.legend;const verticalAlign=rangeSelector&&rangeSelector.options.verticalAlign;if(isNumber(extremes.min)){rangeSelector.render(extremes.min,extremes.max)}if(legend.display&&verticalAlign==="top"&&verticalAlign===legend.options.verticalAlign){alignTo=merge(chart.spacingBox);if(legend.options.layout==="vertical"){alignTo.y=chart.plotTop}else{alignTo.y+=rangeSelector.getHeight()}legend.group.placed=false;legend.align(alignTo)}}function onChartDestroy(){for(let i=0,iEnd=chartDestroyEvents.length;i<iEnd;++i){const events=chartDestroyEvents[i];if(events[0]===this){events[1].forEach(unbind=>unbind());chartDestroyEvents.splice(i,1);return}}}function onChartGetMargins(){const rangeSelector=this.rangeSelector;if(rangeSelector?.options?.enabled){const rangeSelectorHeight=rangeSelector.getHeight();const verticalAlign=rangeSelector.options.verticalAlign;if(!rangeSelector.options.floating){if(verticalAlign==="bottom"){this.marginBottom+=rangeSelectorHeight}else if(verticalAlign!=="middle"){this.plotTop+=rangeSelectorHeight}}}}function onChartUpdate(e){const chart=this,options=e.options,optionsRangeSelector=options.rangeSelector,extraBottomMarginWas=this.extraBottomMargin,extraTopMarginWas=this.extraTopMargin;let rangeSelector=chart.rangeSelector;if(optionsRangeSelector&&optionsRangeSelector.enabled&&!defined(rangeSelector)&&this.options.rangeSelector){this.options.rangeSelector.enabled=true;this.rangeSelector=rangeSelector=new RangeSelectorConstructor(this)}this.extraBottomMargin=false;this.extraTopMargin=false;if(rangeSelector){const verticalAlign=optionsRangeSelector&&optionsRangeSelector.verticalAlign||rangeSelector.options&&rangeSelector.options.verticalAlign;if(!rangeSelector.options.floating){if(verticalAlign==="bottom"){this.extraBottomMargin=true}else if(verticalAlign!=="middle"){this.extraTopMargin=true}}if(this.extraBottomMargin!==extraBottomMarginWas||this.extraTopMargin!==extraTopMarginWas){this.isDirtyBox=true}}}const RangeSelectorComposition={compose:compose};export default RangeSelectorComposition;