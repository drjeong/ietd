"use strict";import Chart from"../../Core/Chart/Chart.js";import Navigator from"./Navigator.js";import G from"../../Core/Globals.js";import U from"../../Core/Utilities.js";import Axis from"../../Core/Axis/Axis.js";import standaloneNavigatorDefaults from"./StandaloneNavigatorDefaults.js";const{merge,addEvent,fireEvent,pick}=U;class StandaloneNavigator{static navigator(renderTo,options){const nav=new StandaloneNavigator(renderTo,options);if(!G.navigators){G.navigators=[nav]}else{G.navigators.push(nav)}return nav}constructor(element,userOptions){this.boundAxes=[];this.userOptions=userOptions;this.chartOptions=merge(G.getOptions(),standaloneNavigatorDefaults,{navigator:userOptions});if(this.chartOptions.chart&&userOptions.height){this.chartOptions.chart.height=userOptions.height}const chart=new Chart(element,this.chartOptions);chart.options=merge(chart.options,{navigator:{enabled:true},scrollbar:{enabled:true}});if(this.chartOptions.navigator&&this.chartOptions.scrollbar){this.chartOptions.navigator.enabled=true;this.chartOptions.scrollbar.enabled=true}this.navigator=new Navigator(chart);chart.navigator=this.navigator;this.initNavigator()}bind(axisOrChart,twoWay=true){const nav=this;const axis=axisOrChart instanceof Chart?axisOrChart.xAxis[0]:axisOrChart;if(!(axis instanceof Axis)){return}const{min,max}=this.navigator.xAxis,removeEventCallbacks=[];if(twoWay){const removeSetExtremesEvent=addEvent(axis,"setExtremes",e=>{if(e.trigger==="pan"||e.trigger==="zoom"||e.trigger==="mouseWheelZoom"){nav.setRange(e.min,e.max,true,e.trigger!=="pan",{trigger:axis})}});removeEventCallbacks.push(removeSetExtremesEvent)}const removeSetRangeEvent=addEvent(this.navigator,"setRange",e=>{axis.setExtremes(e.min,e.max,e.redraw,e.animation)});removeEventCallbacks.push(removeSetRangeEvent);let boundAxis=this.boundAxes.filter(function(boundAxis){return boundAxis.axis===axis})[0];if(!boundAxis){boundAxis={axis:axis,callbacks:[]};this.boundAxes.push(boundAxis)}boundAxis.callbacks=removeEventCallbacks;axis.series.forEach(series=>{if(series.options.showInNavigator){nav.addSeries(series.options)}});axis.setExtremes(min,max);addEvent(axis,"destroy",e=>{if(!e.keepEvents){this.unbind(axis)}})}unbind(axisOrChart){if(!axisOrChart){this.boundAxes.forEach(({callbacks})=>{callbacks.forEach(removeCallback=>removeCallback())});this.boundAxes.length=0;return}const axis=axisOrChart instanceof Axis?axisOrChart:axisOrChart.xAxis[0];for(let i=this.boundAxes.length-1;i>=0;i--){if(this.boundAxes[i].axis===axis){this.boundAxes[i].callbacks.forEach(callback=>callback());this.boundAxes.splice(i,1)}}}destroy(){this.boundAxes.forEach(({callbacks})=>{callbacks.forEach(removeCallback=>removeCallback())});this.boundAxes.length=0;this.navigator.destroy();this.navigator.chart.destroy()}update(newOptions,redraw){this.chartOptions=merge(this.chartOptions,newOptions.height&&{chart:{height:newOptions.height}},{navigator:newOptions});this.navigator.chart.update(this.chartOptions,redraw)}redraw(){this.navigator.chart.redraw()}addSeries(seriesOptions){this.navigator.chart.addSeries(merge(seriesOptions,{showInNavigator:pick(seriesOptions.showInNavigator,true)}));this.navigator.setBaseSeries()}initNavigator(){const nav=this.navigator;nav.top=1;nav.xAxis.setScale();nav.yAxis.setScale();nav.xAxis.render();nav.yAxis.render();nav.series?.forEach(s=>{s.translate();s.render();s.redraw()});const{min,max}=this.getInitialExtremes();nav.chart.xAxis[0].userMin=min;nav.chart.xAxis[0].userMax=max;nav.render(min,max)}getRange(){const{min,max}=this.navigator.chart.xAxis[0].getExtremes(),{userMin,userMax,min:dataMin,max:dataMax}=this.navigator.xAxis.getExtremes();return{min:pick(min,dataMin),max:pick(max,dataMax),dataMin:dataMin,dataMax:dataMax,userMin:userMin,userMax:userMax}}setRange(min,max,redraw,animation,eventArguments){fireEvent(this.navigator,"setRange",{min:min,max:max,redraw:redraw,animation:animation,eventArguments:merge(eventArguments,{trigger:"navigator"})})}getInitialExtremes(){const{min,max}=this.navigator.xAxis.getExtremes();return{min:min,max:max}}}export default StandaloneNavigator;"";