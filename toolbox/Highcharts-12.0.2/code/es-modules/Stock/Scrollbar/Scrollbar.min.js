"use strict";import D from"../../Core/Defaults.js";const{defaultOptions}=D;import H from"../../Core/Globals.js";import ScrollbarAxis from"../../Core/Axis/ScrollbarAxis.js";import ScrollbarDefaults from"./ScrollbarDefaults.js";import U from"../../Core/Utilities.js";const{addEvent,correctFloat,crisp,defined,destroyObjectProperties,fireEvent,merge,pick,removeEvent}=U;class Scrollbar{static compose(AxisClass){ScrollbarAxis.compose(AxisClass,Scrollbar)}static swapXY(path,vertical){if(vertical){path.forEach(seg=>{const len=seg.length;let temp;for(let i=0;i<len;i+=2){temp=seg[i+1];if(typeof temp==="number"){seg[i+1]=seg[i+2];seg[i+2]=temp}}})}return path}constructor(renderer,options,chart){this._events=[];this.chartX=0;this.chartY=0;this.from=0;this.scrollbarButtons=[];this.scrollbarLeft=0;this.scrollbarStrokeWidth=1;this.scrollbarTop=0;this.size=0;this.to=0;this.trackBorderWidth=1;this.x=0;this.y=0;this.init(renderer,options,chart)}addEvents(){const buttonsOrder=this.options.inverted?[1,0]:[0,1],buttons=this.scrollbarButtons,bar=this.scrollbarGroup.element,track=this.track.element,mouseDownHandler=this.mouseDownHandler.bind(this),mouseMoveHandler=this.mouseMoveHandler.bind(this),mouseUpHandler=this.mouseUpHandler.bind(this);const _events=[[buttons[buttonsOrder[0]].element,"click",this.buttonToMinClick.bind(this)],[buttons[buttonsOrder[1]].element,"click",this.buttonToMaxClick.bind(this)],[track,"click",this.trackClick.bind(this)],[bar,"mousedown",mouseDownHandler],[bar.ownerDocument,"mousemove",mouseMoveHandler],[bar.ownerDocument,"mouseup",mouseUpHandler],[bar,"touchstart",mouseDownHandler],[bar.ownerDocument,"touchmove",mouseMoveHandler],[bar.ownerDocument,"touchend",mouseUpHandler]];_events.forEach(function(args){addEvent.apply(null,args)});this._events=_events}buttonToMaxClick(e){const scroller=this;const range=(scroller.to-scroller.from)*pick(scroller.options.step,.2);scroller.updatePosition(scroller.from+range,scroller.to+range);fireEvent(scroller,"changed",{from:scroller.from,to:scroller.to,trigger:"scrollbar",DOMEvent:e})}buttonToMinClick(e){const scroller=this;const range=correctFloat(scroller.to-scroller.from)*pick(scroller.options.step,.2);scroller.updatePosition(correctFloat(scroller.from-range),correctFloat(scroller.to-range));fireEvent(scroller,"changed",{from:scroller.from,to:scroller.to,trigger:"scrollbar",DOMEvent:e})}cursorToScrollbarPosition(normalizedEvent){const scroller=this,options=scroller.options,minWidthDifference=options.minWidth>scroller.calculatedWidth?options.minWidth:0;return{chartX:(normalizedEvent.chartX-scroller.x-scroller.xOffset)/(scroller.barWidth-minWidthDifference),chartY:(normalizedEvent.chartY-scroller.y-scroller.yOffset)/(scroller.barWidth-minWidthDifference)}}destroy(){const scroller=this,navigator=scroller.chart.scroller;scroller.removeEvents();["track","scrollbarRifles","scrollbar","scrollbarGroup","group"].forEach(function(prop){if(scroller[prop]&&scroller[prop].destroy){scroller[prop]=scroller[prop].destroy()}});if(navigator&&scroller===navigator.scrollbar){navigator.scrollbar=null;destroyObjectProperties(navigator.scrollbarButtons)}}drawScrollbarButton(index){const scroller=this,renderer=scroller.renderer,scrollbarButtons=scroller.scrollbarButtons,options=scroller.options,size=scroller.size,group=renderer.g().add(scroller.group);scrollbarButtons.push(group);if(options.buttonsEnabled){const rect=renderer.rect().addClass("highcharts-scrollbar-button").add(group);if(!scroller.chart.styledMode){rect.attr({stroke:options.buttonBorderColor,"stroke-width":options.buttonBorderWidth,fill:options.buttonBackgroundColor})}rect.attr(rect.crisp({x:-.5,y:-.5,width:size,height:size,r:options.buttonBorderRadius},rect.strokeWidth()));const arrow=renderer.path(Scrollbar.swapXY([["M",size/2+(index?-1:1),size/2-3],["L",size/2+(index?-1:1),size/2+3],["L",size/2+(index?2:-2),size/2]],options.vertical)).addClass("highcharts-scrollbar-arrow").add(scrollbarButtons[index]);if(!scroller.chart.styledMode){arrow.attr({fill:options.buttonArrowColor})}}}init(renderer,options,chart){const scroller=this;scroller.scrollbarButtons=[];scroller.renderer=renderer;scroller.userOptions=options;scroller.options=merge(ScrollbarDefaults,defaultOptions.scrollbar,options);scroller.options.margin=pick(scroller.options.margin,10);scroller.chart=chart;scroller.size=pick(scroller.options.size,scroller.options.height);if(options.enabled){scroller.render();scroller.addEvents()}}mouseDownHandler(e){const scroller=this,normalizedEvent=scroller.chart.pointer?.normalize(e)||e,mousePosition=scroller.cursorToScrollbarPosition(normalizedEvent);scroller.chartX=mousePosition.chartX;scroller.chartY=mousePosition.chartY;scroller.initPositions=[scroller.from,scroller.to];scroller.grabbedCenter=true}mouseMoveHandler(e){const scroller=this,normalizedEvent=scroller.chart.pointer?.normalize(e)||e,options=scroller.options,direction=options.vertical?"chartY":"chartX",initPositions=scroller.initPositions||[];let scrollPosition,chartPosition,change;if(scroller.grabbedCenter&&(!e.touches||e.touches[0][direction]!==0)){chartPosition=scroller.cursorToScrollbarPosition(normalizedEvent)[direction];scrollPosition=scroller[direction];change=chartPosition-scrollPosition;scroller.hasDragged=true;scroller.updatePosition(initPositions[0]+change,initPositions[1]+change);if(scroller.hasDragged){fireEvent(scroller,"changed",{from:scroller.from,to:scroller.to,trigger:"scrollbar",DOMType:e.type,DOMEvent:e})}}}mouseUpHandler(e){const scroller=this;if(scroller.hasDragged){fireEvent(scroller,"changed",{from:scroller.from,to:scroller.to,trigger:"scrollbar",DOMType:e.type,DOMEvent:e})}scroller.grabbedCenter=scroller.hasDragged=scroller.chartX=scroller.chartY=null}position(x,y,width,height){const scroller=this,options=scroller.options,{buttonsEnabled,margin=0,vertical}=options,method=scroller.rendered?"animate":"attr";let xOffset=height,yOffset=0;scroller.group.show();scroller.x=x;scroller.y=y+this.trackBorderWidth;scroller.width=width;scroller.height=height;scroller.xOffset=xOffset;scroller.yOffset=yOffset;if(vertical){scroller.width=scroller.yOffset=width=yOffset=scroller.size;scroller.xOffset=xOffset=0;scroller.yOffset=yOffset=buttonsEnabled?scroller.size:0;scroller.barWidth=height-(buttonsEnabled?width*2:0);scroller.x=x=x+margin}else{scroller.height=height=scroller.size;scroller.xOffset=xOffset=buttonsEnabled?scroller.size:0;scroller.barWidth=width-(buttonsEnabled?height*2:0);scroller.y=scroller.y+margin}scroller.group[method]({translateX:x,translateY:scroller.y});scroller.track[method]({width:width,height:height});scroller.scrollbarButtons[1][method]({translateX:vertical?0:width-xOffset,translateY:vertical?height-yOffset:0})}removeEvents(){this._events.forEach(function(args){removeEvent.apply(null,args)});this._events.length=0}render(){const scroller=this,renderer=scroller.renderer,options=scroller.options,size=scroller.size,styledMode=scroller.chart.styledMode,group=renderer.g("scrollbar").attr({zIndex:options.zIndex}).hide().add();scroller.group=group;scroller.track=renderer.rect().addClass("highcharts-scrollbar-track").attr({r:options.trackBorderRadius||0,height:size,width:size}).add(group);if(!styledMode){scroller.track.attr({fill:options.trackBackgroundColor,stroke:options.trackBorderColor,"stroke-width":options.trackBorderWidth})}const trackBorderWidth=scroller.trackBorderWidth=scroller.track.strokeWidth();scroller.track.attr({x:-crisp(0,trackBorderWidth),y:-crisp(0,trackBorderWidth)});scroller.scrollbarGroup=renderer.g().add(group);scroller.scrollbar=renderer.rect().addClass("highcharts-scrollbar-thumb").attr({height:size-trackBorderWidth,width:size-trackBorderWidth,r:options.barBorderRadius||0}).add(scroller.scrollbarGroup);scroller.scrollbarRifles=renderer.path(Scrollbar.swapXY([["M",-3,size/4],["L",-3,2*size/3],["M",0,size/4],["L",0,2*size/3],["M",3,size/4],["L",3,2*size/3]],options.vertical)).addClass("highcharts-scrollbar-rifles").add(scroller.scrollbarGroup);if(!styledMode){scroller.scrollbar.attr({fill:options.barBackgroundColor,stroke:options.barBorderColor,"stroke-width":options.barBorderWidth});scroller.scrollbarRifles.attr({stroke:options.rifleColor,"stroke-width":1})}scroller.scrollbarStrokeWidth=scroller.scrollbar.strokeWidth();scroller.scrollbarGroup.translate(-crisp(0,scroller.scrollbarStrokeWidth),-crisp(0,scroller.scrollbarStrokeWidth));scroller.drawScrollbarButton(0);scroller.drawScrollbarButton(1)}setRange(from,to){const scroller=this,options=scroller.options,vertical=options.vertical,minWidth=options.minWidth,fullWidth=scroller.barWidth,method=this.rendered&&!this.hasDragged&&!(this.chart.navigator&&this.chart.navigator.hasDragged)?"animate":"attr";if(!defined(fullWidth)){return}const toPX=fullWidth*Math.min(to,1);let fromPX,newSize;from=Math.max(from,0);fromPX=Math.ceil(fullWidth*from);scroller.calculatedWidth=newSize=correctFloat(toPX-fromPX);if(newSize<minWidth){fromPX=(fullWidth-minWidth+newSize)*from;newSize=minWidth}const newPos=Math.floor(fromPX+scroller.xOffset+scroller.yOffset);const newRiflesPos=newSize/2-.5;scroller.from=from;scroller.to=to;if(!vertical){scroller.scrollbarGroup[method]({translateX:newPos});scroller.scrollbar[method]({width:newSize});scroller.scrollbarRifles[method]({translateX:newRiflesPos});scroller.scrollbarLeft=newPos;scroller.scrollbarTop=0}else{scroller.scrollbarGroup[method]({translateY:newPos});scroller.scrollbar[method]({height:newSize});scroller.scrollbarRifles[method]({translateY:newRiflesPos});scroller.scrollbarTop=newPos;scroller.scrollbarLeft=0}if(newSize<=12){scroller.scrollbarRifles.hide()}else{scroller.scrollbarRifles.show()}if(options.showFull===false){if(from<=0&&to>=1){scroller.group.hide()}else{scroller.group.show()}}scroller.rendered=true}shouldUpdateExtremes(eventType){return pick(this.options.liveRedraw,H.svg&&!H.isTouchDevice&&!this.chart.boosted)||eventType==="mouseup"||eventType==="touchend"||!defined(eventType)}trackClick(e){const scroller=this;const normalizedEvent=scroller.chart.pointer?.normalize(e)||e,range=scroller.to-scroller.from,top=scroller.y+scroller.scrollbarTop,left=scroller.x+scroller.scrollbarLeft;if(scroller.options.vertical&&normalizedEvent.chartY>top||!scroller.options.vertical&&normalizedEvent.chartX>left){scroller.updatePosition(scroller.from+range,scroller.to+range)}else{scroller.updatePosition(scroller.from-range,scroller.to-range)}fireEvent(scroller,"changed",{from:scroller.from,to:scroller.to,trigger:"scrollbar",DOMEvent:e})}update(options){this.destroy();this.init(this.chart.renderer,merge(true,this.options,options),this.chart)}updatePosition(from,to){if(to>1){from=correctFloat(1-correctFloat(to-from));to=1}if(from<0){to=correctFloat(to-from);from=0}this.from=from;this.to=to}}Scrollbar.defaultOptions=ScrollbarDefaults;defaultOptions.scrollbar=merge(true,Scrollbar.defaultOptions,defaultOptions.scrollbar);export default Scrollbar;