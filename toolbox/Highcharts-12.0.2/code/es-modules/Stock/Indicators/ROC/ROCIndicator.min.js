"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{isArray,merge,extend}=U;function populateAverage(xVal,yVal,i,period,index){let nDaysAgoY,rocY;if(index<0){nDaysAgoY=yVal[i-period];rocY=nDaysAgoY?(yVal[i]-nDaysAgoY)/nDaysAgoY*100:null}else{nDaysAgoY=yVal[i-period][index];rocY=nDaysAgoY?(yVal[i][index]-nDaysAgoY)/nDaysAgoY*100:null}return[xVal[i],rocY]}class ROCIndicator extends SMAIndicator{getValues(series,params){const period=params.period,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,ROC=[],xData=[],yData=[];let i,index=-1,ROCPoint;if(xVal.length<=period){return}if(isArray(yVal[0])){index=params.index}for(i=period;i<yValLen;i++){ROCPoint=populateAverage(xVal,yVal,i,period,index);ROC.push(ROCPoint);xData.push(ROCPoint[0]);yData.push(ROCPoint[1])}return{values:ROC,xData:xData,yData:yData}}}ROCIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:3,period:9}});extend(ROCIndicator.prototype,{nameBase:"Rate of Change"});SeriesRegistry.registerSeriesType("roc",ROCIndicator);export default ROCIndicator;"";