"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{correctFloat,isArray,merge}=U;class EMAIndicator extends SMAIndicator{accumulatePeriodPoints(period,index,yVal){let sum=0,i=0,y=0;while(i<period){y=index<0?yVal[i]:yVal[i][index];sum=sum+y;i++}return sum}calculateEma(xVal,yVal,i,EMApercent,calEMA,index,SMA){const x=xVal[i-1],yValue=index<0?yVal[i-1]:yVal[i-1][index],y=typeof calEMA==="undefined"?SMA:correctFloat(yValue*EMApercent+calEMA*(1-EMApercent));return[x,y]}getValues(series,params){const period=params.period,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,EMApercent=2/(period+1),EMA=[],xData=[],yData=[];let calEMA,EMAPoint,i,index=-1,sum=0,SMA=0;if(yValLen<period){return}if(isArray(yVal[0])){index=params.index?params.index:0}sum=this.accumulatePeriodPoints(period,index,yVal);SMA=sum/period;for(i=period;i<yValLen+1;i++){EMAPoint=this.calculateEma(xVal,yVal,i,EMApercent,calEMA,index,SMA);EMA.push(EMAPoint);xData.push(EMAPoint[0]);yData.push(EMAPoint[1]);calEMA=EMAPoint[1]}return{values:EMA,xData:xData,yData:yData}}}EMAIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:3,period:9}});SeriesRegistry.registerSeriesType("ema",EMAIndicator);export default EMAIndicator;"";