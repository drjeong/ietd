"use strict";import AU from"../ArrayUtilities.js";import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{extend,isArray,merge}=U;class StochasticIndicator extends SMAIndicator{init(){super.init.apply(this,arguments);this.options=merge({smoothedLine:{styles:{lineColor:this.color}}},this.options)}getValues(series,params){const periodK=params.periods[0],periodD=params.periods[1],xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,SO=[],xData=[],yData=[],close=3,low=2,high=1;let slicedY,CL,HL,LL,K,D=null,points,extremes,i;if(yValLen<periodK||!isArray(yVal[0])||yVal[0].length!==4){return}let constantValues=true,j=0;for(i=periodK-1;i<yValLen;i++){slicedY=yVal.slice(i-periodK+1,i+1);extremes=AU.getArrayExtremes(slicedY,low,high);LL=extremes[0];CL=yVal[i][close]-LL;HL=extremes[1]-LL;K=CL/HL*100;if(isNaN(K)&&constantValues){j++;continue}else if(constantValues&&!isNaN(K)){constantValues=false}const length=xData.push(xVal[i]);if(isNaN(K)){yData.push([yData[length-2]&&typeof yData[length-2][0]==="number"?yData[length-2][0]:null,null])}else{yData.push([K,null])}if(i>=j+(periodK-1)+(periodD-1)){points=super.getValues({xData:xData.slice(-periodD),yData:yData.slice(-periodD)},{period:periodD});D=points.yData[0]}SO.push([xVal[i],K,D]);yData[length-1][1]=D}return{values:SO,xData:xData,yData:yData}}}StochasticIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:void 0,periods:[14,3]},marker:{enabled:false},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>%K: {point.y}<br/>%D: {point.smoothed}<br/>'},smoothedLine:{styles:{lineWidth:1,lineColor:void 0}},dataGrouping:{approximation:"averages"}});extend(StochasticIndicator.prototype,{areaLinesNames:[],nameComponents:["periods"],nameBase:"Stochastic",pointArrayMap:["y","smoothed"],parallelArrays:["x","y","smoothed"],pointValKey:"y",linesApiNames:["smoothedLine"]});MultipleLinesComposition.compose(StochasticIndicator);SeriesRegistry.registerSeriesType("stochastic",StochasticIndicator);export default StochasticIndicator;"";