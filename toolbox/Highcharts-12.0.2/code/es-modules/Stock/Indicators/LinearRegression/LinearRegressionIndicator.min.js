"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{isArray,extend,merge}=U;class LinearRegressionIndicator extends SMAIndicator{getRegressionLineParameters(xData,yData){const yIndex=this.options.params.index,getSingleYValue=function(yValue,yIndex){return isArray(yValue)?yValue[yIndex]:yValue},xSum=xData.reduce(function(accX,val){return val+accX},0),ySum=yData.reduce(function(accY,val){return getSingleYValue(val,yIndex)+accY},0),xMean=xSum/xData.length,yMean=ySum/yData.length;let xError,yError,i,formulaNumerator=0,formulaDenominator=0;for(i=0;i<xData.length;i++){xError=xData[i]-xMean;yError=getSingleYValue(yData[i],yIndex)-yMean;formulaNumerator+=xError*yError;formulaDenominator+=Math.pow(xError,2)}const slope=formulaDenominator?formulaNumerator/formulaDenominator:0;return{slope:slope,intercept:yMean-slope*xMean}}getEndPointY(lineParameters,endPointX){return lineParameters.slope*endPointX+lineParameters.intercept}transformXData(xData,xAxisUnit){const xOffset=xData[0];return xData.map(function(xValue){return(xValue-xOffset)/xAxisUnit})}findClosestDistance(xData){let distance,closestDistance,i;for(i=1;i<xData.length-1;i++){distance=xData[i]-xData[i-1];if(distance>0&&(typeof closestDistance==="undefined"||distance<closestDistance)){closestDistance=distance}}return closestDistance}getValues(baseSeries,regressionSeriesParams){const xData=baseSeries.xData,yData=baseSeries.yData,period=regressionSeriesParams.period,indicatorData={xData:[],yData:[],values:[]},xAxisUnit=this.options.params.xAxisUnit||this.findClosestDistance(xData);let lineParameters,i,periodStart,periodEnd,endPointX,endPointY,periodXData,periodYData,periodTransformedXData;for(i=period-1;i<=xData.length-1;i++){periodStart=i-period+1;periodEnd=i+1;endPointX=xData[i];periodXData=xData.slice(periodStart,periodEnd);periodYData=yData.slice(periodStart,periodEnd);periodTransformedXData=this.transformXData(periodXData,xAxisUnit);lineParameters=this.getRegressionLineParameters(periodTransformedXData,periodYData);endPointY=this.getEndPointY(lineParameters,periodTransformedXData[periodTransformedXData.length-1]);indicatorData.values.push({regressionLineParameters:lineParameters,x:endPointX,y:endPointY});if(isArray(indicatorData.xData)){indicatorData.xData.push(endPointX)}if(isArray(indicatorData.yData)){indicatorData.yData.push(endPointY)}}return indicatorData}}LinearRegressionIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{xAxisUnit:null},tooltip:{valueDecimals:4}});extend(LinearRegressionIndicator.prototype,{nameBase:"Linear Regression Indicator"});SeriesRegistry.registerSeriesType("linearRegression",LinearRegressionIndicator);export default LinearRegressionIndicator;"";