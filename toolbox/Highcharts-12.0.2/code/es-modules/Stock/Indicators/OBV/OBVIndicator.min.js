"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{isNumber,error,extend,merge}=U;class OBVIndicator extends SMAIndicator{getValues(series,params){const volumeSeries=series.chart.get(params.volumeSeriesID),xVal=series.xData,yVal=series.yData,OBV=[],xData=[],yData=[],hasOHLC=!isNumber(yVal[0]);let OBVPoint=[],i=1,previousOBV=0,curentOBV=0,previousClose=0,curentClose=0,volume;if(volumeSeries){volume=volumeSeries.getColumn("y");OBVPoint=[xVal[0],previousOBV];previousClose=hasOHLC?yVal[0][3]:yVal[0];OBV.push(OBVPoint);xData.push(xVal[0]);yData.push(OBVPoint[1]);for(i;i<yVal.length;i++){curentClose=hasOHLC?yVal[i][3]:yVal[i];if(curentClose>previousClose){curentOBV=previousOBV+volume[i]}else if(curentClose===previousClose){curentOBV=previousOBV}else{curentOBV=previousOBV-volume[i]}OBVPoint=[xVal[i],curentOBV];previousOBV=curentOBV;previousClose=curentClose;OBV.push(OBVPoint);xData.push(xVal[i]);yData.push(OBVPoint[1])}}else{error("Series "+params.volumeSeriesID+" not found! Check `volumeSeriesID`.",true,series.chart);return}return{values:OBV,xData:xData,yData:yData}}}OBVIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{marker:{enabled:false},params:{index:void 0,period:void 0,volumeSeriesID:"volume"},tooltip:{valueDecimals:0}});extend(OBVIndicator.prototype,{nameComponents:void 0});SeriesRegistry.registerSeriesType("obv",OBVIndicator);export default OBVIndicator;"";