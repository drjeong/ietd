"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{isNumber,merge}=U;function toFixed(a,n){return parseFloat(a.toFixed(n))}class RSIIndicator extends SMAIndicator{getValues(series,params){const period=params.period,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,decimals=params.decimals,RSI=[],xData=[],yData=[];let gain=0,loss=0,index=params.index,range=1,RSIPoint,change,avgGain,avgLoss,i,values;if(xVal.length<period){return}if(isNumber(yVal[0])){values=yVal}else{index=Math.min(index,yVal[0].length-1);values=yVal.map(value=>value[index])}while(range<period){change=toFixed(values[range]-values[range-1],decimals);if(change>0){gain+=change}else{loss+=Math.abs(change)}range++}avgGain=toFixed(gain/(period-1),decimals);avgLoss=toFixed(loss/(period-1),decimals);for(i=range;i<yValLen;i++){change=toFixed(values[i]-values[i-1],decimals);if(change>0){gain=change;loss=0}else{gain=0;loss=Math.abs(change)}avgGain=toFixed((avgGain*(period-1)+gain)/period,decimals);avgLoss=toFixed((avgLoss*(period-1)+loss)/period,decimals);if(avgLoss===0){RSIPoint=100}else if(avgGain===0){RSIPoint=0}else{RSIPoint=toFixed(100-100/(1+avgGain/avgLoss),decimals)}RSI.push([xVal[i],RSIPoint]);xData.push(xVal[i]);yData.push(RSIPoint)}return{values:RSI,xData:xData,yData:yData}}}RSIIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{decimals:4,index:3}});SeriesRegistry.registerSeriesType("rsi",RSIIndicator);export default RSIIndicator;"";