"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{error,extend,merge}=U;class ADIndicator extends SMAIndicator{static populateAverage(xVal,yVal,yValVolume,i,_period){const high=yVal[i][1],low=yVal[i][2],close=yVal[i][3],volume=yValVolume[i],adY=close===high&&close===low||high===low?0:(2*close-low-high)/(high-low)*volume,adX=xVal[i];return[adX,adY]}getValues(series,params){const period=params.period,xVal=series.xData,yVal=series.yData,volumeSeriesID=params.volumeSeriesID,volumeSeries=series.chart.get(volumeSeriesID),yValVolume=volumeSeries?.getColumn("y"),yValLen=yVal?yVal.length:0,AD=[],xData=[],yData=[];let len,i,ADPoint;if(xVal.length<=period&&yValLen&&yVal[0].length!==4){return}if(!volumeSeries){error("Series "+volumeSeriesID+" not found! Check `volumeSeriesID`.",true,series.chart);return}for(i=period;i<yValLen;i++){len=AD.length;ADPoint=ADIndicator.populateAverage(xVal,yVal,yValVolume,i,period);if(len>0){ADPoint[1]+=AD[len-1][1]}AD.push(ADPoint);xData.push(ADPoint[0]);yData.push(ADPoint[1])}return{values:AD,xData:xData,yData:yData}}}ADIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,volumeSeriesID:"volume"}});extend(ADIndicator.prototype,{nameComponents:false,nameBase:"Accumulation/Distribution"});SeriesRegistry.registerSeriesType("ad",ADIndicator);export default ADIndicator;"";