"use strict";import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{correctFloat,extend,merge}=U;class KeltnerChannelsIndicator extends SMAIndicator{init(){SeriesRegistry.seriesTypes.sma.prototype.init.apply(this,arguments);this.options=merge({topLine:{styles:{lineColor:this.color}},bottomLine:{styles:{lineColor:this.color}}},this.options)}getValues(series,params){const period=params.period,periodATR=params.periodATR,multiplierATR=params.multiplierATR,index=params.index,yVal=series.yData,yValLen=yVal?yVal.length:0,KC=[],seriesEMA=SeriesRegistry.seriesTypes.ema.prototype.getValues(series,{period:period,index:index}),seriesATR=SeriesRegistry.seriesTypes.atr.prototype.getValues(series,{period:periodATR}),xData=[],yData=[];let ML,TL,BL,date,pointEMA,pointATR,i;if(yValLen<period){return}for(i=period;i<=yValLen;i++){pointEMA=seriesEMA.values[i-period];pointATR=seriesATR.values[i-periodATR];date=pointEMA[0];TL=correctFloat(pointEMA[1]+multiplierATR*pointATR[1]);BL=correctFloat(pointEMA[1]-multiplierATR*pointATR[1]);ML=pointEMA[1];KC.push([date,TL,ML,BL]);xData.push(date);yData.push([TL,ML,BL])}return{values:KC,xData:xData,yData:yData}}}KeltnerChannelsIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:0,period:20,periodATR:10,multiplierATR:2},bottomLine:{styles:{lineWidth:1,lineColor:void 0}},topLine:{styles:{lineWidth:1,lineColor:void 0}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>'},marker:{enabled:false},dataGrouping:{approximation:"averages"},lineWidth:1});extend(KeltnerChannelsIndicator.prototype,{nameBase:"Keltner Channels",areaLinesNames:["top","bottom"],nameComponents:["period","periodATR","multiplierATR"],linesApiNames:["topLine","bottomLine"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"});MultipleLinesComposition.compose(KeltnerChannelsIndicator);SeriesRegistry.registerSeriesType("keltnerchannels",KeltnerChannelsIndicator);export default KeltnerChannelsIndicator;"";