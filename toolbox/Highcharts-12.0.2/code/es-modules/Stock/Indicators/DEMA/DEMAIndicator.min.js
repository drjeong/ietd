"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{ema:EMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{correctFloat,isArray,merge}=U;class DEMAIndicator extends EMAIndicator{getEMA(yVal,prevEMA,SMA,index,i,xVal){return super.calculateEma(xVal||[],yVal,typeof i==="undefined"?1:i,this.EMApercent,prevEMA,typeof index==="undefined"?-1:index,SMA)}getValues(series,params){const period=params.period,EMAvalues=[],doubledPeriod=2*period,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,DEMA=[],xDataDema=[],yDataDema=[];let accumulatePeriodPoints=0,EMA=0,EMAlevel2,prevEMA,prevEMAlevel2,i,index=-1,DEMAPoint,SMA=0;this.EMApercent=2/(period+1);if(yValLen<2*period-1){return}if(isArray(yVal[0])){index=params.index?params.index:0}accumulatePeriodPoints=super.accumulatePeriodPoints(period,index,yVal);SMA=accumulatePeriodPoints/period;accumulatePeriodPoints=0;for(i=period;i<yValLen+2;i++){if(i<yValLen+1){EMA=this.getEMA(yVal,prevEMA,SMA,index,i)[1];EMAvalues.push(EMA)}prevEMA=EMA;if(i<doubledPeriod){accumulatePeriodPoints+=EMA}else{if(i===doubledPeriod){SMA=accumulatePeriodPoints/period}EMA=EMAvalues[i-period-1];EMAlevel2=this.getEMA([EMA],prevEMAlevel2,SMA)[1];DEMAPoint=[xVal[i-2],correctFloat(2*EMA-EMAlevel2)];DEMA.push(DEMAPoint);xDataDema.push(DEMAPoint[0]);yDataDema.push(DEMAPoint[1]);prevEMAlevel2=EMAlevel2}}return{values:DEMA,xData:xDataDema,yData:yDataDema}}}DEMAIndicator.defaultOptions=merge(EMAIndicator.defaultOptions);SeriesRegistry.registerSeriesType("dema",DEMAIndicator);export default DEMAIndicator;"";