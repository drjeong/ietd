"use strict";import VBPPoint from"./VBPPoint.js";import A from"../../../Core/Animation/AnimationUtilities.js";const{animObject}=A;import H from"../../../Core/Globals.js";const{noop}=H;import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{column:{prototype:columnProto},sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{addEvent,arrayMax,arrayMin,correctFloat,defined,error,extend,isArray,merge}=U;const abs=Math.abs;function arrayExtremesOHLC(data){const dataLength=data.length;let min=data[0][3],max=min,i=1,currentPoint;for(;i<dataLength;i++){currentPoint=data[i][3];if(currentPoint<min){min=currentPoint}if(currentPoint>max){max=currentPoint}}return{min:min,max:max}}class VBPIndicator extends SMAIndicator{init(chart,options){const indicator=this;delete options.data;super.init.apply(indicator,arguments);const unbinder=addEvent(this.chart.constructor,"afterLinkSeries",function(){if(indicator.options){const params=indicator.options.params,baseSeries=indicator.linkedParent,volumeSeries=chart.get(params.volumeSeriesID);indicator.addCustomEvents(baseSeries,volumeSeries)}unbinder()},{order:1});return indicator}addCustomEvents(baseSeries,volumeSeries){const indicator=this,toEmptyIndicator=()=>{indicator.chart.redraw();indicator.setData([]);indicator.zoneStarts=[];if(indicator.zoneLinesSVG){indicator.zoneLinesSVG=indicator.zoneLinesSVG.destroy()}};indicator.dataEventsToUnbind.push(addEvent(baseSeries,"remove",function(){toEmptyIndicator()}));if(volumeSeries){indicator.dataEventsToUnbind.push(addEvent(volumeSeries,"remove",function(){toEmptyIndicator()}))}return indicator}animate(init){const series=this,inverted=series.chart.inverted,group=series.group,attr={};if(!init&&group){const position=inverted?series.yAxis.top:series.xAxis.left;if(inverted){group["forceAnimate:translateY"]=true;attr.translateY=position}else{group["forceAnimate:translateX"]=true;attr.translateX=position}group.animate(attr,extend(animObject(series.options.animation),{step:function(val,fx){series.group.attr({scaleX:Math.max(.001,fx.pos)})}}))}}drawPoints(){const indicator=this;if(indicator.options.volumeDivision.enabled){indicator.posNegVolume(true,true);columnProto.drawPoints.apply(indicator,arguments);indicator.posNegVolume(false,false)}columnProto.drawPoints.apply(indicator,arguments)}posNegVolume(initVol,pos){const indicator=this,signOrder=pos?["positive","negative"]:["negative","positive"],volumeDivision=indicator.options.volumeDivision,pointLength=indicator.points.length;let posWidths=[],negWidths=[],i=0,pointWidth,priceZone,wholeVol,point;if(initVol){indicator.posWidths=posWidths;indicator.negWidths=negWidths}else{posWidths=indicator.posWidths;negWidths=indicator.negWidths}for(;i<pointLength;i++){point=indicator.points[i];point[signOrder[0]+"Graphic"]=point.graphic;point.graphic=point[signOrder[1]+"Graphic"];if(initVol){pointWidth=point.shapeArgs.width;priceZone=indicator.priceZones[i];wholeVol=priceZone.wholeVolumeData;if(wholeVol){posWidths.push(pointWidth/wholeVol*priceZone.positiveVolumeData);negWidths.push(pointWidth/wholeVol*priceZone.negativeVolumeData)}else{posWidths.push(0);negWidths.push(0)}}point.color=pos?volumeDivision.styles.positiveColor:volumeDivision.styles.negativeColor;point.shapeArgs.width=pos?indicator.posWidths[i]:indicator.negWidths[i];point.shapeArgs.x=pos?point.shapeArgs.x:indicator.posWidths[i]}}translate(){const indicator=this,options=indicator.options,chart=indicator.chart,yAxis=indicator.yAxis,yAxisMin=yAxis.min,zoneLinesOptions=indicator.options.zoneLines,priceZones=indicator.priceZones;let yBarOffset=0,volumeDataArray,maxVolume,primalBarWidth,barHeight,barHeightP,oldBarHeight,barWidth,pointPadding,chartPlotTop,barX,barY;columnProto.translate.apply(indicator);const indicatorPoints=indicator.points;if(indicatorPoints.length){pointPadding=options.pointPadding<.5?options.pointPadding:.1;volumeDataArray=indicator.volumeDataArray;maxVolume=arrayMax(volumeDataArray);primalBarWidth=chart.plotWidth/2;chartPlotTop=chart.plotTop;barHeight=abs(yAxis.toPixels(yAxisMin)-yAxis.toPixels(yAxisMin+indicator.rangeStep));oldBarHeight=abs(yAxis.toPixels(yAxisMin)-yAxis.toPixels(yAxisMin+indicator.rangeStep));if(pointPadding){barHeightP=abs(barHeight*(1-2*pointPadding));yBarOffset=abs((barHeight-barHeightP)/2);barHeight=abs(barHeightP)}indicatorPoints.forEach(function(point,index){barX=point.barX=point.plotX=0;barY=point.plotY=yAxis.toPixels(priceZones[index].start)-chartPlotTop-(yAxis.reversed?barHeight-oldBarHeight:barHeight)-yBarOffset;barWidth=correctFloat(primalBarWidth*priceZones[index].wholeVolumeData/maxVolume);point.pointWidth=barWidth;point.shapeArgs=indicator.crispCol.apply(indicator,[barX,barY,barWidth,barHeight]);point.volumeNeg=priceZones[index].negativeVolumeData;point.volumePos=priceZones[index].positiveVolumeData;point.volumeAll=priceZones[index].wholeVolumeData});if(zoneLinesOptions.enabled){indicator.drawZones(chart,yAxis,indicator.zoneStarts,zoneLinesOptions.styles)}}}getExtremes(){const prevCompare=this.options.compare,prevCumulative=this.options.cumulative;let ret;if(this.options.compare){this.options.compare=void 0;ret=super.getExtremes();this.options.compare=prevCompare}else if(this.options.cumulative){this.options.cumulative=false;ret=super.getExtremes();this.options.cumulative=prevCumulative}else{ret=super.getExtremes()}return ret}getValues(series,params){const indicator=this,xValues=series.getColumn("x",true),yValues=series.processedYData,chart=indicator.chart,ranges=params.ranges,VBP=[],xData=[],yData=[],volumeSeries=chart.get(params.volumeSeriesID);if(!series.chart){error("Base series not found! In case it has been removed, add "+"a new one.",true,chart);return}if(!volumeSeries||!volumeSeries.getColumn("x",true).length){const errorMessage=volumeSeries&&!volumeSeries.getColumn("x",true).length?" does not contain any data.":" not found! Check `volumeSeriesID`.";error("Series "+params.volumeSeriesID+errorMessage,true,chart);return}const isOHLC=isArray(yValues[0]);if(isOHLC&&yValues[0].length!==4){error("Type of "+series.name+" series is different than line, OHLC or candlestick.",true,chart);return}const priceZones=indicator.priceZones=indicator.specifyZones(isOHLC,xValues,yValues,ranges,volumeSeries);priceZones.forEach(function(zone,index){VBP.push([zone.x,zone.end]);xData.push(VBP[index][0]);yData.push(VBP[index][1])});return{values:VBP,xData:xData,yData:yData}}specifyZones(isOHLC,xValues,yValues,ranges,volumeSeries){const indicator=this,rangeExtremes=isOHLC?arrayExtremesOHLC(yValues):false,zoneStarts=indicator.zoneStarts=[],priceZones=[];let lowRange=rangeExtremes?rangeExtremes.min:arrayMin(yValues),highRange=rangeExtremes?rangeExtremes.max:arrayMax(yValues),i=0,j=1;const mainSeries=indicator.linkedParent;if(!indicator.options.compareToMain&&mainSeries.dataModify){lowRange=mainSeries.dataModify.modifyValue(lowRange);highRange=mainSeries.dataModify.modifyValue(highRange)}if(!defined(lowRange)||!defined(highRange)){if(this.points.length){this.setData([]);this.zoneStarts=[];if(this.zoneLinesSVG){this.zoneLinesSVG=this.zoneLinesSVG.destroy()}}return[]}const rangeStep=indicator.rangeStep=correctFloat(highRange-lowRange)/ranges;zoneStarts.push(lowRange);for(;i<ranges-1;i++){zoneStarts.push(correctFloat(zoneStarts[i]+rangeStep))}zoneStarts.push(highRange);const zoneStartsLength=zoneStarts.length;for(;j<zoneStartsLength;j++){priceZones.push({index:j-1,x:xValues[0],start:zoneStarts[j-1],end:zoneStarts[j]})}return indicator.volumePerZone(isOHLC,priceZones,volumeSeries,xValues,yValues)}volumePerZone(isOHLC,priceZones,volumeSeries,xValues,yValues){const indicator=this,volumeXData=volumeSeries.getColumn("x",true),volumeYData=volumeSeries.getColumn("y",true),lastZoneIndex=priceZones.length-1,baseSeriesLength=yValues.length,volumeSeriesLength=volumeYData.length;let previousValue,startFlag,endFlag,value,i;if(abs(baseSeriesLength-volumeSeriesLength)){if(xValues[0]!==volumeXData[0]){volumeYData.unshift(0)}if(xValues[baseSeriesLength-1]!==volumeXData[volumeSeriesLength-1]){volumeYData.push(0)}}indicator.volumeDataArray=[];priceZones.forEach(function(zone){zone.wholeVolumeData=0;zone.positiveVolumeData=0;zone.negativeVolumeData=0;for(i=0;i<baseSeriesLength;i++){startFlag=false;endFlag=false;value=isOHLC?yValues[i][3]:yValues[i];previousValue=i?isOHLC?yValues[i-1][3]:yValues[i-1]:value;const mainSeries=indicator.linkedParent;if(!indicator.options.compareToMain&&mainSeries.dataModify){value=mainSeries.dataModify.modifyValue(value);previousValue=mainSeries.dataModify.modifyValue(previousValue)}if(value<=zone.start&&zone.index===0){startFlag=true}if(value>=zone.end&&zone.index===lastZoneIndex){endFlag=true}if((value>zone.start||startFlag)&&(value<zone.end||endFlag)){zone.wholeVolumeData+=volumeYData[i];if(previousValue>value){zone.negativeVolumeData+=volumeYData[i]}else{zone.positiveVolumeData+=volumeYData[i]}}}indicator.volumeDataArray.push(zone.wholeVolumeData)});return priceZones}drawZones(chart,yAxis,zonesValues,zonesStyles){const indicator=this,renderer=chart.renderer,leftLinePos=0,rightLinePos=chart.plotWidth,verticalOffset=chart.plotTop;let zoneLinesSVG=indicator.zoneLinesSVG,zoneLinesPath=[],verticalLinePos;zonesValues.forEach(function(value){verticalLinePos=yAxis.toPixels(value)-verticalOffset;zoneLinesPath=zoneLinesPath.concat(chart.renderer.crispLine([["M",leftLinePos,verticalLinePos],["L",rightLinePos,verticalLinePos]],zonesStyles.lineWidth))});if(zoneLinesSVG){zoneLinesSVG.animate({d:zoneLinesPath})}else{zoneLinesSVG=indicator.zoneLinesSVG=renderer.path(zoneLinesPath).attr({"stroke-width":zonesStyles.lineWidth,stroke:zonesStyles.color,dashstyle:zonesStyles.dashStyle,zIndex:indicator.group.zIndex+.1}).add(indicator.group)}}}VBPIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:void 0,ranges:12,volumeSeriesID:"volume"},zoneLines:{enabled:true,styles:{color:"#0A9AC9",dashStyle:"LongDash",lineWidth:1}},volumeDivision:{enabled:true,styles:{positiveColor:"rgba(144, 237, 125, 0.8)",negativeColor:"rgba(244, 91, 91, 0.8)"}},animationLimit:1e3,enableMouseTracking:false,pointPadding:0,zIndex:-1,crisp:true,dataGrouping:{enabled:false},dataLabels:{allowOverlap:true,enabled:true,format:"P: {point.volumePos:.2f} | N: {point.volumeNeg:.2f}",padding:0,style:{fontSize:"0.5em"},verticalAlign:"top"}});extend(VBPIndicator.prototype,{nameBase:"Volume by Price",nameComponents:["ranges"],calculateOn:{chart:"render",xAxis:"afterSetExtremes"},pointClass:VBPPoint,markerAttribs:noop,drawGraph:noop,getColumnMetrics:columnProto.getColumnMetrics,crispCol:columnProto.crispCol});SeriesRegistry.registerSeriesType("vbp",VBPIndicator);export default VBPIndicator;"";