"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{error,isArray,merge}=U;class VWAPIndicator extends SMAIndicator{getValues(series,params){const indicator=this,chart=series.chart,xValues=series.xData,yValues=series.yData,period=params.period;let isOHLC=true,volumeSeries;if(!(volumeSeries=chart.get(params.volumeSeriesID))){error("Series "+params.volumeSeriesID+" not found! Check `volumeSeriesID`.",true,chart);return}if(!isArray(yValues[0])){isOHLC=false}return indicator.calculateVWAPValues(isOHLC,xValues,yValues,volumeSeries,period)}calculateVWAPValues(isOHLC,xValues,yValues,volumeSeries,period){const volumeValues=volumeSeries.getColumn("y"),volumeLength=volumeValues.length,pointsLength=xValues.length,cumulativePrice=[],cumulativeVolume=[],xData=[],yData=[],VWAP=[];let commonLength,typicalPrice,cPrice,cVolume,i,j;if(pointsLength<=volumeLength){commonLength=pointsLength}else{commonLength=volumeLength}for(i=0,j=0;i<commonLength;i++){typicalPrice=isOHLC?(yValues[i][1]+yValues[i][2]+yValues[i][3])/3:yValues[i];typicalPrice*=volumeValues[i];cPrice=j?cumulativePrice[i-1]+typicalPrice:typicalPrice;cVolume=j?cumulativeVolume[i-1]+volumeValues[i]:volumeValues[i];cumulativePrice.push(cPrice);cumulativeVolume.push(cVolume);VWAP.push([xValues[i],cPrice/cVolume]);xData.push(VWAP[i][0]);yData.push(VWAP[i][1]);j++;if(j===period){j=0}}return{values:VWAP,xData:xData,yData:yData}}}VWAPIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:30,volumeSeriesID:"volume"}});SeriesRegistry.registerSeriesType("vwap",VWAPIndicator);export default VWAPIndicator;"";