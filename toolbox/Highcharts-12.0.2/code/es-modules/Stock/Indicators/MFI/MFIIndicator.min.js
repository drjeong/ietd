"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{extend,merge,error,isArray}=U;function sumArray(array){return array.reduce(function(prev,cur){return prev+cur})}function toFixed(a,n){return parseFloat(a.toFixed(n))}function calculateTypicalPrice(point){return(point[1]+point[2]+point[3])/3}function calculateRawMoneyFlow(typicalPrice,volume){return typicalPrice*volume}class MFIIndicator extends SMAIndicator{getValues(series,params){const period=params.period,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,decimals=params.decimals,volumeSeries=series.chart.get(params.volumeSeriesID),yValVolume=volumeSeries?.getColumn("y")||[],MFI=[],xData=[],yData=[],positiveMoneyFlow=[],negativeMoneyFlow=[];let newTypicalPrice,oldTypicalPrice,rawMoneyFlow,negativeMoneyFlowSum,positiveMoneyFlowSum,moneyFlowRatio,MFIPoint,i,isUp=false,range=1;if(!volumeSeries){error("Series "+params.volumeSeriesID+" not found! Check `volumeSeriesID`.",true,series.chart);return}if(xVal.length<=period||!isArray(yVal[0])||yVal[0].length!==4||!yValVolume){return}newTypicalPrice=calculateTypicalPrice(yVal[range]);while(range<period+1){oldTypicalPrice=newTypicalPrice;newTypicalPrice=calculateTypicalPrice(yVal[range]);isUp=newTypicalPrice>=oldTypicalPrice;rawMoneyFlow=calculateRawMoneyFlow(newTypicalPrice,yValVolume[range]);positiveMoneyFlow.push(isUp?rawMoneyFlow:0);negativeMoneyFlow.push(isUp?0:rawMoneyFlow);range++}for(i=range-1;i<yValLen;i++){if(i>range-1){positiveMoneyFlow.shift();negativeMoneyFlow.shift();oldTypicalPrice=newTypicalPrice;newTypicalPrice=calculateTypicalPrice(yVal[i]);isUp=newTypicalPrice>oldTypicalPrice;rawMoneyFlow=calculateRawMoneyFlow(newTypicalPrice,yValVolume[i]);positiveMoneyFlow.push(isUp?rawMoneyFlow:0);negativeMoneyFlow.push(isUp?0:rawMoneyFlow)}negativeMoneyFlowSum=sumArray(negativeMoneyFlow);positiveMoneyFlowSum=sumArray(positiveMoneyFlow);moneyFlowRatio=positiveMoneyFlowSum/negativeMoneyFlowSum;MFIPoint=toFixed(100-100/(1+moneyFlowRatio),decimals);MFI.push([xVal[i],MFIPoint]);xData.push(xVal[i]);yData.push(MFIPoint)}return{values:MFI,xData:xData,yData:yData}}}MFIIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,volumeSeriesID:"volume",decimals:4}});extend(MFIIndicator.prototype,{nameBase:"Money Flow Index"});SeriesRegistry.registerSeriesType("mfi",MFIIndicator);export default MFIIndicator;"";