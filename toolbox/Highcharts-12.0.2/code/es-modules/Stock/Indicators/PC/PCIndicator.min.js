"use strict";import AU from"../ArrayUtilities.js";import MultipleLinesComposition from"../MultipleLinesComposition.js";import Palettes from"../../../Core/Color/Palettes.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{merge,extend}=U;class PCIndicator extends SMAIndicator{getValues(series,params){const period=params.period,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,PC=[],low=2,high=1,xData=[],yData=[];let ML,TL,BL,date,slicedY,extremes,i;if(yValLen<period){return}for(i=period;i<=yValLen;i++){date=xVal[i-1];slicedY=yVal.slice(i-period,i);extremes=AU.getArrayExtremes(slicedY,low,high);TL=extremes[1];BL=extremes[0];ML=(TL+BL)/2;PC.push([date,TL,ML,BL]);xData.push(date);yData.push([TL,ML,BL])}return{values:PC,xData:xData,yData:yData}}}PCIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:20},lineWidth:1,topLine:{styles:{lineColor:Palettes.colors[2],lineWidth:1}},bottomLine:{styles:{lineColor:Palettes.colors[8],lineWidth:1}},dataGrouping:{approximation:"averages"}});extend(PCIndicator.prototype,{areaLinesNames:["top","bottom"],nameBase:"Price Channel",nameComponents:["period"],linesApiNames:["topLine","bottomLine"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"});MultipleLinesComposition.compose(PCIndicator);SeriesRegistry.registerSeriesType("pc",PCIndicator);export default PCIndicator;"";