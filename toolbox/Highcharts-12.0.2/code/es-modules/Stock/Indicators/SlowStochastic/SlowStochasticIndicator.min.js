"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator,stochastic:StochasticIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{extend,merge}=U;class SlowStochasticIndicator extends StochasticIndicator{getValues(series,params){const periods=params.periods,fastValues=super.getValues.call(this,series,params),slowValues={values:[],xData:[],yData:[]};if(!fastValues){return}slowValues.xData=fastValues.xData.slice(periods[1]-1);const fastYData=fastValues.yData.slice(periods[1]-1);const smoothedValues=SMAIndicator.prototype.getValues.call(this,{xData:slowValues.xData,yData:fastYData},{index:1,period:periods[2]});if(!smoothedValues){return}for(let i=0,xDataLen=slowValues.xData.length;i<xDataLen;i++){slowValues.yData[i]=[fastYData[i][1],smoothedValues.yData[i-periods[2]+1]||null];slowValues.values[i]=[slowValues.xData[i],fastYData[i][1],smoothedValues.yData[i-periods[2]+1]||null]}return slowValues}}SlowStochasticIndicator.defaultOptions=merge(StochasticIndicator.defaultOptions,{params:{periods:[14,3,3]}});extend(SlowStochasticIndicator.prototype,{nameBase:"Slow Stochastic"});SeriesRegistry.registerSeriesType("slowstochastic",SlowStochasticIndicator);export default SlowStochasticIndicator;"";