"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{correctFloat,defined,extend,isArray,merge}=U;class DisparityIndexIndicator extends SMAIndicator{init(){const args=arguments,ctx=this,params=args[1].params,averageType=params&&params.average?params.average:void 0;ctx.averageIndicator=SeriesRegistry.seriesTypes[averageType]||SMAIndicator;ctx.averageIndicator.prototype.init.apply(ctx,args)}calculateDisparityIndex(curPrice,periodAverage){return correctFloat(curPrice-periodAverage)/periodAverage*100}getValues(series,params){const index=params.index,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,disparityIndexPoint=[],xData=[],yData=[],averageIndicator=this.averageIndicator,isOHLC=isArray(yVal[0]),values=averageIndicator.prototype.getValues(series,params),yValues=values.yData,start=xVal.indexOf(values.xData[0]);if(!yValues||yValues.length===0||!defined(index)||yVal.length<=start){return}for(let i=start;i<yValLen;i++){const disparityIndexValue=this.calculateDisparityIndex(isOHLC?yVal[i][index]:yVal[i],yValues[i-start]);disparityIndexPoint.push([xVal[i],disparityIndexValue]);xData.push(xVal[i]);yData.push(disparityIndexValue)}return{values:disparityIndexPoint,xData:xData,yData:yData}}}DisparityIndexIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{average:"sma",index:3},marker:{enabled:false},dataGrouping:{approximation:"averages"}});extend(DisparityIndexIndicator.prototype,{nameBase:"Disparity Index",nameComponents:["period","average"]});SeriesRegistry.registerSeriesType("disparityindex",DisparityIndexIndicator);export default DisparityIndexIndicator;"";