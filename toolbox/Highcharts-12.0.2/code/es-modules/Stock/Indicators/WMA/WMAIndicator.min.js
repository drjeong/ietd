"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{isArray,merge}=U;function accumulateAverage(points,xVal,yVal,i,index){const xValue=xVal[i],yValue=index<0?yVal[i]:yVal[i][index];points.push([xValue,yValue])}function weightedSumArray(array,pLen){const denominator=(pLen+1)/2*pLen;return array.reduce(function(prev,cur,i){return[null,prev[1]+cur[1]*(i+1)]})[1]/denominator}function populateAverage(points,xVal,yVal,i){const pLen=points.length,wmaY=weightedSumArray(points,pLen),wmaX=xVal[i-1];points.shift();return[wmaX,wmaY]}class WMAIndicator extends SMAIndicator{getValues(series,params){const period=params.period,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,xValue=xVal[0],wma=[],xData=[],yData=[];let range=1,index=-1,i,wmaPoint,yValue=yVal[0];if(xVal.length<period){return}if(isArray(yVal[0])){index=params.index;yValue=yVal[0][index]}const points=[[xValue,yValue]];while(range!==period){accumulateAverage(points,xVal,yVal,range,index);range++}for(i=range;i<yValLen;i++){wmaPoint=populateAverage(points,xVal,yVal,i);wma.push(wmaPoint);xData.push(wmaPoint[0]);yData.push(wmaPoint[1]);accumulateAverage(points,xVal,yVal,i,index)}wmaPoint=populateAverage(points,xVal,yVal,i);wma.push(wmaPoint);xData.push(wmaPoint[0]);yData.push(wmaPoint[1]);return{values:wma,xData:xData,yData:yData}}}WMAIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:3,period:9}});SeriesRegistry.registerSeriesType("wma",WMAIndicator);export default WMAIndicator;"";