"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{sma:{prototype:smaProto}}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{defined,error,merge}=U;var MultipleLinesComposition;(function(MultipleLinesComposition){const linesApiNames=["bottomLine"];const pointArrayMap=["top","bottom"];const areaLinesNames=["top"];const pointValKey="top";function compose(IndicatorClass){const proto=IndicatorClass.prototype;proto.linesApiNames=proto.linesApiNames||linesApiNames.slice();proto.pointArrayMap=proto.pointArrayMap||pointArrayMap.slice();proto.pointValKey=proto.pointValKey||pointValKey;proto.areaLinesNames=proto.areaLinesNames||areaLinesNames.slice();proto.drawGraph=indicatorDrawGraph;proto.getGraphPath=indicatorGetGraphPath;proto.toYData=indicatorToYData;proto.translate=indicatorTranslate;return IndicatorClass}MultipleLinesComposition.compose=compose;function getLineName(propertyName){return"plot"+propertyName.charAt(0).toUpperCase()+propertyName.slice(1)}function getTranslatedLinesNames(indicator,excludedValue){const translatedLines=[];(indicator.pointArrayMap||[]).forEach(propertyName=>{if(propertyName!==excludedValue){translatedLines.push(getLineName(propertyName))}});return translatedLines}function indicatorDrawGraph(){const indicator=this,pointValKey=indicator.pointValKey,linesApiNames=indicator.linesApiNames,areaLinesNames=indicator.areaLinesNames,mainLinePoints=indicator.points,mainLineOptions=indicator.options,mainLinePath=indicator.graph,gappedExtend={options:{gapSize:mainLineOptions.gapSize}},secondaryLines=[],secondaryLinesNames=getTranslatedLinesNames(indicator,pointValKey);let pointsLength=mainLinePoints.length,point;secondaryLinesNames.forEach((plotLine,index)=>{secondaryLines[index]=[];while(pointsLength--){point=mainLinePoints[pointsLength];secondaryLines[index].push({x:point.x,plotX:point.plotX,plotY:point[plotLine],isNull:!defined(point[plotLine])})}pointsLength=mainLinePoints.length});if(indicator.userOptions.fillColor&&areaLinesNames.length){const index=secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])),secondLinePoints=secondaryLines[index],firstLinePoints=areaLinesNames.length===1?mainLinePoints:secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))],originalColor=indicator.color;indicator.points=firstLinePoints;indicator.nextPoints=secondLinePoints;indicator.color=indicator.userOptions.fillColor;indicator.options=merge(mainLinePoints,gappedExtend);indicator.graph=indicator.area;indicator.fillGraph=true;smaProto.drawGraph.call(indicator);indicator.area=indicator.graph;delete indicator.nextPoints;delete indicator.fillGraph;indicator.color=originalColor}linesApiNames.forEach((lineName,i)=>{if(secondaryLines[i]){indicator.points=secondaryLines[i];if(mainLineOptions[lineName]){indicator.options=merge(mainLineOptions[lineName].styles,gappedExtend)}else{error('Error: "There is no '+lineName+" in DOCS options declared. Check if linesApiNames"+' are consistent with your DOCS line names."')}indicator.graph=indicator["graph"+lineName];smaProto.drawGraph.call(indicator);indicator["graph"+lineName]=indicator.graph}else{error('Error: "'+lineName+" doesn't have equivalent "+"in pointArrayMap. To many elements in linesApiNames "+'relative to pointArrayMap."')}});indicator.points=mainLinePoints;indicator.options=mainLineOptions;indicator.graph=mainLinePath;smaProto.drawGraph.call(indicator)}function indicatorGetGraphPath(points){let areaPath,path=[],higherAreaPath=[];points=points||this.points;if(this.fillGraph&&this.nextPoints){areaPath=smaProto.getGraphPath.call(this,this.nextPoints);if(areaPath&&areaPath.length){areaPath[0][0]="L";path=smaProto.getGraphPath.call(this,points);higherAreaPath=areaPath.slice(0,path.length);for(let i=higherAreaPath.length-1;i>=0;i--){path.push(higherAreaPath[i])}}}else{path=smaProto.getGraphPath.apply(this,arguments)}return path}function indicatorToYData(point){const pointColl=[];(this.pointArrayMap||[]).forEach(propertyName=>{pointColl.push(point[propertyName])});return pointColl}function indicatorTranslate(){const pointArrayMap=this.pointArrayMap;let LinesNames=[],value;LinesNames=getTranslatedLinesNames(this);smaProto.translate.apply(this,arguments);this.points.forEach(point=>{pointArrayMap.forEach((propertyName,i)=>{value=point[propertyName];if(this.dataModify){value=this.dataModify.modifyValue(value)}if(value!==null){point[LinesNames[i]]=this.yAxis.toPixels(value,true)}})})}})(MultipleLinesComposition||(MultipleLinesComposition={}));export default MultipleLinesComposition;