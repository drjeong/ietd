"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{extend,merge,isArray}=U;class TrendLineIndicator extends SMAIndicator{constructor(){super(...arguments);this.updateAllPoints=true}getValues(series,params){const orgXVal=series.xData,yVal=series.yData,xVal=[],LR=[],xData=[],yData=[],index=params.index;let numerator=0,denominator=0,xValSum=0,yValSum=0,counter=0;for(let i=0;i<orgXVal.length;i++){if(i===0||orgXVal[i]!==orgXVal[i-1]){counter++}xVal.push(counter)}for(let i=0;i<xVal.length;i++){xValSum+=xVal[i];yValSum+=isArray(yVal[i])?yVal[i][index]:yVal[i]}const meanX=xValSum/xVal.length,meanY=yValSum/yVal.length;for(let i=0;i<xVal.length;i++){const y=isArray(yVal[i])?yVal[i][index]:yVal[i];numerator+=(xVal[i]-meanX)*(y-meanY);denominator+=Math.pow(xVal[i]-meanX,2)}for(let i=0;i<xVal.length;i++){if(orgXVal[i]===xData[xData.length-1]){continue}const x=orgXVal[i],y=meanY+numerator/denominator*(xVal[i]-meanX);LR.push([x,y]);xData.push(x);yData.push(y)}return{xData:xData,yData:yData,values:LR}}}TrendLineIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{period:void 0,index:3}});extend(TrendLineIndicator.prototype,{nameBase:"Trendline",nameComponents:void 0});SeriesRegistry.registerSeriesType("trendline",TrendLineIndicator);export default TrendLineIndicator;"";