"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{isArray,merge}=U;function accumulateAverage(points,xVal,yVal,i){const xValue=xVal[i],yValue=yVal[i];points.push([xValue,yValue])}function getTR(currentPoint,prevPoint){const pointY=currentPoint,prevY=prevPoint,HL=pointY[1]-pointY[2],HCp=typeof prevY==="undefined"?0:Math.abs(pointY[1]-prevY[3]),LCp=typeof prevY==="undefined"?0:Math.abs(pointY[2]-prevY[3]),TR=Math.max(HL,HCp,LCp);return TR}function populateAverage(points,xVal,yVal,i,period,prevATR){const x=xVal[i-1],TR=getTR(yVal[i-1],yVal[i-2]),y=(prevATR*(period-1)+TR)/period;return[x,y]}class ATRIndicator extends SMAIndicator{getValues(series,params){const period=params.period,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,xValue=xVal[0],yValue=yVal[0],points=[[xValue,yValue]],ATR=[],xData=[],yData=[];let point,i,prevATR=0,range=1,TR=0;if(xVal.length<=period||!isArray(yVal[0])||yVal[0].length!==4){return}for(i=1;i<=yValLen;i++){accumulateAverage(points,xVal,yVal,i);if(period<range){point=populateAverage(points,xVal,yVal,i,period,prevATR);prevATR=point[1];ATR.push(point);xData.push(point[0]);yData.push(point[1])}else if(period===range){prevATR=TR/(i-1);ATR.push([xVal[i-1],prevATR]);xData.push(xVal[i-1]);yData.push(prevATR);range++}else{TR+=getTR(yVal[i-1],yVal[i-2]);range++}}return{values:ATR,xData:xData,yData:yData}}}ATRIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0}});SeriesRegistry.registerSeriesType("atr",ATRIndicator);export default ATRIndicator;"";