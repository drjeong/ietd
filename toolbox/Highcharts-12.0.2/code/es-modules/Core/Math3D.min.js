"use strict";import H from"./Globals.js";const{deg2rad}=H;import U from"./Utilities.js";const{pick}=U;function rotate3D(x,y,z,angles){return{x:angles.cosB*x-angles.sinB*z,y:-angles.sinA*angles.sinB*x+angles.cosA*y-angles.cosB*angles.sinA*z,z:angles.cosA*angles.sinB*x+angles.sinA*y+angles.cosA*angles.cosB*z}}function perspective(points,chart,insidePlotArea,useInvertedPersp){const options3d=chart.options.chart.options3d,inverted=pick(useInvertedPersp,insidePlotArea?chart.inverted:false),origin={x:chart.plotWidth/2,y:chart.plotHeight/2,z:options3d.depth/2,vd:pick(options3d.depth,1)*pick(options3d.viewDistance,0)},scale=chart.scale3d||1,beta=deg2rad*options3d.beta*(inverted?-1:1),alpha=deg2rad*options3d.alpha*(inverted?-1:1),angles={cosA:Math.cos(alpha),cosB:Math.cos(-beta),sinA:Math.sin(alpha),sinB:Math.sin(-beta)};if(!insidePlotArea){origin.x+=chart.plotLeft;origin.y+=chart.plotTop}return points.map(function(point){const rotated=rotate3D((inverted?point.y:point.x)-origin.x,(inverted?point.x:point.y)-origin.y,(point.z||0)-origin.z,angles),coordinate=perspective3D(rotated,origin,origin.vd);coordinate.x=coordinate.x*scale+origin.x;coordinate.y=coordinate.y*scale+origin.y;coordinate.z=rotated.z*scale+origin.z;return{x:inverted?coordinate.y:coordinate.x,y:inverted?coordinate.x:coordinate.y,z:coordinate.z}})}function perspective3D(coordinate,origin,distance){const projection=distance>0&&distance<Number.POSITIVE_INFINITY?distance/(coordinate.z+origin.z+distance):1;return{x:coordinate.x*projection,y:coordinate.y*projection}}function pointCameraDistance(coordinates,chart){const options3d=chart.options.chart.options3d,cameraPosition={x:chart.plotWidth/2,y:chart.plotHeight/2,z:pick(options3d.depth,1)*pick(options3d.viewDistance,0)+options3d.depth},distance=Math.sqrt(Math.pow(cameraPosition.x-pick(coordinates.plotX,coordinates.x),2)+Math.pow(cameraPosition.y-pick(coordinates.plotY,coordinates.y),2)+Math.pow(cameraPosition.z-pick(coordinates.plotZ,coordinates.z),2));return distance}function shapeArea(vertexes){let area=0,i,j;for(i=0;i<vertexes.length;i++){j=(i+1)%vertexes.length;area+=vertexes[i].x*vertexes[j].y-vertexes[j].x*vertexes[i].y}return area/2}function shapeArea3D(vertexes,chart,insidePlotArea){return shapeArea(perspective(vertexes,chart,insidePlotArea))}const Math3D={perspective:perspective,perspective3D:perspective3D,pointCameraDistance:pointCameraDistance,shapeArea:shapeArea,shapeArea3D:shapeArea3D};export default Math3D;