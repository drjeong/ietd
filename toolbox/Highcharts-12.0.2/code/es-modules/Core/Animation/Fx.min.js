"use strict";import Color from"../Color/Color.js";const{parse:color}=Color;import H from"../Globals.js";const{win}=H;import U from"../Utilities.js";const{isNumber,objectEach}=U;class Fx{constructor(elem,options,prop){this.pos=NaN;this.options=options;this.elem=elem;this.prop=prop}dSetter(){const paths=this.paths,start=paths&&paths[0],end=paths&&paths[1],now=this.now||0;let path=[];if(now===1||!start||!end){path=this.toD||[]}else if(start.length===end.length&&now<1){for(let i=0;i<end.length;i++){const startSeg=start[i];const endSeg=end[i];const tweenSeg=[];for(let j=0;j<endSeg.length;j++){const startItem=startSeg[j];const endItem=endSeg[j];if(isNumber(startItem)&&isNumber(endItem)&&!(endSeg[0]==="A"&&(j===4||j===5))){tweenSeg[j]=startItem+now*(endItem-startItem)}else{tweenSeg[j]=endItem}}path.push(tweenSeg)}}else{path=end}this.elem.attr("d",path,void 0,true)}update(){const elem=this.elem,prop=this.prop,now=this.now,step=this.options.step;if(this[prop+"Setter"]){this[prop+"Setter"]()}else if(elem.attr){if(elem.element){elem.attr(prop,now,null,true)}}else{elem.style[prop]=now+this.unit}if(step){step.call(elem,now,this)}}run(from,to,unit){const self=this,options=self.options,timer=function(gotoEnd){return timer.stopped?false:self.step(gotoEnd)},requestAnimationFrame=win.requestAnimationFrame||function(step){setTimeout(step,13)},step=function(){for(let i=0;i<Fx.timers.length;i++){if(!Fx.timers[i]()){Fx.timers.splice(i--,1)}}if(Fx.timers.length){requestAnimationFrame(step)}};if(from===to&&!this.elem["forceAnimate:"+this.prop]){delete options.curAnim[this.prop];if(options.complete&&Object.keys(options.curAnim).length===0){options.complete.call(this.elem)}}else{this.startTime=+new Date;this.start=from;this.end=to;this.unit=unit;this.now=this.start;this.pos=0;timer.elem=this.elem;timer.prop=this.prop;if(timer()&&Fx.timers.push(timer)===1){requestAnimationFrame(step)}}}step(gotoEnd){const t=+new Date,options=this.options,elem=this.elem,complete=options.complete,duration=options.duration,curAnim=options.curAnim;let ret,done;if(!!elem.attr&&!elem.element){ret=false}else if(gotoEnd||t>=duration+this.startTime){this.now=this.end;this.pos=1;this.update();curAnim[this.prop]=true;done=true;objectEach(curAnim,function(val){if(val!==true){done=false}});if(done&&complete){complete.call(elem)}ret=false}else{this.pos=options.easing((t-this.startTime)/duration);this.now=this.start+(this.end-this.start)*this.pos;this.update();ret=true}return ret}initPath(elem,fromD,toD){const startX=elem.startX,endX=elem.endX,end=toD.slice(),isArea=elem.isArea,positionFactor=isArea?2:1,disableAnimation=fromD&&toD.length>fromD.length&&toD.hasStackedCliffs;let shift,fullLength,i,reverse,start=fromD&&fromD.slice();if(!start||disableAnimation){return[end,end]}function prepend(arr,other){while(arr.length<fullLength){const moveSegment=arr[0],otherSegment=other[fullLength-arr.length];if(otherSegment&&moveSegment[0]==="M"){if(otherSegment[0]==="C"){arr[0]=["C",moveSegment[1],moveSegment[2],moveSegment[1],moveSegment[2],moveSegment[1],moveSegment[2]]}else{arr[0]=["L",moveSegment[1],moveSegment[2]]}}arr.unshift(moveSegment);if(isArea){const z=arr.pop();arr.push(arr[arr.length-1],z)}}}function append(arr){while(arr.length<fullLength){const segmentToAdd=arr[Math.floor(arr.length/positionFactor)-1].slice();if(segmentToAdd[0]==="C"){segmentToAdd[1]=segmentToAdd[5];segmentToAdd[2]=segmentToAdd[6]}if(!isArea){arr.push(segmentToAdd)}else{const lowerSegmentToAdd=arr[Math.floor(arr.length/positionFactor)].slice();arr.splice(arr.length/2,0,segmentToAdd,lowerSegmentToAdd)}}}if(startX&&endX&&endX.length){for(i=0;i<startX.length;i++){if(startX[i]===endX[0]){shift=i;break}else if(startX[0]===endX[endX.length-startX.length+i]){shift=i;reverse=true;break}else if(startX[startX.length-1]===endX[endX.length-startX.length+i]){shift=startX.length-i;break}}if(typeof shift==="undefined"){start=[]}}if(start.length&&isNumber(shift)){fullLength=end.length+shift*positionFactor;if(!reverse){prepend(end,start);append(start)}else{prepend(start,end);append(end)}}return[start,end]}fillSetter(){Fx.prototype.strokeSetter.apply(this,arguments)}strokeSetter(){this.elem.attr(this.prop,color(this.start).tweenTo(color(this.end),this.pos),void 0,true)}}Fx.timers=[];export default Fx;