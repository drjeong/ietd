"use strict";import D from"./Defaults.js";const{defaultOptions,defaultTime}=D;import G from"./Globals.js";const{doc}=G;import U from"./Utilities.js";const{extend,getNestedProperty,isArray,isNumber,isObject,pick,ucfirst}=U;const helpers={add:(a,b)=>a+b,divide:(a,b)=>b!==0?a/b:"",eq:(a,b)=>a==b,each:function(arr){const match=arguments[arguments.length-1];return isArray(arr)?arr.map((item,i)=>format(match.body,extend(isObject(item)?item:{"@this":item},{"@index":i,"@first":i===0,"@last":i===arr.length-1}))).join(""):false},ge:(a,b)=>a>=b,gt:(a,b)=>a>b,if:condition=>!!condition,le:(a,b)=>a<=b,lt:(a,b)=>a<b,multiply:(a,b)=>a*b,ne:(a,b)=>a!=b,subtract:(a,b)=>a-b,ucfirst:ucfirst,unless:condition=>!condition};const numberFormatCache={};function dateFormat(format,timestamp,upperCaseFirst){return defaultTime.dateFormat(format,timestamp,upperCaseFirst)}function format(str="",ctx,chart){const regex=/\{([\p{L}\d:\.,;\-\/<>\[\]%_@"'â€™= #\(\)]+)\}/gu,subRegex=/\(([\p{L}\d:\.,;\-\/<>\[\]%_@"'= ]+)\)/gu,matches=[],floatRegex=/f$/,decRegex=/\.(\d)/,lang=chart?.options.lang||defaultOptions.lang,time=chart&&chart.time||defaultTime,numberFormatter=chart&&chart.numberFormatter||numberFormat;const resolveProperty=(key="")=>{let n;if(key==="true"){return true}if(key==="false"){return false}if((n=Number(key)).toString()===key){return n}if(/^["'].+["']$/.test(key)){return key.slice(1,-1)}return getNestedProperty(key,ctx)};let match,currentMatch,depth=0,hasSub;while((match=regex.exec(str))!==null){const mainMatch=match,subMatch=subRegex.exec(match[1]);if(subMatch){match=subMatch;hasSub=true}if(!currentMatch||!currentMatch.isBlock){currentMatch={ctx:ctx,expression:match[1],find:match[0],isBlock:match[1].charAt(0)==="#",start:match.index,startInner:match.index+match[0].length,length:match[0].length}}const fn=(currentMatch.isBlock?mainMatch:match)[1].split(" ")[0].replace("#","");if(helpers[fn]){if(currentMatch.isBlock&&fn===currentMatch.fn){depth++}if(!currentMatch.fn){currentMatch.fn=fn}}const startingElseSection=match[1]==="else";if(currentMatch.isBlock&&currentMatch.fn&&(match[1]===`/${currentMatch.fn}`||startingElseSection)){if(!depth){const start=currentMatch.startInner,body=str.substr(start,match.index-start);if(currentMatch.body===void 0){currentMatch.body=body;currentMatch.startInner=match.index+match[0].length}else{currentMatch.elseBody=body}currentMatch.find+=body+match[0];if(!startingElseSection){matches.push(currentMatch);currentMatch=void 0}}else if(!startingElseSection){depth--}}else if(!currentMatch.isBlock){matches.push(currentMatch)}if(subMatch&&!currentMatch?.isBlock){break}}matches.forEach(match=>{const{body,elseBody,expression,fn}=match;let replacement,i;if(fn){const args=[match],parts=[],len=expression.length;let start=0,startChar;for(i=0;i<=len;i++){const char=expression.charAt(i);if(!startChar&&(char==='"'||char==="'")){startChar=char}else if(startChar===char){startChar=""}if(!startChar&&(char===" "||i===len)){parts.push(expression.substr(start,i-start));start=i+1}}i=helpers[fn].length;while(i--){args.unshift(resolveProperty(parts[i+1]))}replacement=helpers[fn].apply(ctx,args);if(match.isBlock&&typeof replacement==="boolean"){replacement=format(replacement?body:elseBody,ctx,chart)}}else{const valueAndFormat=expression.split(":");replacement=resolveProperty(valueAndFormat.shift()||"");if(valueAndFormat.length&&typeof replacement==="number"){const segment=valueAndFormat.join(":");if(floatRegex.test(segment)){const decimals=parseInt((segment.match(decRegex)||["","-1"])[1],10);if(replacement!==null){replacement=numberFormatter(replacement,decimals,lang.decimalPoint,segment.indexOf(",")>-1?lang.thousandsSep:"")}}else{replacement=time.dateFormat(segment,replacement);if(hasSub){replacement=`"${replacement}"`}}}}str=str.replace(match.find,pick(replacement,""))});return hasSub?format(str,ctx,chart):str}function numberFormat(number,decimals,decimalPoint,thousandsSep){number=+number||0;decimals=+decimals;let ret,fractionDigits,[mantissa,exp]=number.toString().split("e").map(Number);const lang=this?.options?.lang||defaultOptions.lang,origDec=(number.toString().split(".")[1]||"").split("e")[0].length,firstDecimals=decimals,options={};decimalPoint??(decimalPoint=lang.decimalPoint);thousandsSep??(thousandsSep=lang.thousandsSep);if(decimals===-1){decimals=Math.min(origDec,20)}else if(!isNumber(decimals)){decimals=2}else if(decimals&&exp<0){fractionDigits=decimals+exp;if(fractionDigits>=0){mantissa=+mantissa.toExponential(fractionDigits).split("e")[0];decimals=fractionDigits}else{mantissa=Math.floor(mantissa);if(decimals<20){number=+(mantissa*Math.pow(10,exp)).toFixed(decimals)}else{number=0}exp=0}}if(exp){decimals??(decimals=2);number=mantissa}if(isNumber(decimals)&&decimals>=0){options.minimumFractionDigits=decimals;options.maximumFractionDigits=decimals}if(thousandsSep===""){options.useGrouping=false}const hasSeparators=thousandsSep||decimalPoint,locale=hasSeparators?"en":this?.locale||lang.locale||doc.body.closest("[lang]")?.lang,cacheKey=JSON.stringify(options)+locale,nf=numberFormatCache[cacheKey]??(numberFormatCache[cacheKey]=new Intl.NumberFormat(locale,options));ret=nf.format(number);if(hasSeparators){ret=ret.replace(/\,/g,thousandsSep??",").replace(".",decimalPoint??".")}if(!decimals&&+ret===0||exp<0&&!firstDecimals){ret="0"}if(exp&&+ret!==0){ret+="e"+(exp<0?"":"+")+exp}return ret}const Templating={dateFormat:dateFormat,format:format,helpers:helpers,numberFormat:numberFormat};export default Templating;