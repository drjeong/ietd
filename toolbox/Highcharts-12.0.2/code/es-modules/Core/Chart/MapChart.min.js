"use strict";import Chart from"./Chart.js";import D from"../Defaults.js";const{getOptions}=D;import SVGRenderer from"../Renderer/SVG/SVGRenderer.js";import U from"../Utilities.js";const{isNumber,merge,pick}=U;import"../../Maps/MapSymbols.js";class MapChart extends Chart{init(userOptions,callback){const defaultCreditsOptions=getOptions().credits;const options=merge({chart:{panning:{enabled:true,type:"xy"},type:"map"},credits:{mapText:pick(defaultCreditsOptions.mapText,' Â© <a href="{geojson.copyrightUrl}">'+"{geojson.copyrightShort}</a>"),mapTextFull:pick(defaultCreditsOptions.mapTextFull,"{geojson.copyright}")},mapView:{},tooltip:{followTouchMove:false}},userOptions);super.init(options,callback)}mapZoom(howMuch,xProjected,yProjected,chartX,chartY){if(this.mapView){if(isNumber(howMuch)){howMuch=Math.log(howMuch)/Math.log(.5)}this.mapView.zoomBy(howMuch,isNumber(xProjected)&&isNumber(yProjected)?this.mapView.projection.inverse([xProjected,yProjected]):void 0,isNumber(chartX)&&isNumber(chartY)?[chartX,chartY]:void 0)}}update(options){if(options.chart&&"map"in options.chart){this.mapView?.recommendMapView(this,[options.chart.map,...(this.options.series||[]).map(s=>s.mapData)],true)}super.update.apply(this,arguments)}}(function(MapChart){MapChart.maps={};function mapChart(a,b,c){return new MapChart(a,b,c)}MapChart.mapChart=mapChart;function splitPath(path){let arr;if(typeof path==="string"){path=path.replace(/([A-Z])/gi," $1 ").replace(/^\s*/,"").replace(/\s*$/,"");const split=path.split(/[ ,;]+/);arr=split.map(item=>{if(!/[A-Z]/i.test(item)){return parseFloat(item)}return item})}else{arr=path}return SVGRenderer.prototype.pathToSegments(arr)}MapChart.splitPath=splitPath})(MapChart||(MapChart={}));export default MapChart;