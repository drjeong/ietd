"use strict";import PlotLineOrBandAxis from"./PlotLineOrBandAxis.js";import U from"../../Utilities.js";const{addEvent,arrayMax,arrayMin,defined,destroyObjectProperties,erase,fireEvent,merge,objectEach,pick}=U;class PlotLineOrBand{static compose(ChartClass,AxisClass){addEvent(ChartClass,"afterInit",function(){this.labelCollectors.push(()=>{const labels=[];for(const axis of this.axes){for(const{label,options}of axis.plotLinesAndBands){if(label&&!options?.label?.allowOverlap){labels.push(label)}}}return labels})});return PlotLineOrBandAxis.compose(PlotLineOrBand,AxisClass)}constructor(axis,options){this.axis=axis;this.options=options;this.id=options.id}render(){fireEvent(this,"render");const{axis,options}=this,{horiz,logarithmic}=axis,{color,events,zIndex=0}=options,{renderer,time}=axis.chart,groupAttribs={},to=time.parse(options.to),from=time.parse(options.from),value=time.parse(options.value),borderWidth=options.borderWidth;let optionsLabel=options.label,{label,svgElem}=this,path=[],group;const isBand=defined(from)&&defined(to),isLine=defined(value),isNew=!svgElem,attribs={class:"highcharts-plot-"+(isBand?"band ":"line ")+(options.className||"")};let groupName=isBand?"bands":"lines";if(!axis.chart.styledMode){if(isLine){attribs.stroke=color||"#999999";attribs["stroke-width"]=pick(options.width,1);if(options.dashStyle){attribs.dashstyle=options.dashStyle}}else if(isBand){attribs.fill=color||"#e6e9ff";if(borderWidth){attribs.stroke=options.borderColor;attribs["stroke-width"]=borderWidth}}}groupAttribs.zIndex=zIndex;groupName+="-"+zIndex;group=axis.plotLinesAndBandsGroups[groupName];if(!group){axis.plotLinesAndBandsGroups[groupName]=group=renderer.g("plot-"+groupName).attr(groupAttribs).add()}if(!svgElem){this.svgElem=svgElem=renderer.path().attr(attribs).add(group)}if(defined(value)){path=axis.getPlotLinePath({value:logarithmic?.log2lin(value)??value,lineWidth:svgElem.strokeWidth(),acrossPanes:options.acrossPanes})}else if(defined(from)&&defined(to)){path=axis.getPlotBandPath(logarithmic?.log2lin(from)??from,logarithmic?.log2lin(to)??to,options)}else{return}if(!this.eventsAdded&&events){objectEach(events,(event,eventType)=>{svgElem?.on(eventType,e=>{events[eventType].apply(this,[e])})});this.eventsAdded=true}if((isNew||!svgElem.d)&&path?.length){svgElem.attr({d:path})}else if(svgElem){if(path){svgElem.show();svgElem.animate({d:path})}else if(svgElem.d){svgElem.hide();if(label){this.label=label=label.destroy()}}}if(optionsLabel&&(defined(optionsLabel.text)||defined(optionsLabel.formatter))&&path?.length&&axis.width>0&&axis.height>0&&!path.isFlat){optionsLabel=merge({align:horiz&&isBand?"center":void 0,x:horiz?!isBand&&4:10,verticalAlign:!horiz&&isBand?"middle":void 0,y:horiz?isBand?16:10:isBand?6:-4,rotation:horiz&&!isBand?90:0,...isBand?{inside:true}:{}},optionsLabel);this.renderLabel(optionsLabel,path,isBand,zIndex)}else if(label){label.hide()}return this}renderLabel(optionsLabel,path,isBand,zIndex){const plotLine=this,axis=plotLine.axis,renderer=axis.chart.renderer,inside=optionsLabel.inside;let label=plotLine.label;if(!label){plotLine.label=label=renderer.text(this.getLabelText(optionsLabel),0,0,optionsLabel.useHTML).attr({align:optionsLabel.textAlign||optionsLabel.align,rotation:optionsLabel.rotation,class:"highcharts-plot-"+(isBand?"band":"line")+"-label "+(optionsLabel.className||""),zIndex:zIndex});if(!axis.chart.styledMode){label.css(merge({fontSize:"0.8em",textOverflow:isBand&&!inside?"":"ellipsis"},optionsLabel.style))}label.add()}const xBounds=path.xBounds||[path[0][1],path[1][1],isBand?path[2][1]:path[0][1]],yBounds=path.yBounds||[path[0][2],path[1][2],isBand?path[2][2]:path[0][2]],x=arrayMin(xBounds),y=arrayMin(yBounds),bBoxWidth=arrayMax(xBounds)-x;label.align(optionsLabel,false,{x:x,y:y,width:bBoxWidth,height:arrayMax(yBounds)-y});if(!label.alignValue||label.alignValue==="left"||defined(inside)){label.css({width:(optionsLabel.style?.width||(!isBand||!inside?label.rotation===90?axis.height-(label.alignAttr.y-axis.top):(optionsLabel.clip?axis.width:axis.chart.chartWidth)-(label.alignAttr.x-axis.left):bBoxWidth))+"px"})}label.show(true)}getLabelText(optionsLabel){return defined(optionsLabel.formatter)?optionsLabel.formatter.call(this):optionsLabel.text}destroy(){erase(this.axis.plotLinesAndBands,this);delete this.axis;destroyObjectProperties(this)}}export default PlotLineOrBand;"";"";