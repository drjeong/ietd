"use strict";import U from"../Utilities.js";const{addEvent,normalizeTickInterval,pick}=U;var LogarithmicAxis;(function(LogarithmicAxis){function compose(AxisClass){if(!AxisClass.keepProps.includes("logarithmic")){AxisClass.keepProps.push("logarithmic");addEvent(AxisClass,"afterSetType",onAfterSetType);addEvent(AxisClass,"afterInit",onAfterInit)}return AxisClass}LogarithmicAxis.compose=compose;function onAfterSetType(){if(this.type!=="logarithmic"){this.logarithmic=void 0}else{this.logarithmic??(this.logarithmic=new Additions(this))}}function onAfterInit(){const axis=this;const log=axis.logarithmic;if(log){axis.lin2val=function(num){return log.lin2log(num)};axis.val2lin=function(num){return log.log2lin(num)}}}class Additions{constructor(axis){this.axis=axis}getLogTickPositions(interval,min,max,minor){const log=this;const axis=log.axis;const axisLength=axis.len;const options=axis.options;let positions=[];if(!minor){log.minorAutoInterval=void 0}if(interval>=.5){interval=Math.round(interval);positions=axis.getLinearTickPositions(interval,min,max)}else if(interval>=.08){const roundedMin=Math.floor(min);let intermediate,i,j,len,pos,lastPos,break2;if(interval>.3){intermediate=[1,2,4]}else if(interval>.15){intermediate=[1,2,4,6,8]}else{intermediate=[1,2,3,4,5,6,7,8,9]}for(i=roundedMin;i<max+1&&!break2;i++){len=intermediate.length;for(j=0;j<len&&!break2;j++){pos=log.log2lin(log.lin2log(i)*intermediate[j]);if(pos>min&&(!minor||lastPos<=max)&&typeof lastPos!=="undefined"){positions.push(lastPos)}if(lastPos>max){break2=true}lastPos=pos}}}else{const realMin=log.lin2log(min),realMax=log.lin2log(max),tickIntervalOption=minor?axis.getMinorTickInterval():options.tickInterval,filteredTickIntervalOption=tickIntervalOption==="auto"?null:tickIntervalOption,tickPixelIntervalOption=options.tickPixelInterval/(minor?5:1),totalPixelLength=minor?axisLength/axis.tickPositions.length:axisLength;interval=pick(filteredTickIntervalOption,log.minorAutoInterval,(realMax-realMin)*tickPixelIntervalOption/(totalPixelLength||1));interval=normalizeTickInterval(interval);positions=axis.getLinearTickPositions(interval,realMin,realMax).map(log.log2lin);if(!minor){log.minorAutoInterval=interval/5}}if(!minor){axis.tickInterval=interval}return positions}lin2log(num){return Math.pow(10,num)}log2lin(num){return Math.log(num)/Math.LN10}}LogarithmicAxis.Additions=Additions})(LogarithmicAxis||(LogarithmicAxis={}));export default LogarithmicAxis;