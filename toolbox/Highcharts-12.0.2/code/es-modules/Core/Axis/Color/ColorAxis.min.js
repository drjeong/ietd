"use strict";import Axis from"../Axis.js";import ColorAxisComposition from"./ColorAxisComposition.js";import ColorAxisDefaults from"./ColorAxisDefaults.js";import ColorAxisLike from"./ColorAxisLike.js";import D from"../../Defaults.js";const{defaultOptions}=D;import LegendSymbol from"../../Legend/LegendSymbol.js";import SeriesRegistry from"../../Series/SeriesRegistry.js";const{series:Series}=SeriesRegistry;import U from"../../Utilities.js";const{defined,extend,fireEvent,isArray,isNumber,merge,pick,relativeLength}=U;defaultOptions.colorAxis=merge(defaultOptions.xAxis,ColorAxisDefaults);class ColorAxis extends Axis{static compose(ChartClass,FxClass,LegendClass,SeriesClass){ColorAxisComposition.compose(ColorAxis,ChartClass,FxClass,LegendClass,SeriesClass)}constructor(chart,userOptions){super(chart,userOptions);this.coll="colorAxis";this.visible=true;this.init(chart,userOptions)}init(chart,userOptions){const axis=this;const legend=chart.options.legend||{},horiz=userOptions.layout?userOptions.layout!=="vertical":legend.layout!=="vertical";axis.side=userOptions.side||horiz?2:1;axis.reversed=userOptions.reversed||!horiz;axis.opposite=!horiz;super.init(chart,userOptions,"colorAxis");this.userOptions=userOptions;if(isArray(chart.userOptions.colorAxis)){chart.userOptions.colorAxis[this.index]=userOptions}if(userOptions.dataClasses){axis.initDataClasses(userOptions)}axis.initStops();axis.horiz=horiz;axis.zoomEnabled=false}hasData(){return!!(this.tickPositions||[]).length}setTickPositions(){if(!this.dataClasses){return super.setTickPositions()}}setOptions(userOptions){const options=merge(defaultOptions.colorAxis,userOptions,{showEmpty:false,title:null,visible:this.chart.options.legend.enabled&&userOptions.visible!==false});super.setOptions(options);this.options.crosshair=this.options.marker}setAxisSize(){const axis=this,chart=axis.chart,symbol=axis.legendItem?.symbol;let{width,height}=axis.getSize();if(symbol){this.left=+symbol.attr("x");this.top=+symbol.attr("y");this.width=width=+symbol.attr("width");this.height=height=+symbol.attr("height");this.right=chart.chartWidth-this.left-width;this.bottom=chart.chartHeight-this.top-height;this.pos=this.horiz?this.left:this.top}this.len=(this.horiz?width:height)||ColorAxis.defaultLegendLength}getOffset(){const axis=this;const group=axis.legendItem?.group;const sideOffset=axis.chart.axisOffset[axis.side];if(group){axis.axisParent=group;super.getOffset();const legend=this.chart.legend;legend.allItems.forEach(function(item){if(item instanceof ColorAxis){item.drawLegendSymbol(legend,item)}});legend.render();this.chart.getMargins(true);if(!this.chart.series.some(series=>series.isDrilling)){axis.isDirty=true}if(!axis.added){axis.added=true;axis.labelLeft=0;axis.labelRight=axis.width}axis.chart.axisOffset[axis.side]=sideOffset}}setLegendColor(){const axis=this;const horiz=axis.horiz;const reversed=axis.reversed;const one=reversed?1:0;const zero=reversed?0:1;const grad=horiz?[one,0,zero,0]:[0,zero,0,one];axis.legendColor={linearGradient:{x1:grad[0],y1:grad[1],x2:grad[2],y2:grad[3]},stops:axis.stops}}drawLegendSymbol(legend,item){const axis=this,legendItem=item.legendItem||{},padding=legend.padding,legendOptions=legend.options,labelOptions=axis.options.labels,itemDistance=pick(legendOptions.itemDistance,10),horiz=axis.horiz,{width,height}=axis.getSize(),labelPadding=pick(legendOptions.labelPadding,horiz?16:30);this.setLegendColor();if(!legendItem.symbol){legendItem.symbol=this.chart.renderer.symbol("roundedRect").attr({r:legendOptions.symbolRadius??3,zIndex:1}).add(legendItem.group)}legendItem.symbol.attr({x:0,y:(legend.baseline||0)-11,width:width,height:height});legendItem.labelWidth=width+padding+(horiz?itemDistance:pick(labelOptions.x,labelOptions.distance)+(this.maxLabelLength||0));legendItem.labelHeight=height+padding+(horiz?labelPadding:0)}setState(state){this.series.forEach(function(series){series.setState(state)})}setVisible(){}getSeriesExtremes(){const axis=this;const series=axis.series;let colorValArray,colorKey,calculatedExtremes,cSeries,i=series.length;this.dataMin=Infinity;this.dataMax=-Infinity;while(i--){cSeries=series[i];colorKey=cSeries.colorKey=pick(cSeries.options.colorKey,cSeries.colorKey,cSeries.pointValKey,cSeries.zoneAxis,"y");calculatedExtremes=cSeries[colorKey+"Min"]&&cSeries[colorKey+"Max"];for(const key of[colorKey,"value","y"]){colorValArray=cSeries.getColumn(key);if(colorValArray.length){break}}if(calculatedExtremes){cSeries.minColorValue=cSeries[colorKey+"Min"];cSeries.maxColorValue=cSeries[colorKey+"Max"]}else{const cExtremes=Series.prototype.getExtremes.call(cSeries,colorValArray);cSeries.minColorValue=cExtremes.dataMin;cSeries.maxColorValue=cExtremes.dataMax}if(defined(cSeries.minColorValue)&&defined(cSeries.maxColorValue)){this.dataMin=Math.min(this.dataMin,cSeries.minColorValue);this.dataMax=Math.max(this.dataMax,cSeries.maxColorValue)}if(!calculatedExtremes){Series.prototype.applyExtremes.call(cSeries)}}}drawCrosshair(e,point){const axis=this,legendItem=axis.legendItem||{},plotX=point&&point.plotX,plotY=point&&point.plotY,axisPos=axis.pos,axisLen=axis.len;let crossPos;if(point){crossPos=axis.toPixels(point.getNestedProperty(point.series.colorKey));if(crossPos<axisPos){crossPos=axisPos-2}else if(crossPos>axisPos+axisLen){crossPos=axisPos+axisLen+2}point.plotX=crossPos;point.plotY=axis.len-crossPos;super.drawCrosshair(e,point);point.plotX=plotX;point.plotY=plotY;if(axis.cross&&!axis.cross.addedToColorAxis&&legendItem.group){axis.cross.addClass("highcharts-coloraxis-marker").add(legendItem.group);axis.cross.addedToColorAxis=true;if(!axis.chart.styledMode&&typeof axis.crosshair==="object"){axis.cross.attr({fill:axis.crosshair.color})}}}}getPlotLinePath(options){const axis=this,left=axis.left,pos=options.translatedValue,top=axis.top;return isNumber(pos)?axis.horiz?[["M",pos-4,top-6],["L",pos+4,top-6],["L",pos,top],["Z"]]:[["M",left,pos],["L",left-6,pos+6],["L",left-6,pos-6],["Z"]]:super.getPlotLinePath(options)}update(newOptions,redraw){const axis=this,chart=axis.chart,legend=chart.legend;this.series.forEach(series=>{series.isDirtyData=true});if(newOptions.dataClasses&&legend.allItems||axis.dataClasses){axis.destroyItems()}super.update(newOptions,redraw);if(axis.legendItem&&axis.legendItem.label){axis.setLegendColor();legend.colorizeItem(this,true)}}destroyItems(){const axis=this,chart=axis.chart,legendItem=axis.legendItem||{};if(legendItem.label){chart.legend.destroyItem(axis)}else if(legendItem.labels){for(const item of legendItem.labels){chart.legend.destroyItem(item)}}chart.isDirtyLegend=true}destroy(){this.chart.isDirtyLegend=true;this.destroyItems();super.destroy(...[].slice.call(arguments))}remove(redraw){this.destroyItems();super.remove(redraw)}getDataClassLegendSymbols(){const axis=this,chart=axis.chart,legendItems=axis.legendItem&&axis.legendItem.labels||[],legendOptions=chart.options.legend,valueDecimals=pick(legendOptions.valueDecimals,-1),valueSuffix=pick(legendOptions.valueSuffix,"");const getPointsInDataClass=i=>axis.series.reduce((points,s)=>{points.push(...s.points.filter(point=>point.dataClass===i));return points},[]);let name;if(!legendItems.length){axis.dataClasses.forEach((dataClass,i)=>{const from=dataClass.from,to=dataClass.to,{numberFormatter}=chart;let vis=true;name="";if(typeof from==="undefined"){name="< "}else if(typeof to==="undefined"){name="> "}if(typeof from!=="undefined"){name+=numberFormatter(from,valueDecimals)+valueSuffix}if(typeof from!=="undefined"&&typeof to!=="undefined"){name+=" - "}if(typeof to!=="undefined"){name+=numberFormatter(to,valueDecimals)+valueSuffix}legendItems.push(extend({chart:chart,name:name,options:{},drawLegendSymbol:LegendSymbol.rectangle,visible:true,isDataClass:true,setState:state=>{for(const point of getPointsInDataClass(i)){point.setState(state)}},setVisible:function(){this.visible=vis=axis.visible=!vis;const affectedSeries=[];for(const point of getPointsInDataClass(i)){point.setVisible(vis);point.hiddenInDataClass=!vis;if(affectedSeries.indexOf(point.series)===-1){affectedSeries.push(point.series)}}chart.legend.colorizeItem(this,vis);affectedSeries.forEach(series=>{fireEvent(series,"afterDataClassLegendClick")})}},dataClass))})}return legendItems}getSize(){const axis=this,{chart,horiz}=axis,{height:colorAxisHeight,width:colorAxisWidth}=axis.options,{legend:legendOptions}=chart.options,width=pick(defined(colorAxisWidth)?relativeLength(colorAxisWidth,chart.chartWidth):void 0,legendOptions?.symbolWidth,horiz?ColorAxis.defaultLegendLength:12),height=pick(defined(colorAxisHeight)?relativeLength(colorAxisHeight,chart.chartHeight):void 0,legendOptions?.symbolHeight,horiz?12:ColorAxis.defaultLegendLength);return{width:width,height:height}}}ColorAxis.defaultLegendLength=200;ColorAxis.keepProps=["legendItem"];extend(ColorAxis.prototype,ColorAxisLike);Array.prototype.push.apply(Axis.keepProps,ColorAxis.keepProps);export default ColorAxis;"";