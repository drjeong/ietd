"use strict";import U from"../Utilities.js";const{addEvent,getMagnitude,normalizeTickInterval,timeUnits}=U;var DateTimeAxis;(function(DateTimeAxis){function compose(AxisClass){if(!AxisClass.keepProps.includes("dateTime")){AxisClass.keepProps.push("dateTime");const axisProto=AxisClass.prototype;axisProto.getTimeTicks=getTimeTicks;addEvent(AxisClass,"afterSetType",onAfterSetType)}return AxisClass}DateTimeAxis.compose=compose;function getTimeTicks(){return this.chart.time.getTimeTicks.apply(this.chart.time,arguments)}function onAfterSetType(){if(this.type!=="datetime"){this.dateTime=void 0;return}if(!this.dateTime){this.dateTime=new Additions(this)}}class Additions{constructor(axis){this.axis=axis}normalizeTimeTickInterval(tickInterval,unitsOption){const units=unitsOption||[["millisecond",[1,2,5,10,20,25,50,100,200,500]],["second",[1,2,5,10,15,30]],["minute",[1,2,5,10,15,30]],["hour",[1,2,3,4,6,8,12]],["day",[1,2]],["week",[1,2]],["month",[1,2,3,4,6]],["year",null]];let unit=units[units.length-1],interval=timeUnits[unit[0]],multiples=unit[1],i;for(i=0;i<units.length;i++){unit=units[i];interval=timeUnits[unit[0]];multiples=unit[1];if(units[i+1]){const lessThan=(interval*multiples[multiples.length-1]+timeUnits[units[i+1][0]])/2;if(tickInterval<=lessThan){break}}}if(interval===timeUnits.year&&tickInterval<5*interval){multiples=[1,2,5]}const count=normalizeTickInterval(tickInterval/interval,multiples,unit[0]==="year"?Math.max(getMagnitude(tickInterval/interval),1):1);return{unitRange:interval,count:count,unitName:unit[0]}}getXDateFormat(x,dateTimeLabelFormats){const{axis}=this,time=axis.chart.time;return axis.closestPointRange?time.getDateFormat(axis.closestPointRange,x,axis.options.startOfWeek,dateTimeLabelFormats)||time.resolveDTLFormat(dateTimeLabelFormats.year).main:time.resolveDTLFormat(dateTimeLabelFormats.day).main}}DateTimeAxis.Additions=Additions})(DateTimeAxis||(DateTimeAxis={}));export default DateTimeAxis;