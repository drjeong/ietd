"use strict";import H from"../../Globals.js";const{SVG_NS,win}=H;import U from"../../Utilities.js";const{attr,createElement,css,error,isFunction,isString,objectEach,splat}=U;const{trustedTypes}=win;const trustedTypesPolicy=trustedTypes&&isFunction(trustedTypes.createPolicy)&&trustedTypes.createPolicy("highcharts",{createHTML:s=>s});const emptyHTML=trustedTypesPolicy?trustedTypesPolicy.createHTML(""):"";class AST{static filterUserAttributes(attributes){objectEach(attributes,(val,key)=>{let valid=true;if(AST.allowedAttributes.indexOf(key)===-1){valid=false}if(["background","dynsrc","href","lowsrc","src"].indexOf(key)!==-1){valid=isString(val)&&AST.allowedReferences.some(ref=>val.indexOf(ref)===0)}if(!valid){error(33,false,void 0,{"Invalid attribute in config":`${key}`});delete attributes[key]}if(isString(val)&&attributes[key]){attributes[key]=val.replace(/</g,"&lt;")}});return attributes}static parseStyle(style){return style.split(";").reduce((styles,line)=>{const pair=line.split(":").map(s=>s.trim()),key=pair.shift();if(key&&pair.length){styles[key.replace(/-([a-z])/g,g=>g[1].toUpperCase())]=pair.join(":")}return styles},{})}static setElementHTML(el,html){el.innerHTML=AST.emptyHTML;if(html){const ast=new AST(html);ast.addToDOM(el)}}constructor(source){this.nodes=typeof source==="string"?this.parseMarkup(source):source}addToDOM(parent){function recurse(subtree,subParent){let ret;splat(subtree).forEach(function(item){const tagName=item.tagName;const textNode=item.textContent?H.doc.createTextNode(item.textContent):void 0;const bypassHTMLFiltering=AST.bypassHTMLFiltering;let node;if(tagName){if(tagName==="#text"){node=textNode}else if(AST.allowedTags.indexOf(tagName)!==-1||bypassHTMLFiltering){const NS=tagName==="svg"?SVG_NS:subParent.namespaceURI||SVG_NS;const element=H.doc.createElementNS(NS,tagName);const attributes=item.attributes||{};objectEach(item,function(val,key){if(key!=="tagName"&&key!=="attributes"&&key!=="children"&&key!=="style"&&key!=="textContent"){attributes[key]=val}});attr(element,bypassHTMLFiltering?attributes:AST.filterUserAttributes(attributes));if(item.style){css(element,item.style)}if(textNode){element.appendChild(textNode)}recurse(item.children||[],element);node=element}else{error(33,false,void 0,{"Invalid tagName in config":tagName})}}if(node){subParent.appendChild(node)}ret=node});return ret}return recurse(this.nodes,parent)}parseMarkup(markup){const nodes=[];markup=markup.trim().replace(/ style=(["'])/g," data-style=$1");let doc;try{doc=(new DOMParser).parseFromString(trustedTypesPolicy?trustedTypesPolicy.createHTML(markup):markup,"text/html")}catch(e){}if(!doc){const body=createElement("div");body.innerHTML=markup;doc={body:body}}const appendChildNodes=(node,addTo)=>{const tagName=node.nodeName.toLowerCase();const astNode={tagName:tagName};if(tagName==="#text"){astNode.textContent=node.textContent||""}const parsedAttributes=node.attributes;if(parsedAttributes){const attributes={};[].forEach.call(parsedAttributes,attrib=>{if(attrib.name==="data-style"){astNode.style=AST.parseStyle(attrib.value)}else{attributes[attrib.name]=attrib.value}});astNode.attributes=attributes}if(node.childNodes.length){const children=[];[].forEach.call(node.childNodes,childNode=>{appendChildNodes(childNode,children)});if(children.length){astNode.children=children}}addTo.push(astNode)};[].forEach.call(doc.body.childNodes,childNode=>appendChildNodes(childNode,nodes));return nodes}}AST.allowedAttributes=["alt","aria-controls","aria-describedby","aria-expanded","aria-haspopup","aria-hidden","aria-label","aria-labelledby","aria-live","aria-pressed","aria-readonly","aria-roledescription","aria-selected","class","clip-path","color","colspan","cx","cy","d","dx","dy","disabled","fill","filterUnits","flood-color","flood-opacity","height","href","id","in","in2","markerHeight","markerWidth","offset","opacity","operator","orient","padding","paddingLeft","paddingRight","patternUnits","r","radius","refX","refY","role","scope","slope","src","startOffset","stdDeviation","stroke","stroke-linecap","stroke-width","style","tableValues","result","rowspan","summary","target","tabindex","text-align","text-anchor","textAnchor","textLength","title","type","valign","width","x","x1","x2","xlink:href","y","y1","y2","zIndex"];AST.allowedReferences=["https://","http://","mailto:","/","../","./","#"];AST.allowedTags=["a","abbr","b","br","button","caption","circle","clipPath","code","dd","defs","div","dl","dt","em","feComponentTransfer","feComposite","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feMorphology","feOffset","feMerge","feMergeNode","filter","h1","h2","h3","h4","h5","h6","hr","i","img","li","linearGradient","marker","ol","p","path","pattern","pre","rect","small","span","stop","strong","style","sub","sup","svg","table","text","textPath","thead","title","tbody","tspan","td","th","tr","u","ul","#text"];AST.emptyHTML=emptyHTML;AST.bypassHTMLFiltering=false;export default AST;"";