"use strict";import BoostChart from"./BoostChart.js";import BoostSeries from"./BoostSeries.js";import H from"../../Core/Globals.js";const{doc,win}=H;import NamedColors from"./NamedColors.js";import U from"../../Core/Utilities.js";const{addEvent,error}=U;const contexts=["webgl","experimental-webgl","moz-webgl","webkit-3d"];function compose(ChartClass,AxisClass,SeriesClass,seriesTypes,ColorClass){const wglMode=hasWebGLSupport();if(!wglMode){if(typeof H.initCanvasBoost!=="undefined"){H.initCanvasBoost()}else{error(26)}}if(ColorClass&&!ColorClass.names.lightgoldenrodyellow){ColorClass.names={...ColorClass.names,...NamedColors.defaultHTMLColorMap}}BoostChart.compose(ChartClass,wglMode);BoostSeries.compose(SeriesClass,seriesTypes,wglMode);addEvent(AxisClass,"setExtremes",function(e){const renderTargets=[this.chart,...this.series].map(item=>item.renderTarget).filter(Boolean);for(const renderTarget of renderTargets){const{horiz,pos}=this,scaleKey=horiz?"scaleX":"scaleY",translateKey=horiz?"translateX":"translateY",lastScale=renderTarget?.[scaleKey]??1;let scale=1,translate=0,opacity=1,filter="none";if(this.isPanning){scale=(e.scale??1)*lastScale;translate=(renderTarget?.[translateKey]||0)-scale*(e.move||0)+lastScale*pos-scale*pos;opacity=.7;filter="blur(3px)"}renderTarget?.attr({[scaleKey]:scale,[translateKey]:translate}).css({transition:"250ms filter, 250ms opacity",filter:filter,opacity:opacity})}})}function hasWebGLSupport(){let canvas,gl=false;if(typeof win.WebGLRenderingContext!=="undefined"){canvas=doc.createElement("canvas");for(let i=0;i<contexts.length;++i){try{gl=canvas.getContext(contexts[i]);if(typeof gl!=="undefined"&&gl!==null){return true}}catch(e){}}}return false}const Boost={compose:compose,hasWebGLSupport:hasWebGLSupport};export default Boost;"";