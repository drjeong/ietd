"use strict";class WGLVertexBuffer{constructor(gl,shader,dataComponents){this.buffer=false;this.iterator=0;this.preAllocated=false;this.vertAttribute=false;this.components=dataComponents||2;this.dataComponents=dataComponents;this.gl=gl;this.shader=shader}allocate(size){this.iterator=-1;this.preAllocated=new Float32Array(size*4)}bind(){if(!this.buffer){return false}this.gl.vertexAttribPointer(this.vertAttribute,this.components,this.gl.FLOAT,false,0,0)}build(dataIn,attrib,dataComponents){let farray;this.data=dataIn||[];if((!this.data||this.data.length===0)&&!this.preAllocated){this.destroy();return false}this.components=dataComponents||this.components;if(this.buffer){this.gl.deleteBuffer(this.buffer)}if(!this.preAllocated){farray=new Float32Array(this.data)}this.buffer=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer);this.gl.bufferData(this.gl.ARRAY_BUFFER,this.preAllocated||farray,this.gl.STATIC_DRAW);this.vertAttribute=this.gl.getAttribLocation(this.shader.getProgram(),attrib);this.gl.enableVertexAttribArray(this.vertAttribute);farray=false;return true}destroy(){if(this.buffer){this.gl.deleteBuffer(this.buffer);this.buffer=false;this.vertAttribute=false}this.iterator=0;this.components=this.dataComponents||2;this.data=[]}push(x,y,a,b){if(this.preAllocated){this.preAllocated[++this.iterator]=x;this.preAllocated[++this.iterator]=y;this.preAllocated[++this.iterator]=a;this.preAllocated[++this.iterator]=b}}render(from,to,drawMode){const length=this.preAllocated?this.preAllocated.length:this.data.length;if(!this.buffer){return false}if(!length){return false}if(!from||from>length||from<0){from=0}if(!to||to>length){to=length}if(from>=to){return false}drawMode=drawMode||"POINTS";this.gl.drawArrays(this.gl[drawMode],from/this.components,(to-from)/this.components);return true}}export default WGLVertexBuffer;