"use strict";import SonificationInstrument from"./SonificationInstrument.js";import U from"../../Core/Utilities.js";const{pick}=U;const freqToNote=f=>Math.round(12*Math.log(f)/Math.LN2-48.37632),b=(byte,n)=>n>>>8*byte&255,getHeader=nTracks=>[77,84,104,100,0,0,0,6,0,nTracks>1?1:0,b(1,nTracks),b(0,nTracks),1,244],timeInfo=[0,255,81,3,7,161,32],varLenEnc=n=>{let buf=n&127;const res=[];while(n>>=7){buf<<=8;buf|=n&127|128}while(true){res.push(buf&255);if(buf&128){buf>>=8}else{break}}return res},toMIDIEvents=events=>{let cachedVel,cachedDur;const res=[],add=el=>{let ix=res.length;while(ix--&&res[ix].timeMS>el.timeMS){}res.splice(ix+1,0,el)};events.forEach(e=>{const o=e.instrumentEventOptions||{},t=e.time,dur=cachedDur=pick(o.noteDuration,cachedDur),tNOF=dur&&e.time+dur,ctrl=[{valMap:n=>64+63*n&127,data:{10:o.pan,92:o.tremoloDepth,93:o.tremoloSpeed}},{valMap:n=>127*n/2e4&127,data:{74:o.lowpassFreq,75:o.highpassFreq}},{valMap:n=>63*Math.min(18,Math.max(-18,n))/18+63&127,data:{71:o.lowpassResonance,76:o.highpassResonance}}],v=cachedVel=o.volume===void 0?pick(cachedVel,127):127*o.volume&127,freq=o.frequency,note=o.note||0,noteVal=12+(freq?freqToNote(freq):typeof note==="string"?SonificationInstrument.noteStringToC0Distance(note):note)&127;ctrl.forEach(ctrlDef=>Object.keys(ctrlDef.data).forEach(ctrlSignal=>{const val=ctrlDef.data[ctrlSignal];if(val!==void 0){add({timeMS:t,type:"CTRL_CHG",data:[176,parseInt(ctrlSignal,10),ctrlDef.valMap(val)]})}}));if(tNOF){add({timeMS:t,type:"NON",data:[144,noteVal,v]});add({timeMS:tNOF,type:"NOF",data:[128,noteVal,v]})}});return res},getMetaEvents=(midiTrackName,midiInstrument)=>{const events=[];if(midiInstrument){events.push(0,192,midiInstrument&127)}if(midiTrackName){const textArr=[];for(let i=0;i<midiTrackName.length;++i){const code=midiTrackName.charCodeAt(i);if(code<128){textArr.push(code)}}return events.concat([0,255,3],varLenEnc(textArr.length),textArr)}return events},getTrackChunk=(events,addTimeInfo,midiTrackName,midiInstrument)=>{let prevTime=0;const metaEvents=getMetaEvents(midiTrackName,midiInstrument),trackEvents=toMIDIEvents(events).reduce((data,e)=>{const t=varLenEnc(e.timeMS-prevTime);prevTime=e.timeMS;return data.concat(t,e.data)},[]);const trackEnd=[0,255,47,0],size=(addTimeInfo?timeInfo.length:0)+metaEvents.length+trackEvents.length+trackEnd.length;return[77,84,114,107,b(3,size),b(2,size),b(1,size),b(0,size)].concat(addTimeInfo?timeInfo:[],metaEvents,trackEvents,trackEnd)};function toMIDI(channels){const channelsToAdd=channels.filter(c=>!!c.events.length),numCh=channelsToAdd.length,multiCh=numCh>1;return new Uint8Array(getHeader(multiCh?numCh+1:numCh).concat(multiCh?getTrackChunk([],true):[],channelsToAdd.reduce((chunks,channel)=>{const engine=channel.engine;return chunks.concat(getTrackChunk(channel.events,!multiCh,engine.midiTrackName,engine.midiInstrument))},[])))}export default toMIDI;