"use strict";import DraggableChart from"./DraggableChart.js";const{flipResizeSide}=DraggableChart;import U from"../../Core/Utilities.js";const{isNumber,merge,pick}=U;const line={x:{axis:"x",move:true},y:{axis:"y",move:true}};const flags=line;const column={x:{axis:"x",move:true},y:{axis:"y",move:false,resize:true,beforeResize:(guideBox,pointVals,point)=>{const plotThreshold=pick(point.yBottom,point.series.translatedThreshold),plotY=guideBox.attr("y"),threshold=isNumber(point.stackY)?point.stackY-(point.y||0):point.series.options.threshold||0,y=threshold+pointVals.y;let height,diff;if(point.series.yAxis.reversed?y<threshold:y>=threshold){height=guideBox.attr("height");diff=plotThreshold?plotThreshold-plotY-height:0;guideBox.attr({height:Math.max(0,Math.round(height+diff))})}else{guideBox.attr({y:Math.round(plotY+(plotThreshold?plotThreshold-plotY:0))})}},resizeSide:(pointVals,point)=>{const chart=point.series.chart,dragHandles=chart.dragHandles,side=pointVals.y>=(point.series.options.threshold||0)?"top":"bottom",flipSide=flipResizeSide(side);if(dragHandles&&dragHandles[flipSide]){dragHandles[flipSide].destroy();delete dragHandles[flipSide]}return side},handlePositioner:point=>{const bBox=point.shapeArgs||point.graphic&&point.graphic.getBBox()||{},reversed=point.series.yAxis.reversed,threshold=point.series.options.threshold||0,y=point.y||0,bottom=!reversed&&y>=threshold||reversed&&y<threshold;return{x:bBox.x||0,y:bottom?bBox.y||0:(bBox.y||0)+(bBox.height||0)}},handleFormatter:point=>{const shapeArgs=point.shapeArgs||{},radius=shapeArgs.r||0,width=shapeArgs.width||0,centerX=width/2;return[["M",radius,0],["L",centerX-5,0],["A",1,1,0,0,0,centerX+5,0],["A",1,1,0,0,0,centerX-5,0],["M",centerX+5,0],["L",width-radius,0]]}}};const boxplot={x:column.x,low:{optionName:"draggableLow",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>({x:point.shapeArgs.x||0,y:point.lowPlot}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.q1},q1:{optionName:"draggableQ1",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>({x:point.shapeArgs.x||0,y:point.q1Plot}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.median&&val>=point.low},median:{axis:"y",move:true},q3:{optionName:"draggableQ3",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>({x:point.shapeArgs.x||0,y:point.q3Plot}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.high&&val>=point.median},high:{optionName:"draggableHigh",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>({x:point.shapeArgs.x||0,y:point.highPlot}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val>=point.q3}};const errorbar={x:column.x,low:{...boxplot.low,propValidate:(val,point)=>val<=point.high},high:{...boxplot.high,propValidate:(val,point)=>val>=point.low}};const bullet={x:column.x,y:column.y,target:{optionName:"draggableTarget",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>{const bBox=point.targetGraphic.getBBox();return{x:point.barX,y:bBox.y+bBox.height/2}},handleFormatter:column.y.handleFormatter}};const ohlc={x:column.x,low:{optionName:"draggableLow",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>({x:point.shapeArgs.x,y:point.plotLow}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.open&&val<=point.close},high:{optionName:"draggableHigh",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>({x:point.shapeArgs.x,y:point.plotHigh}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val>=point.open&&val>=point.close},open:{optionName:"draggableOpen",axis:"y",move:true,resize:true,resizeSide:point=>point.open>=point.close?"top":"bottom",handlePositioner:point=>({x:point.shapeArgs.x,y:point.plotOpen}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.high&&val>=point.low},close:{optionName:"draggableClose",axis:"y",move:true,resize:true,resizeSide:point=>point.open>=point.close?"bottom":"top",handlePositioner:point=>({x:point.shapeArgs.x,y:point.plotClose}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.high&&val>=point.low}};const waterfall={x:column.x,y:merge(column.y,{handleFormatter:point=>point.isSum||point.isIntermediateSum?null:column?.y?.handleFormatter?.(point)||null})};const columnrange={x:{axis:"x",move:true},low:{optionName:"draggableLow",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>{const bBox=point.shapeArgs||point.graphic.getBBox();return{x:bBox.x||0,y:(bBox.y||0)+(bBox.height||0)}},handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.high},high:{optionName:"draggableHigh",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>{const bBox=point.shapeArgs||point.graphic.getBBox();return{x:bBox.x||0,y:bBox.y||0}},handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val>=point.low}};const arearange={x:columnrange.x,low:{optionName:"draggableLow",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>{const bBox=point.graphics&&point.graphics[0]&&point.graphics[0].getBBox();return bBox?{x:bBox.x+bBox.width/2,y:bBox.y+bBox.height/2}:{x:-999,y:-999}},handleFormatter:arearangeHandleFormatter,propValidate:columnrange.low.propValidate},high:{optionName:"draggableHigh",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>{const bBox=point.graphics&&point.graphics[1]&&point.graphics[1].getBBox();return bBox?{x:bBox.x+bBox.width/2,y:bBox.y+bBox.height/2}:{x:-999,y:-999}},handleFormatter:arearangeHandleFormatter,propValidate:columnrange.high.propValidate}};const xrange={y:{axis:"y",move:true},x:{optionName:"draggableX1",axis:"x",move:true,resize:true,resizeSide:"left",handlePositioner:point=>xrangeHandlePositioner(point,"x"),handleFormatter:horizHandleFormatter,propValidate:(val,point)=>val<=point.x2},x2:{optionName:"draggableX2",axis:"x",move:true,resize:true,resizeSide:"right",handlePositioner:point=>xrangeHandlePositioner(point,"x2"),handleFormatter:horizHandleFormatter,propValidate:(val,point)=>val>=point.x}};const gantt={y:xrange.y,start:merge(xrange.x,{optionName:"draggableStart",validateIndividualDrag:point=>!point.milestone}),end:merge(xrange.x2,{optionName:"draggableEnd",validateIndividualDrag:point=>!point.milestone})};function arearangeHandleFormatter(point){const radius=point.graphic?point.graphic.getBBox().width/2+1:4;return[["M",0-radius,0],["a",radius,radius,0,1,0,radius*2,0],["a",radius,radius,0,1,0,radius*-2,0]]}function horizHandleFormatter(point){const shapeArgs=point.shapeArgs||point.graphic.getBBox(),top=shapeArgs.r||0,bottom=shapeArgs.height-top,centerY=shapeArgs.height/2;return[["M",0,top],["L",0,centerY-5],["A",1,1,0,0,0,0,centerY+5],["A",1,1,0,0,0,0,centerY-5],["M",0,centerY+5],["L",0,bottom]]}function xrangeHandlePositioner(point,xProp){const series=point.series,xAxis=series.xAxis,yAxis=series.yAxis,inverted=series.chart.inverted,offsetY=series.columnMetrics?series.columnMetrics.offset:-point.shapeArgs.height/2;let newX=xAxis.toPixels(point[xProp],true),newY=yAxis.toPixels(point.y,true);if(inverted){newX=xAxis.len-newX;newY=yAxis.len-newY}newY+=offsetY;return{x:Math.round(newX),y:Math.round(newY)}}const DragDropProps={arearange:arearange,boxplot:boxplot,bullet:bullet,column:column,columnrange:columnrange,errorbar:errorbar,flags:flags,gantt:gantt,line:line,ohlc:ohlc,waterfall:waterfall,xrange:xrange};export default DragDropProps;