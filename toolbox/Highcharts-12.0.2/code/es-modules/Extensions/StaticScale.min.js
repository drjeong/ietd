"use strict";import U from"../Core/Utilities.js";const{addEvent,defined,isNumber,pick}=U;function compose(AxisClass,ChartClass){const chartProto=ChartClass.prototype;if(!chartProto.adjustHeight){addEvent(AxisClass,"afterSetOptions",onAxisAfterSetOptions);chartProto.adjustHeight=chartAdjustHeight;addEvent(ChartClass,"render",chartProto.adjustHeight)}}function onAxisAfterSetOptions(){const chartOptions=this.chart.options.chart;if(!this.horiz&&isNumber(this.options.staticScale)&&(!chartOptions.height||chartOptions.scrollablePlotArea&&chartOptions.scrollablePlotArea.minHeight)){this.staticScale=this.options.staticScale}}function chartAdjustHeight(){const chart=this;if(chart.redrawTrigger!=="adjustHeight"){for(const axis of chart.axes||[]){const chart=axis.chart,animate=!!chart.initiatedScale&&chart.options.animation,staticScale=axis.options.staticScale;if(axis.staticScale&&defined(axis.min)){let height=pick(axis.brokenAxis&&axis.brokenAxis.unitLength,axis.max+axis.tickInterval-axis.min)*staticScale;height=Math.max(height,staticScale);const diff=height-chart.plotHeight;if(!chart.scrollablePixelsY&&Math.abs(diff)>=1){chart.plotHeight=height;chart.redrawTrigger="adjustHeight";chart.setSize(void 0,chart.chartHeight+diff,animate)}axis.series.forEach(function(series){const clipRect=series.sharedClipKey&&chart.sharedClips[series.sharedClipKey];if(clipRect){clipRect.attr(chart.inverted?{width:chart.plotHeight}:{height:chart.plotHeight})}})}}this.initiatedScale=true}this.redrawTrigger=null}const StaticScale={compose:compose};export default StaticScale;"";