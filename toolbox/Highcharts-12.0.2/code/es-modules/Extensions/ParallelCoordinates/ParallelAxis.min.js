"use strict";import ParallelCoordinatesDefaults from"./ParallelCoordinatesDefaults.js";import U from"../../Core/Utilities.js";const{addEvent,arrayMax,arrayMin,isNumber,merge,pick}=U;class ParallelAxisAdditions{constructor(axis){this.axis=axis}setPosition(axisPosition,options){const parallel=this,axis=parallel.axis,chart=axis.chart,fraction=((parallel.position||0)+.5)/(chart.parallelInfo.counter+1);if(chart.polar){options.angle=360*fraction}else{options[axisPosition[0]]=100*fraction+"%";axis[axisPosition[1]]=options[axisPosition[1]]=0;axis[axisPosition[2]]=options[axisPosition[2]]=null;axis[axisPosition[3]]=options[axisPosition[3]]=null}}}var ParallelAxis;(function(ParallelAxis){function compose(AxisClass){if(!AxisClass.keepProps.includes("parallel")){const axisCompo=AxisClass;AxisClass.keepProps.push("parallel");addEvent(axisCompo,"init",onInit);addEvent(axisCompo,"afterSetOptions",onAfterSetOptions);addEvent(axisCompo,"getSeriesExtremes",onGetSeriesExtremes)}}ParallelAxis.compose=compose;function onAfterSetOptions(e){const axis=this,chart=axis.chart,parallelCoordinates=axis.parallelCoordinates;let axisPosition=["left","width","height","top"];if(chart.hasParallelCoordinates){if(chart.inverted){axisPosition=axisPosition.reverse()}if(axis.isXAxis){axis.options=merge(axis.options,ParallelCoordinatesDefaults.xAxis,e.userOptions)}else{const axisIndex=chart.yAxis.indexOf(axis);axis.options=merge(axis.options,axis.chart.options.chart.parallelAxes,e.userOptions);parallelCoordinates.position=pick(parallelCoordinates.position,axisIndex>=0?axisIndex:chart.yAxis.length);parallelCoordinates.setPosition(axisPosition,axis.options)}}}function onGetSeriesExtremes(e){const axis=this;const chart=axis.chart;const parallelCoordinates=axis.parallelCoordinates;if(!parallelCoordinates){return}if(chart&&chart.hasParallelCoordinates&&!axis.isXAxis){const index=parallelCoordinates.position;let currentPoints=[];axis.series.forEach(function(series){if(series.visible&&isNumber(index)){currentPoints=(series.pointArrayMap||["y"]).reduce((currentPoints,key)=>[...currentPoints,series.getColumn(key)?.[index]??null],currentPoints)}});currentPoints=currentPoints.filter(isNumber);axis.dataMin=arrayMin(currentPoints);axis.dataMax=arrayMax(currentPoints);e.preventDefault()}}function onInit(){const axis=this;if(!axis.parallelCoordinates){axis.parallelCoordinates=new ParallelAxisAdditions(axis)}}})(ParallelAxis||(ParallelAxis={}));export default ParallelAxis;