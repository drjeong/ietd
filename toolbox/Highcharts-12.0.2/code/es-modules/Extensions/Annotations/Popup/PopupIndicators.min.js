"use strict";import AST from"../../../Core/Renderer/HTML/AST.js";import H from"../../../Core/Globals.js";const{doc}=H;import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{seriesTypes}=SeriesRegistry;import U from"../../../Core/Utilities.js";const{addEvent,createElement,defined,isArray,isObject,objectEach,stableSort}=U;var DropdownProperties;(function(DropdownProperties){DropdownProperties[DropdownProperties["params.algorithm"]=0]="params.algorithm";DropdownProperties[DropdownProperties["params.average"]=1]="params.average"})(DropdownProperties||(DropdownProperties={}));const dropdownParameters={"algorithm-pivotpoints":["standard","fibonacci","camarilla"],"average-disparityindex":["sma","ema","dema","tema","wma"]};function addColsContainer(container){const lhsCol=createElement("div",{className:"highcharts-popup-lhs-col"},void 0,container);const rhsCol=createElement("div",{className:"highcharts-popup-rhs-col"},void 0,container);createElement("div",{className:"highcharts-popup-rhs-col-wrapper"},void 0,rhsCol);return{lhsCol:lhsCol,rhsCol:rhsCol}}function addForm(chart,_options,callback){const lang=this.lang;let buttonParentDiv;if(!chart){return}this.tabs.init.call(this,chart);const tabsContainers=this.container.querySelectorAll(".highcharts-tab-item-content");addColsContainer(tabsContainers[0]);addSearchBox.call(this,chart,tabsContainers[0]);addIndicatorList.call(this,chart,tabsContainers[0],"add");buttonParentDiv=tabsContainers[0].querySelectorAll(".highcharts-popup-rhs-col")[0];this.addButton(buttonParentDiv,lang.addButton||"add","add",buttonParentDiv,callback);addColsContainer(tabsContainers[1]);addIndicatorList.call(this,chart,tabsContainers[1],"edit");buttonParentDiv=tabsContainers[1].querySelectorAll(".highcharts-popup-rhs-col")[0];this.addButton(buttonParentDiv,lang.saveButton||"save","edit",buttonParentDiv,callback);this.addButton(buttonParentDiv,lang.removeButton||"remove","remove",buttonParentDiv,callback)}function addFormFields(chart,series,seriesType,rhsColWrapper){const fields=series.params||series.options.params;rhsColWrapper.innerHTML=AST.emptyHTML;createElement("h3",{className:"highcharts-indicator-title"},void 0,rhsColWrapper).appendChild(doc.createTextNode(getNameType(series,seriesType).indicatorFullName));createElement("input",{type:"hidden",name:"highcharts-type-"+seriesType,value:seriesType},void 0,rhsColWrapper);listAllSeries.call(this,seriesType,"series",chart,rhsColWrapper,series,series.linkedParent&&series.linkedParent.options.id);if(fields.volumeSeriesID){listAllSeries.call(this,seriesType,"volume",chart,rhsColWrapper,series,series.linkedParent&&fields.volumeSeriesID)}addParamInputs.call(this,chart,"params",fields,seriesType,rhsColWrapper)}function addIndicatorList(chart,parentDiv,listType,filter){function selectIndicator(series,indicatorType){const button=rhsColWrapper.parentNode.children[1];addFormFields.call(popup,chart,series,indicatorType,rhsColWrapper);if(button){button.style.display="block"}if(isEdit&&series.options){createElement("input",{type:"hidden",name:"highcharts-id-"+indicatorType,value:series.options.id},void 0,rhsColWrapper).setAttribute("highcharts-data-series-id",series.options.id)}}const popup=this,lang=popup.lang,lhsCol=parentDiv.querySelectorAll(".highcharts-popup-lhs-col")[0],rhsCol=parentDiv.querySelectorAll(".highcharts-popup-rhs-col")[0],isEdit=listType==="edit",series=isEdit?chart.series:chart.options.plotOptions||{};if(!chart&&series){return}let item,filteredSeriesArray=[];if(!isEdit&&!isArray(series)){filteredSeriesArray=filterSeries.call(this,series,filter)}else if(isArray(series)){filteredSeriesArray=filterSeriesArray.call(this,series)}stableSort(filteredSeriesArray,(a,b)=>{const seriesAName=a.indicatorFullName.toLowerCase(),seriesBName=b.indicatorFullName.toLowerCase();return seriesAName<seriesBName?-1:seriesAName>seriesBName?1:0});if(lhsCol.children[1]){lhsCol.children[1].remove()}const indicatorList=createElement("ul",{className:"highcharts-indicator-list"},void 0,lhsCol);const rhsColWrapper=rhsCol.querySelectorAll(".highcharts-popup-rhs-col-wrapper")[0];filteredSeriesArray.forEach(seriesSet=>{const{indicatorFullName,indicatorType,series}=seriesSet;item=createElement("li",{className:"highcharts-indicator-list"},void 0,indicatorList);const btn=createElement("button",{className:"highcharts-indicator-list-item",textContent:indicatorFullName},void 0,item);["click","touchstart"].forEach(eventName=>{addEvent(btn,eventName,function(){selectIndicator(series,indicatorType)})})});if(filteredSeriesArray.length>0){const{series,indicatorType}=filteredSeriesArray[0];selectIndicator(series,indicatorType)}else if(!isEdit){AST.setElementHTML(rhsColWrapper.parentNode.children[0],lang.noFilterMatch||"");rhsColWrapper.parentNode.children[1].style.display="none"}}function addParamInputs(chart,parentNode,fields,type,parentDiv){if(!chart){return}const addInput=this.addInput;objectEach(fields,(value,fieldName)=>{const parentFullName=parentNode+"."+fieldName;if(defined(value)&&parentFullName){if(isObject(value)){addInput.call(this,parentFullName,type,parentDiv,{});addParamInputs.call(this,chart,parentFullName,value,type,parentDiv)}if(parentFullName in DropdownProperties){const selectBox=addSelection.call(this,type,parentFullName,parentDiv);addSelectionOptions.call(this,chart,parentNode,selectBox,type,fieldName,value)}else if(parentFullName!=="params.volumeSeriesID"&&!isArray(value)){addInput.call(this,parentFullName,type,parentDiv,{value:value,type:"number"})}}})}function addSearchBox(chart,parentDiv){const popup=this,lhsCol=parentDiv.querySelectorAll(".highcharts-popup-lhs-col")[0],options="searchIndicators",inputAttributes={value:"",type:"text",htmlFor:"search-indicators",labelClassName:"highcharts-input-search-indicators-label"},clearFilterText=this.lang.clearFilter,inputWrapper=createElement("div",{className:"highcharts-input-wrapper"},void 0,lhsCol);const handleInputChange=function(inputText){addIndicatorList.call(popup,chart,popup.container,"add",inputText)};const input=this.addInput(options,"input",inputWrapper,inputAttributes),button=createElement("a",{textContent:clearFilterText},void 0,inputWrapper);input.classList.add("highcharts-input-search-indicators");button.classList.add("clear-filter-button");addEvent(input,"input",function(){handleInputChange(this.value);if(this.value.length){button.style.display="inline-block"}else{button.style.display="none"}});["click","touchstart"].forEach(eventName=>{addEvent(button,eventName,function(){input.value="";handleInputChange("");button.style.display="none"})})}function addSelection(indicatorType,optionName,parentDiv){const optionParamList=optionName.split("."),labelText=optionParamList[optionParamList.length-1],selectName="highcharts-"+optionName+"-type-"+indicatorType,lang=this.lang;createElement("label",{htmlFor:selectName},null,parentDiv).appendChild(doc.createTextNode(lang[labelText]||optionName));const selectBox=createElement("select",{name:selectName,className:"highcharts-popup-field",id:"highcharts-select-"+optionName},null,parentDiv);selectBox.setAttribute("id","highcharts-select-"+optionName);return selectBox}function addSelectionOptions(chart,optionName,selectBox,indicatorType,parameterName,selectedOption,currentSeries){if(optionName==="series"||optionName==="volume"){chart.series.forEach(series=>{const seriesOptions=series.options,seriesName=seriesOptions.name||seriesOptions.params?series.name:seriesOptions.id||"";if(seriesOptions.id!=="highcharts-navigator-series"&&seriesOptions.id!==(currentSeries&&currentSeries.options&&currentSeries.options.id)){if(!defined(selectedOption)&&optionName==="volume"&&series.type==="column"){selectedOption=seriesOptions.id}createElement("option",{value:seriesOptions.id},void 0,selectBox).appendChild(doc.createTextNode(seriesName))}})}else if(indicatorType&&parameterName){const dropdownKey=parameterName+"-"+indicatorType,parameterOption=dropdownParameters[dropdownKey];parameterOption.forEach(element=>{createElement("option",{value:element},void 0,selectBox).appendChild(doc.createTextNode(element))})}if(defined(selectedOption)){selectBox.value=selectedOption}}function filterSeries(series,filter){const popup=this,lang=popup.chart&&popup.chart.options.lang,indicatorAliases=lang&&lang.navigation&&lang.navigation.popup&&lang.navigation.popup.indicatorAliases,filteredSeriesArray=[];let filteredSeries;objectEach(series,(series,value)=>{const seriesOptions=series&&series.options;if(series.params||seriesOptions&&seriesOptions.params){const{indicatorFullName,indicatorType}=getNameType(series,value);if(filter){const validFilter=filter.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");const regex=new RegExp(validFilter,"i"),alias=indicatorAliases&&indicatorAliases[indicatorType]&&indicatorAliases[indicatorType].join(" ")||"";if(indicatorFullName.match(regex)||alias.match(regex)){filteredSeries={indicatorFullName:indicatorFullName,indicatorType:indicatorType,series:series};filteredSeriesArray.push(filteredSeries)}}else{filteredSeries={indicatorFullName:indicatorFullName,indicatorType:indicatorType,series:series};filteredSeriesArray.push(filteredSeries)}}});return filteredSeriesArray}function filterSeriesArray(series){const filteredSeriesArray=[];series.forEach(series=>{if(series.is("sma")){filteredSeriesArray.push({indicatorFullName:series.name,indicatorType:series.type,series:series})}});return filteredSeriesArray}function getAmount(){let counter=0;this.series.forEach(serie=>{if(serie.params||serie.options.params){counter++}});return counter}function getNameType(series,indicatorType){const options=series.options;let seriesName=seriesTypes[indicatorType]&&seriesTypes[indicatorType].prototype.nameBase||indicatorType.toUpperCase(),seriesType=indicatorType;if(options&&options.type){seriesType=series.options.type;seriesName=series.name}return{indicatorFullName:seriesName,indicatorType:seriesType}}function listAllSeries(indicatorType,optionName,chart,parentDiv,currentSeries,selectedOption){const popup=this;if(!chart){return}const selectBox=addSelection.call(popup,indicatorType,optionName,parentDiv);addSelectionOptions.call(popup,chart,optionName,selectBox,void 0,void 0,void 0,currentSeries);if(defined(selectedOption)){selectBox.value=selectedOption}}const PopupIndicators={addForm:addForm,getAmount:getAmount};export default PopupIndicators;