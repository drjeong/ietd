"use strict";import NBU from"./NavigationBindingsUtilities.js";const{getAssignedAxis}=NBU;import U from"../../Core/Utilities.js";const{isNumber,merge}=U;const lang={navigation:{popup:{simpleShapes:"Simple shapes",lines:"Lines",circle:"Circle",ellipse:"Ellipse",rectangle:"Rectangle",label:"Label",shapeOptions:"Shape options",typeOptions:"Details",fill:"Fill",format:"Text",strokeWidth:"Line width",stroke:"Line color",title:"Title",name:"Name",labelOptions:"Label options",labels:"Labels",backgroundColor:"Background color",backgroundColors:"Background colors",borderColor:"Border color",borderRadius:"Border radius",borderWidth:"Border width",style:"Style",padding:"Padding",fontSize:"Font size",color:"Color",height:"Height",shapes:"Shape options"}}};const navigation={bindingsClassName:"highcharts-bindings-container",bindings:{circleAnnotation:{className:"highcharts-circle-annotation",start:function(e){const coords=this.chart.pointer?.getCoordinates(e),coordsX=coords&&getAssignedAxis(coords.xAxis),coordsY=coords&&getAssignedAxis(coords.yAxis),navigation=this.chart.options.navigation;if(!coordsX||!coordsY){return}return this.chart.addAnnotation(merge({langKey:"circle",type:"basicAnnotation",shapes:[{type:"circle",point:{x:coordsX.value,y:coordsY.value,xAxis:coordsX.axis.index,yAxis:coordsY.axis.index},r:5}]},navigation.annotationsOptions,navigation.bindings.circleAnnotation.annotationsOptions))},steps:[function(e,annotation){const shapes=annotation.options.shapes,mockPointOpts=shapes&&shapes[0]&&shapes[0].point||{};let distance;if(isNumber(mockPointOpts.xAxis)&&isNumber(mockPointOpts.yAxis)){const inverted=this.chart.inverted,x=this.chart.xAxis[mockPointOpts.xAxis].toPixels(mockPointOpts.x),y=this.chart.yAxis[mockPointOpts.yAxis].toPixels(mockPointOpts.y);distance=Math.max(Math.sqrt(Math.pow(inverted?y-e.chartX:x-e.chartX,2)+Math.pow(inverted?x-e.chartY:y-e.chartY,2)),5)}annotation.update({shapes:[{r:distance}]})}]},ellipseAnnotation:{className:"highcharts-ellipse-annotation",start:function(e){const coords=this.chart.pointer?.getCoordinates(e),coordsX=coords&&getAssignedAxis(coords.xAxis),coordsY=coords&&getAssignedAxis(coords.yAxis),navigation=this.chart.options.navigation;if(!coordsX||!coordsY){return}return this.chart.addAnnotation(merge({langKey:"ellipse",type:"basicAnnotation",shapes:[{type:"ellipse",xAxis:coordsX.axis.index,yAxis:coordsY.axis.index,points:[{x:coordsX.value,y:coordsY.value},{x:coordsX.value,y:coordsY.value}],ry:1}]},navigation.annotationsOptions,navigation.bindings.ellipseAnnotation.annotationOptions))},steps:[function(e,annotation){const target=annotation.shapes[0],position=target.getAbsolutePosition(target.points[1]);target.translatePoint(e.chartX-position.x,e.chartY-position.y,1);target.redraw(false)},function(e,annotation){const target=annotation.shapes[0],position=target.getAbsolutePosition(target.points[0]),position2=target.getAbsolutePosition(target.points[1]),newR=target.getDistanceFromLine(position,position2,e.chartX,e.chartY),yAxis=target.getYAxis(),newRY=Math.abs(yAxis.toValue(0)-yAxis.toValue(newR));target.setYRadius(newRY);target.redraw(false)}]},rectangleAnnotation:{className:"highcharts-rectangle-annotation",start:function(e){const coords=this.chart.pointer?.getCoordinates(e),coordsX=coords&&getAssignedAxis(coords.xAxis),coordsY=coords&&getAssignedAxis(coords.yAxis);if(!coordsX||!coordsY){return}const x=coordsX.value,y=coordsY.value,xAxis=coordsX.axis.index,yAxis=coordsY.axis.index,navigation=this.chart.options.navigation;return this.chart.addAnnotation(merge({langKey:"rectangle",type:"basicAnnotation",shapes:[{type:"path",points:[{xAxis:xAxis,yAxis:yAxis,x:x,y:y},{xAxis:xAxis,yAxis:yAxis,x:x,y:y},{xAxis:xAxis,yAxis:yAxis,x:x,y:y},{xAxis:xAxis,yAxis:yAxis,x:x,y:y},{command:"Z"}]}]},navigation.annotationsOptions,navigation.bindings.rectangleAnnotation.annotationsOptions))},steps:[function(e,annotation){const shapes=annotation.options.shapes,points=shapes&&shapes[0]&&shapes[0].points||[],coords=this.chart.pointer?.getCoordinates(e),coordsX=coords&&getAssignedAxis(coords.xAxis),coordsY=coords&&getAssignedAxis(coords.yAxis);if(coordsX&&coordsY){const x=coordsX.value,y=coordsY.value;points[1].x=x;points[2].x=x;points[2].y=y;points[3].y=y;annotation.update({shapes:[{points:points}]})}}]},labelAnnotation:{className:"highcharts-label-annotation",start:function(e){const coords=this.chart.pointer?.getCoordinates(e),coordsX=coords&&getAssignedAxis(coords.xAxis),coordsY=coords&&getAssignedAxis(coords.yAxis),navigation=this.chart.options.navigation;if(!coordsX||!coordsY){return}return this.chart.addAnnotation(merge({langKey:"label",type:"basicAnnotation",labelOptions:{format:"{y:.2f}",overflow:"none",crop:true},labels:[{point:{xAxis:coordsX.axis.index,yAxis:coordsY.axis.index,x:coordsX.value,y:coordsY.value}}]},navigation.annotationsOptions,navigation.bindings.labelAnnotation.annotationsOptions))}}},events:{},annotationsOptions:{animation:{defer:0}}};const NavigationBindingDefaults={lang:lang,navigation:navigation};export default NavigationBindingDefaults;