"use strict";import ControlTarget from"../ControlTarget.js";import U from"../../../Core/Utilities.js";const{merge}=U;class Controllable{constructor(annotation,options,index,itemType){this.annotation=annotation;this.chart=annotation.chart;this.collection=itemType==="label"?"labels":"shapes";this.controlPoints=[];this.options=options;this.points=[];this.index=index;this.itemType=itemType;this.init(annotation,options,index)}attr(..._args){this.graphic.attr.apply(this.graphic,arguments)}attrsFromOptions(options){const map=this.constructor.attrsMap,attrs={},styledMode=this.chart.styledMode;let key,mappedKey;for(key in options){mappedKey=map[key];if(typeof map[key]!=="undefined"&&(!styledMode||["fill","stroke","stroke-width"].indexOf(mappedKey)===-1)){attrs[mappedKey]=options[key]}}return attrs}destroy(){if(this.graphic){this.graphic=this.graphic.destroy()}if(this.tracker){this.tracker=this.tracker.destroy()}this.destroyControlTarget()}init(annotation,options,index){this.annotation=annotation;this.chart=annotation.chart;this.options=options;this.points=[];this.controlPoints=[];this.index=index;this.linkPoints();this.addControlPoints()}redraw(animation){this.redrawControlPoints(animation)}render(_parentGroup){if(this.options.className&&this.graphic){this.graphic.addClass(this.options.className)}this.renderControlPoints()}rotate(cx,cy,radians){this.transform("rotate",cx,cy,radians)}scale(cx,cy,sx,sy){this.transform("scale",cx,cy,sx,sy)}setControlPointsVisibility(visible){this.controlPoints.forEach(controlPoint=>{controlPoint.setVisibility(visible)})}shouldBeDrawn(){return!!this.points.length}translateShape(dx,dy,translateSecondPoint){const chart=this.annotation.chart,shapeOptions=this.annotation.userOptions,annotationIndex=chart.annotations.indexOf(this.annotation),chartOptions=chart.options.annotations[annotationIndex];this.translatePoint(dx,dy,0);if(translateSecondPoint){this.translatePoint(dx,dy,1)}chartOptions[this.collection][this.index].point=this.options.point;shapeOptions[this.collection][this.index].point=this.options.point}update(newOptions){const annotation=this.annotation,options=merge(true,this.options,newOptions),parentGroup=this.graphic.parentGroup,Constructor=this.constructor;this.destroy();const newControllable=new Constructor(annotation,options,this.index,this.itemType);merge(true,this,newControllable);this.render(parentGroup);this.redraw()}}ControlTarget.compose(Controllable);export default Controllable;"";