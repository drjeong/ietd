"use strict";import Annotation from"../Annotation.js";import ControlPoint from"../ControlPoint.js";import MockPoint from"../MockPoint.js";import U from"../../../Core/Utilities.js";const{merge}=U;class CrookedLine extends Annotation{setClipAxes(){this.clipXAxis=this.chart.xAxis[this.options.typeOptions.xAxis];this.clipYAxis=this.chart.yAxis[this.options.typeOptions.yAxis]}getPointsOptions(){const typeOptions=this.options.typeOptions;return(typeOptions.points||[]).map(pointOptions=>{pointOptions.xAxis=typeOptions.xAxis;pointOptions.yAxis=typeOptions.yAxis;return pointOptions})}getControlPointsOptions(){return this.getPointsOptions()}addControlPoints(){this.getControlPointsOptions().forEach(function(pointOptions,i){const controlPoint=new ControlPoint(this.chart,this,merge(this.options.controlPointOptions,pointOptions.controlPoint),i);this.controlPoints.push(controlPoint);pointOptions.controlPoint=controlPoint.options},this)}addShapes(){const typeOptions=this.options.typeOptions,shape=this.initShape(merge(typeOptions.line,{type:"path",className:"highcharts-crooked-lines",points:this.points.map((_point,i)=>function(target){return target.annotation.points[i]})}),0);typeOptions.line=shape.options}}CrookedLine.prototype.defaultOptions=merge(Annotation.prototype.defaultOptions,{typeOptions:{xAxis:0,yAxis:0,line:{fill:"none"}},controlPointOptions:{positioner:function(target){const graphic=this.graphic,xy=MockPoint.pointToPixels(target.points[this.index]);return{x:xy.x-(graphic.width||0)/2,y:xy.y-(graphic.height||0)/2}},events:{drag:function(e,target){if(target.chart.isInsidePlot(e.chartX-target.chart.plotLeft,e.chartY-target.chart.plotTop,{visiblePlotOnly:true})){const translation=this.mouseMoveToTranslation(e),typeOptions=target.options.typeOptions;target.translatePoint(translation.x,translation.y,this.index);typeOptions.points[this.index].x=target.points[this.index].x;typeOptions.points[this.index].y=target.points[this.index].y;target.redraw(false)}}}}});Annotation.types.crookedLine=CrookedLine;export default CrookedLine;