"use strict";import Annotation from"../Annotation.js";import ControlPoint from"../ControlPoint.js";import CrookedLine from"./CrookedLine.js";import MockPoint from"../MockPoint.js";import U from"../../../Core/Utilities.js";const{merge}=U;function getSecondCoordinate(p1,p2,x){return(p2.y-p1.y)/(p2.x-p1.x)*(x-p1.x)+p1.y}class Tunnel extends CrookedLine{getPointsOptions(){const pointsOptions=CrookedLine.prototype.getPointsOptions.call(this),yAxisIndex=this.options.typeOptions.yAxis||0,yAxis=this.chart.yAxis[yAxisIndex];pointsOptions[2]=this.heightPointOptions(pointsOptions[1]);pointsOptions[3]=this.heightPointOptions(pointsOptions[0]);if(yAxis&&yAxis.logarithmic){const h=yAxis.toPixels(pointsOptions[2].y)-yAxis.toPixels(pointsOptions[1].y),y3=yAxis.toPixels(pointsOptions[0].y)+h;pointsOptions[3].y=yAxis.toValue(y3)}return pointsOptions}getControlPointsOptions(){return this.getPointsOptions().slice(0,2)}heightPointOptions(pointOptions){const heightPointOptions=merge(pointOptions),typeOptions=this.options.typeOptions;heightPointOptions.y+=typeOptions.height;return heightPointOptions}addControlPoints(){CrookedLine.prototype.addControlPoints.call(this);const options=this.options,typeOptions=options.typeOptions,controlPoint=new ControlPoint(this.chart,this,merge(options.controlPointOptions,typeOptions.heightControlPoint),2);this.controlPoints.push(controlPoint);typeOptions.heightControlPoint=controlPoint.options}addShapes(){this.addLine();this.addBackground()}addLine(){const line=this.initShape(merge(this.options.typeOptions.line,{type:"path",points:[this.points[0],this.points[1],function(target){const pointOptions=MockPoint.pointToOptions(target.annotation.points[2]);pointOptions.command="M";return pointOptions},this.points[3]],className:"highcharts-tunnel-lines"}),0);this.options.typeOptions.line=line.options}addBackground(){const background=this.initShape(merge(this.options.typeOptions.background,{type:"path",points:this.points.slice(),className:"highcharts-tunnel-background"}),1);this.options.typeOptions.background=background.options}translateSide(dx,dy,end){const topIndex=Number(end),bottomIndex=topIndex===0?3:2;this.translatePoint(dx,dy,topIndex);this.translatePoint(dx,dy,bottomIndex)}translateHeight(dh){this.translatePoint(0,dh,2);this.translatePoint(0,dh,3);this.options.typeOptions.height=this.points[3].y-this.points[0].y;this.userOptions.typeOptions.height=this.options.typeOptions.height}}Tunnel.prototype.defaultOptions=merge(CrookedLine.prototype.defaultOptions,{typeOptions:{background:{fill:"rgba(130, 170, 255, 0.4)",strokeWidth:0},line:{strokeWidth:1},height:-2,heightControlPoint:{positioner:function(target){const startXY=MockPoint.pointToPixels(target.points[2]),endXY=MockPoint.pointToPixels(target.points[3]),x=(startXY.x+endXY.x)/2;return{x:x-(this.graphic.width||0)/2,y:getSecondCoordinate(startXY,endXY,x)-(this.graphic.height||0)/2}},events:{drag:function(e,target){if(target.chart.isInsidePlot(e.chartX-target.chart.plotLeft,e.chartY-target.chart.plotTop,{visiblePlotOnly:true})){target.translateHeight(this.mouseMoveToTranslation(e).y);target.redraw(false)}}}}},controlPointOptions:{events:{drag:function(e,target){if(target.chart.isInsidePlot(e.chartX-target.chart.plotLeft,e.chartY-target.chart.plotTop,{visiblePlotOnly:true})){const translation=this.mouseMoveToTranslation(e);target.translateSide(translation.x,translation.y,!!this.index);target.redraw(false)}}}}});Annotation.types.tunnel=Tunnel;export default Tunnel;