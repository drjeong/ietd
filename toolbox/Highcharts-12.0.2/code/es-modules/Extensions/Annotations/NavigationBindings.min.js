"use strict";import ChartNavigationComposition from"../../Core/Chart/ChartNavigationComposition.js";import D from"../../Core/Defaults.js";const{setOptions}=D;import F from"../../Core/Templating.js";const{format}=F;import H from"../../Core/Globals.js";const{composed,doc,win}=H;import NavigationBindingDefaults from"./NavigationBindingsDefaults.js";import NBU from"./NavigationBindingsUtilities.js";const{getAssignedAxis,getFieldType}=NBU;import U from"../../Core/Utilities.js";const{addEvent,attr,defined,fireEvent,isArray,isFunction,isNumber,isObject,merge,objectEach,pick,pushUnique}=U;function closestPolyfill(el,s){const ElementProto=win.Element.prototype,elementMatches=ElementProto.matches||ElementProto.msMatchesSelector||ElementProto.webkitMatchesSelector;let ret=null;if(ElementProto.closest){ret=ElementProto.closest.call(el,s)}else{do{if(elementMatches.call(el,s)){return el}el=el.parentElement||el.parentNode}while(el!==null&&el.nodeType===1)}return ret}function onAnnotationRemove(){if(this.chart.navigationBindings){this.chart.navigationBindings.deselectAnnotation()}}function onChartDestroy(){if(this.navigationBindings){this.navigationBindings.destroy()}}function onChartLoad(){const options=this.options;if(options&&options.navigation&&options.navigation.bindings){this.navigationBindings=new NavigationBindings(this,options.navigation);this.navigationBindings.initEvents();this.navigationBindings.initUpdate()}}function onChartRender(){const navigationBindings=this.navigationBindings,disabledClassName="highcharts-disabled-btn";if(this&&navigationBindings){let buttonsEnabled=false;this.series.forEach(series=>{if(!series.options.isInternal&&series.visible){buttonsEnabled=true}});if(this.navigationBindings&&this.navigationBindings.container&&this.navigationBindings.container[0]){const container=this.navigationBindings.container[0];objectEach(navigationBindings.boundClassNames,(value,key)=>{const buttonNode=container.querySelectorAll("."+key);if(buttonNode){for(let i=0;i<buttonNode.length;i++){const button=buttonNode[i],cls=button.className;if(value.noDataState==="normal"){if(cls.indexOf(disabledClassName)!==-1){button.classList.remove(disabledClassName)}}else if(!buttonsEnabled){if(cls.indexOf(disabledClassName)===-1){button.className+=" "+disabledClassName}}else{if(cls.indexOf(disabledClassName)!==-1){button.classList.remove(disabledClassName)}}}}})}}}function onNavigationBindingsClosePopup(){this.deselectAnnotation()}function onNavigationBindingsDeselectButton(){this.selectedButtonElement=null}function selectableAnnotation(annotationType){const originalClick=annotationType.prototype.defaultOptions.events&&annotationType.prototype.defaultOptions.events.click;function selectAndShowPopup(eventArguments){const annotation=this,navigation=annotation.chart.navigationBindings,prevAnnotation=navigation.activeAnnotation;if(originalClick){originalClick.call(annotation,eventArguments)}if(prevAnnotation!==annotation){navigation.deselectAnnotation();navigation.activeAnnotation=annotation;annotation.setControlPointsVisibility(true);fireEvent(navigation,"showPopup",{annotation:annotation,formType:"annotation-toolbar",options:navigation.annotationToFields(annotation),onSubmit:function(data){if(data.actionType==="remove"){navigation.activeAnnotation=false;navigation.chart.removeAnnotation(annotation)}else{const config={};navigation.fieldsToOptions(data.fields,config);navigation.deselectAnnotation();const typeOptions=config.typeOptions;if(annotation.options.type==="measure"){typeOptions.crosshairY.enabled=typeOptions.crosshairY.strokeWidth!==0;typeOptions.crosshairX.enabled=typeOptions.crosshairX.strokeWidth!==0}annotation.update(config)}}})}else{fireEvent(navigation,"closePopup")}eventArguments.activeAnnotation=true}let touchStartX,touchStartY;function saveCoords(e){touchStartX=e.touches[0].clientX;touchStartY=e.touches[0].clientY}function checkForTouchmove(e){const hasMoved=touchStartX?Math.sqrt(Math.pow(touchStartX-e.changedTouches[0].clientX,2)+Math.pow(touchStartY-e.changedTouches[0].clientY,2))>=4:false;if(!hasMoved){selectAndShowPopup.call(this,e)}}merge(true,annotationType.prototype.defaultOptions.events,{click:selectAndShowPopup,touchstart:saveCoords,touchend:checkForTouchmove})}class NavigationBindings{static compose(AnnotationClass,ChartClass){if(pushUnique(composed,"NavigationBindings")){addEvent(AnnotationClass,"remove",onAnnotationRemove);selectableAnnotation(AnnotationClass);objectEach(AnnotationClass.types,annotationType=>{selectableAnnotation(annotationType)});addEvent(ChartClass,"destroy",onChartDestroy);addEvent(ChartClass,"load",onChartLoad);addEvent(ChartClass,"render",onChartRender);addEvent(NavigationBindings,"closePopup",onNavigationBindingsClosePopup);addEvent(NavigationBindings,"deselectButton",onNavigationBindingsDeselectButton);setOptions(NavigationBindingDefaults)}}constructor(chart,options){this.boundClassNames=void 0;this.chart=chart;this.options=options;this.eventsToUnbind=[];this.container=this.chart.container.getElementsByClassName(this.options.bindingsClassName||"");if(!this.container.length){this.container=doc.getElementsByClassName(this.options.bindingsClassName||"")}}getCoords(e){const coords=this.chart.pointer?.getCoordinates(e);return[coords&&getAssignedAxis(coords.xAxis),coords&&getAssignedAxis(coords.yAxis)]}initEvents(){const navigation=this,chart=navigation.chart,bindingsContainer=navigation.container,options=navigation.options;navigation.boundClassNames={};objectEach(options.bindings||{},value=>{navigation.boundClassNames[value.className]=value});[].forEach.call(bindingsContainer,subContainer=>{navigation.eventsToUnbind.push(addEvent(subContainer,"click",event=>{const bindings=navigation.getButtonEvents(subContainer,event);if(bindings&&!bindings.button.classList.contains("highcharts-disabled-btn")){navigation.bindingsButtonClick(bindings.button,bindings.events,event)}}))});objectEach(options.events||{},(callback,eventName)=>{if(isFunction(callback)){navigation.eventsToUnbind.push(addEvent(navigation,eventName,callback,{passive:false}))}});navigation.eventsToUnbind.push(addEvent(chart.container,"click",function(e){if(!chart.cancelClick&&chart.isInsidePlot(e.chartX-chart.plotLeft,e.chartY-chart.plotTop,{visiblePlotOnly:true})){navigation.bindingsChartClick(this,e)}}));navigation.eventsToUnbind.push(addEvent(chart.container,H.isTouchDevice?"touchmove":"mousemove",function(e){navigation.bindingsContainerMouseMove(this,e)},H.isTouchDevice?{passive:false}:void 0))}initUpdate(){const navigation=this;ChartNavigationComposition.compose(this.chart).navigation.addUpdate(options=>{navigation.update(options)})}bindingsButtonClick(button,events,clickEvent){const navigation=this,chart=navigation.chart,svgContainer=chart.renderer.boxWrapper;let shouldEventBeFired=true;if(navigation.selectedButtonElement){if(navigation.selectedButtonElement.classList===button.classList){shouldEventBeFired=false}fireEvent(navigation,"deselectButton",{button:navigation.selectedButtonElement});if(navigation.nextEvent){if(navigation.currentUserDetails&&navigation.currentUserDetails.coll==="annotations"){chart.removeAnnotation(navigation.currentUserDetails)}navigation.mouseMoveEvent=navigation.nextEvent=false}}if(shouldEventBeFired){navigation.selectedButton=events;navigation.selectedButtonElement=button;fireEvent(navigation,"selectButton",{button:button});if(events.init){events.init.call(navigation,button,clickEvent)}if(events.start||events.steps){chart.renderer.boxWrapper.addClass("highcharts-draw-mode")}}else{chart.stockTools&&button.classList.remove("highcharts-active");svgContainer.removeClass("highcharts-draw-mode");navigation.nextEvent=false;navigation.mouseMoveEvent=false;navigation.selectedButton=null}}bindingsChartClick(chart,clickEvent){chart=this.chart;const navigation=this,activeAnnotation=navigation.activeAnnotation,selectedButton=navigation.selectedButton,svgContainer=chart.renderer.boxWrapper;if(activeAnnotation){if(!activeAnnotation.cancelClick&&!clickEvent.activeAnnotation&&clickEvent.target.parentNode&&!closestPolyfill(clickEvent.target,".highcharts-popup")){fireEvent(navigation,"closePopup")}else if(activeAnnotation.cancelClick){setTimeout(()=>{activeAnnotation.cancelClick=false},0)}}if(!selectedButton||!selectedButton.start){return}if(!navigation.nextEvent){navigation.currentUserDetails=selectedButton.start.call(navigation,clickEvent);if(navigation.currentUserDetails&&selectedButton.steps){navigation.stepIndex=0;navigation.steps=true;navigation.mouseMoveEvent=navigation.nextEvent=selectedButton.steps[navigation.stepIndex]}else{fireEvent(navigation,"deselectButton",{button:navigation.selectedButtonElement});svgContainer.removeClass("highcharts-draw-mode");navigation.steps=false;navigation.selectedButton=null;if(selectedButton.end){selectedButton.end.call(navigation,clickEvent,navigation.currentUserDetails)}}}else{navigation.nextEvent(clickEvent,navigation.currentUserDetails);if(navigation.steps){navigation.stepIndex++;if(selectedButton.steps[navigation.stepIndex]){navigation.mouseMoveEvent=navigation.nextEvent=selectedButton.steps[navigation.stepIndex]}else{fireEvent(navigation,"deselectButton",{button:navigation.selectedButtonElement});svgContainer.removeClass("highcharts-draw-mode");if(selectedButton.end){selectedButton.end.call(navigation,clickEvent,navigation.currentUserDetails)}navigation.nextEvent=false;navigation.mouseMoveEvent=false;navigation.selectedButton=null}}}}bindingsContainerMouseMove(_container,moveEvent){if(this.mouseMoveEvent){this.mouseMoveEvent(moveEvent,this.currentUserDetails)}}fieldsToOptions(fields,config){objectEach(fields,(value,field)=>{const parsedValue=parseFloat(value),path=field.split("."),pathLength=path.length-1;if(isNumber(parsedValue)&&!value.match(/px|em/g)&&!field.match(/format/g)){value=parsedValue}if(value!=="undefined"){let parent=config;path.forEach((name,index)=>{if(name!=="__proto__"&&name!=="constructor"){const nextName=pick(path[index+1],"");if(pathLength===index){parent[name]=value}else if(!parent[name]){parent[name]=nextName.match(/\d/g)?[]:{};parent=parent[name]}else{parent=parent[name]}}})}});return config}deselectAnnotation(){if(this.activeAnnotation){this.activeAnnotation.setControlPointsVisibility(false);this.activeAnnotation=false}}annotationToFields(annotation){const options=annotation.options,editables=NavigationBindings.annotationsEditable,nestedEditables=editables.nestedOptions,type=pick(options.type,options.shapes&&options.shapes[0]&&options.shapes[0].type,options.labels&&options.labels[0]&&options.labels[0].type,"label"),nonEditables=NavigationBindings.annotationsNonEditable[options.langKey]||[],visualOptions={langKey:options.langKey,type:type};function traverse(option,key,parentEditables,parent,parentKey){let nextParent;if(parentEditables&&defined(option)&&nonEditables.indexOf(key)===-1&&((parentEditables.indexOf&&parentEditables.indexOf(key))>=0||parentEditables[key]||parentEditables===true)){if(isArray(option)){parent[key]=[];option.forEach((arrayOption,i)=>{if(!isObject(arrayOption)){traverse(arrayOption,0,nestedEditables[key],parent[key],key)}else{parent[key][i]={};objectEach(arrayOption,(nestedOption,nestedKey)=>{traverse(nestedOption,nestedKey,nestedEditables[key],parent[key][i],key)})}})}else if(isObject(option)){nextParent={};if(isArray(parent)){parent.push(nextParent);nextParent[key]={};nextParent=nextParent[key]}else{parent[key]=nextParent}objectEach(option,(nestedOption,nestedKey)=>{traverse(nestedOption,nestedKey,key===0?parentEditables:nestedEditables[key],nextParent,key)})}else{if(key==="format"){parent[key]=[format(option,annotation.labels[0].points[0]).toString(),"text"]}else if(isArray(parent)){parent.push([option,getFieldType(parentKey,option)])}else{parent[key]=[option,getFieldType(key,option)]}}}}objectEach(options,(option,key)=>{if(key==="typeOptions"){visualOptions[key]={};objectEach(options[key],(typeOption,typeKey)=>{traverse(typeOption,typeKey,nestedEditables,visualOptions[key],typeKey)})}else{traverse(option,key,editables[type],visualOptions,key)}});return visualOptions}getClickedClassNames(container,event){let element=event.target,classNames=[],elemClassName;while(element&&element.tagName){elemClassName=attr(element,"class");if(elemClassName){classNames=classNames.concat(elemClassName.split(" ").map(name=>[name,element]))}element=element.parentNode;if(element===container){return classNames}}return classNames}getButtonEvents(container,event){const navigation=this,classNames=this.getClickedClassNames(container,event);let bindings;classNames.forEach(className=>{if(navigation.boundClassNames[className[0]]&&!bindings){bindings={events:navigation.boundClassNames[className[0]],button:className[1]}}});return bindings}update(options){this.options=merge(true,this.options,options);this.removeEvents();this.initEvents()}removeEvents(){this.eventsToUnbind.forEach(unbinder=>unbinder())}destroy(){this.removeEvents()}}NavigationBindings.annotationsEditable={nestedOptions:{labelOptions:["style","format","backgroundColor"],labels:["style"],label:["style"],style:["fontSize","color"],background:["fill","strokeWidth","stroke"],innerBackground:["fill","strokeWidth","stroke"],outerBackground:["fill","strokeWidth","stroke"],shapeOptions:["fill","strokeWidth","stroke"],shapes:["fill","strokeWidth","stroke"],line:["strokeWidth","stroke"],backgroundColors:[true],connector:["fill","strokeWidth","stroke"],crosshairX:["strokeWidth","stroke"],crosshairY:["strokeWidth","stroke"]},circle:["shapes"],ellipse:["shapes"],verticalLine:[],label:["labelOptions"],measure:["background","crosshairY","crosshairX"],fibonacci:[],tunnel:["background","line","height"],pitchfork:["innerBackground","outerBackground"],rect:["shapes"],crookedLine:[],basicAnnotation:["shapes","labelOptions"]};NavigationBindings.annotationsNonEditable={rectangle:["crosshairX","crosshairY","labelOptions"],ellipse:["labelOptions"],circle:["labelOptions"]};export default NavigationBindings;"";