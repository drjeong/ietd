"use strict";import A from"../../Core/Animation/AnimationUtilities.js";const{animObject}=A;import Breadcrumbs from"../Breadcrumbs/Breadcrumbs.js";import Color from"../../Core/Color/Color.js";import H from"../../Core/Globals.js";const{noop}=H;import DrilldownDefaults from"./DrilldownDefaults.js";import DrilldownSeries from"./DrilldownSeries.js";import U from"../../Core/Utilities.js";const{addEvent,defined,diffObjects,extend,fireEvent,merge,objectEach,pick,removeEvent,syncTimeout}=U;let ddSeriesId=1;function axisDrilldownCategory(x,originalEvent){this.getDDPoints(x).forEach(function(point){if(point&&point.series&&point.series.visible&&point.runDrilldown){point.runDrilldown(true,x,originalEvent)}});this.chart.applyDrilldown()}function axisGetDDPoints(x){return this.ddPoints&&this.ddPoints[x]||[]}function createBreadcrumbsList(chart){const list=[],drilldownLevels=chart.drilldownLevels;if(drilldownLevels&&drilldownLevels.length){if(!list[0]){list.push({level:0,levelOptions:drilldownLevels[0].seriesOptions})}drilldownLevels.forEach(function(level){const lastBreadcrumb=list[list.length-1];if(level.levelNumber+1>lastBreadcrumb.level){list.push({level:level.levelNumber+1,levelOptions:merge({name:level.lowerSeries.name},level.pointOptions)})}})}return list}class ChartAdditions{constructor(chart){this.chart=chart}addSeriesAsDrilldown(point,options){const chart=this.chart||this;fireEvent(this,"addSeriesAsDrilldown",{seriesOptions:options});if(chart.mapView){point.series.isDrilling=true;chart.series.forEach(series=>{series.options.inactiveOtherPoints=true;series.dataLabelsGroup?.destroy();delete series.dataLabelsGroup});if(chart.options.drilldown&&!chart.mapView.projection.hasGeoProjection&&DrilldownDefaults){const userDrilldown=diffObjects(chart.options.drilldown,DrilldownDefaults);if(!defined(userDrilldown.mapZooming)){chart.options.drilldown.mapZooming=false}}if(chart.options.drilldown&&chart.options.drilldown.animation&&chart.options.drilldown.mapZooming){chart.mapView.allowTransformAnimation=true;const animOptions=animObject(chart.options.drilldown.animation);if(typeof animOptions!=="boolean"){const userComplete=animOptions.complete,drilldownComplete=function(obj){if(obj&&obj.applyDrilldown&&chart.mapView){chart.addSingleSeriesAsDrilldown(point,options);chart.applyDrilldown();chart.mapView.allowTransformAnimation=false}};animOptions.complete=function(){if(userComplete){userComplete.apply(this,arguments)}drilldownComplete.apply(this,arguments)}}point.zoomTo(animOptions)}else{chart.addSingleSeriesAsDrilldown(point,options);chart.applyDrilldown()}}else{chart.addSingleSeriesAsDrilldown(point,options);chart.applyDrilldown()}}addSingleSeriesAsDrilldown(point,ddOptions){const chart=this.chart||this,oldSeries=point.series,xAxis=oldSeries.xAxis,yAxis=oldSeries.yAxis,colorProp=chart.styledMode?{colorIndex:pick(point.colorIndex,oldSeries.colorIndex)}:{color:point.color||oldSeries.color},levelNumber=oldSeries.options._levelNumber||0;if(!chart.drilldownLevels){chart.drilldownLevels=[]}ddOptions=extend(extend({_ddSeriesId:ddSeriesId++},colorProp),ddOptions);let levelSeries=[],levelSeriesOptions=[],last;last=chart.drilldownLevels[chart.drilldownLevels.length-1];if(last&&last.levelNumber!==levelNumber){last=void 0}oldSeries.chart.series.forEach(series=>{if(series.xAxis===xAxis){series.options._ddSeriesId=series.options._ddSeriesId||ddSeriesId++;series.options.colorIndex=series.colorIndex;series.options._levelNumber=series.options._levelNumber||levelNumber;if(last){levelSeries=last.levelSeries;levelSeriesOptions=last.levelSeriesOptions}else{levelSeries.push(series);series.purgedOptions=merge({_ddSeriesId:series.options._ddSeriesId,_levelNumber:series.options._levelNumber,selected:series.options.selected},series.userOptions);levelSeriesOptions.push(series.purgedOptions)}}});const level=extend({levelNumber:levelNumber,seriesOptions:oldSeries.options,seriesPurgedOptions:oldSeries.purgedOptions,levelSeriesOptions:levelSeriesOptions,levelSeries:levelSeries,shapeArgs:point.shapeArgs,bBox:point.graphic?point.graphic.getBBox():{},color:point.isNull?Color.parse(colorProp.color).setOpacity(0).get():colorProp.color,lowerSeriesOptions:ddOptions,pointOptions:point.options,pointIndex:point.index,oldExtremes:{xMin:xAxis&&xAxis.userMin,xMax:xAxis&&xAxis.userMax,yMin:yAxis&&yAxis.userMin,yMax:yAxis&&yAxis.userMax},resetZoomButton:last&&last.levelNumber===levelNumber?void 0:chart.resetZoomButton},colorProp);chart.drilldownLevels.push(level);if(xAxis&&xAxis.names){xAxis.names.length=0}const newSeries=level.lowerSeries=chart.addSeries(ddOptions,false);newSeries.options._levelNumber=levelNumber+1;if(xAxis){xAxis.oldPos=xAxis.pos;xAxis.userMin=xAxis.userMax=null;yAxis.userMin=yAxis.userMax=null}newSeries.isDrilling=true;if(oldSeries.type===newSeries.type){newSeries.animate=newSeries.animateDrilldown||noop;newSeries.options.animation=true}}applyDrilldown(){const chart=this.chart||this,drilldownLevels=chart.drilldownLevels;let levelToRemove;if(drilldownLevels&&drilldownLevels.length>0){levelToRemove=drilldownLevels[drilldownLevels.length-1].levelNumber;chart.hasCartesianSeries=drilldownLevels.some(level=>level.lowerSeries.isCartesian);(chart.drilldownLevels||[]).forEach(level=>{if(chart.mapView&&chart.options.drilldown&&chart.options.drilldown.mapZooming){chart.redraw();level.lowerSeries.isDrilling=false;chart.mapView.fitToBounds(level.lowerSeries.bounds);level.lowerSeries.isDrilling=true}if(level.levelNumber===levelToRemove){level.levelSeries.forEach(series=>{if(!chart.mapView){if(series.options&&series.options._levelNumber===levelToRemove){series.remove(false)}}else if(series.options&&series.options._levelNumber===levelToRemove&&series.group){let animOptions={};if(chart.options.drilldown){animOptions=chart.options.drilldown.animation}series.group.animate({opacity:0},animOptions,()=>{series.remove(false);if(!level.levelSeries.filter(el=>Object.keys(el).length).length){if(chart.resetZoomButton){chart.resetZoomButton.hide();delete chart.resetZoomButton}chart.pointer?.reset();fireEvent(chart,"afterDrilldown");if(chart.mapView){chart.series.forEach(series=>{series.isDirtyData=true;series.isDrilling=false});chart.mapView.fitToBounds(void 0,void 0);chart.mapView.allowTransformAnimation=true}fireEvent(chart,"afterApplyDrilldown")}})}})}})}if(!chart.mapView){if(chart.resetZoomButton){chart.resetZoomButton.hide();delete chart.resetZoomButton}chart.pointer?.reset();fireEvent(chart,"afterDrilldown");if(!chart.hasCartesianSeries){chart.axes.forEach(axis=>{axis.destroy(true);axis.init(chart,merge(axis.userOptions,axis.options))})}chart.redraw();fireEvent(chart,"afterApplyDrilldown")}}drillUp(isMultipleDrillUp){const chart=this.chart||this;if(!chart.drilldownLevels||chart.drilldownLevels.length===0){return}fireEvent(chart,"beforeDrillUp");const drilldownLevels=chart.drilldownLevels,levelNumber=drilldownLevels[drilldownLevels.length-1].levelNumber,chartSeries=chart.series,drilldownLevelsNumber=chart.drilldownLevels.length,addSeries=(seriesOptions,oldSeries)=>{let addedSeries;chartSeries.forEach(series=>{if(series.options._ddSeriesId===seriesOptions._ddSeriesId){addedSeries=series}});addedSeries=addedSeries||chart.addSeries(seriesOptions,false);if(addedSeries.type===oldSeries.type&&addedSeries.animateDrillupTo){addedSeries.animate=addedSeries.animateDrillupTo}if(seriesOptions===level.seriesPurgedOptions){return addedSeries}},removeSeries=oldSeries=>{oldSeries.remove(false);chart.series.forEach(series=>{if(series.colorAxis){series.isDirtyData=true}series.options.inactiveOtherPoints=false});chart.redraw()};let i=drilldownLevels.length,seriesI,level,oldExtremes;chart.symbolCounter=chart.colorCounter=0;while(i--){let oldSeries,newSeries;level=drilldownLevels[i];if(level.levelNumber===levelNumber){drilldownLevels.pop();oldSeries=level.lowerSeries;if(!oldSeries.chart){seriesI=chartSeries.length;while(seriesI--){if(chartSeries[seriesI].options.id===level.lowerSeriesOptions.id&&chartSeries[seriesI].options._levelNumber===levelNumber+1){oldSeries=chartSeries[seriesI];break}}}oldSeries.dataTable.setColumn("x",[]);if(oldSeries.xAxis&&oldSeries.xAxis.names&&(drilldownLevelsNumber===0||i===drilldownLevelsNumber-1)){oldSeries.xAxis.names.length=0}level.levelSeriesOptions.forEach(el=>{const addedSeries=addSeries(el,oldSeries);if(addedSeries){newSeries=addedSeries}});fireEvent(chart,"drillup",{seriesOptions:level.seriesPurgedOptions||level.seriesOptions});if(newSeries){if(newSeries.type===oldSeries.type){newSeries.drilldownLevel=level;newSeries.options.animation=chart.options.drilldown.animation;if(oldSeries.animateDrillupFrom&&oldSeries.chart){oldSeries.animateDrillupFrom(level)}}newSeries.options._levelNumber=levelNumber}const seriesToRemove=oldSeries;if(!chart.mapView){seriesToRemove.remove(false)}if(newSeries&&newSeries.xAxis){oldExtremes=level.oldExtremes;newSeries.xAxis.setExtremes(oldExtremes.xMin,oldExtremes.xMax,false);newSeries.yAxis.setExtremes(oldExtremes.yMin,oldExtremes.yMax,false)}if(level.resetZoomButton){chart.resetZoomButton=level.resetZoomButton}if(!chart.mapView){fireEvent(chart,"afterDrillUp")}else{const shouldAnimate=level.levelNumber===levelNumber&&isMultipleDrillUp,zoomingDrill=chart.options.drilldown&&chart.options.drilldown.animation&&chart.options.drilldown.mapZooming;if(shouldAnimate){oldSeries.remove(false)}else{if(oldSeries.dataLabelsGroup){oldSeries.dataLabelsGroup.destroy();delete oldSeries.dataLabelsGroup}if(chart.mapView&&newSeries){if(zoomingDrill){oldSeries.isDrilling=true;newSeries.isDrilling=true;chart.redraw(false);chart.mapView.fitToBounds(oldSeries.bounds,void 0,true,false)}chart.mapView.allowTransformAnimation=true;fireEvent(chart,"afterDrillUp",{seriesOptions:newSeries?newSeries.userOptions:void 0});if(zoomingDrill){chart.mapView.setView(void 0,pick(chart.mapView.minZoom,1),true,{complete:function(){if(Object.prototype.hasOwnProperty.call(this,"complete")){removeSeries(oldSeries)}}});newSeries._hasTracking=false}else{chart.mapView.allowTransformAnimation=false;if(oldSeries.group){oldSeries.group.animate({opacity:0},chart.options.drilldown.animation,()=>{removeSeries(oldSeries);if(chart.mapView){chart.mapView.allowTransformAnimation=true}})}else{removeSeries(oldSeries);chart.mapView.allowTransformAnimation=true}}newSeries.isDrilling=false}}}}}if(!chart.mapView){chart.redraw()}if(chart.ddDupes){chart.ddDupes.length=0}fireEvent(chart,"drillupall")}fadeInGroup(group){const chart=this.chart,animationOptions=animObject(chart.options.drilldown.animation);if(group){group.hide();syncTimeout(()=>{if(group&&group.added){group.fadeIn()}},Math.max(animationOptions.duration-50,0))}}update(options,redraw){const chart=this.chart;merge(true,chart.options.drilldown,options);if(pick(redraw,true)){chart.redraw()}}}var Drilldown;(function(Drilldown){function compose(AxisClass,ChartClass,highchartsDefaultOptions,SeriesClass,seriesTypes,SVGRendererClass,TickClass){DrilldownSeries.compose(SeriesClass,seriesTypes);const DrilldownChart=ChartClass,chartProto=DrilldownChart.prototype;if(!chartProto.drillUp){const SVGElementClass=SVGRendererClass.prototype.Element,addonProto=ChartAdditions.prototype,axisProto=AxisClass.prototype,elementProto=SVGElementClass.prototype,tickProto=TickClass.prototype;axisProto.drilldownCategory=axisDrilldownCategory;axisProto.getDDPoints=axisGetDDPoints;Breadcrumbs.compose(ChartClass,highchartsDefaultOptions);addEvent(Breadcrumbs,"up",onBreadcrumbsUp);chartProto.addSeriesAsDrilldown=addonProto.addSeriesAsDrilldown;chartProto.addSingleSeriesAsDrilldown=addonProto.addSingleSeriesAsDrilldown;chartProto.applyDrilldown=addonProto.applyDrilldown;chartProto.drillUp=addonProto.drillUp;addEvent(DrilldownChart,"afterDrilldown",onChartAfterDrilldown);addEvent(DrilldownChart,"afterDrillUp",onChartAfterDrillUp);addEvent(DrilldownChart,"afterInit",onChartAfterInit);addEvent(DrilldownChart,"drillup",onChartDrillup);addEvent(DrilldownChart,"drillupall",onChartDrillupall);addEvent(DrilldownChart,"render",onChartRender);addEvent(DrilldownChart,"update",onChartUpdate);highchartsDefaultOptions.drilldown=DrilldownDefaults;elementProto.fadeIn=svgElementFadeIn;tickProto.drillable=tickDrillable}}Drilldown.compose=compose;function onBreadcrumbsUp(e){const chart=this.chart,drillUpsNumber=this.getLevel()-e.newLevel;let isMultipleDrillUp=drillUpsNumber>1;for(let i=0;i<drillUpsNumber;i++){if(i===drillUpsNumber-1){isMultipleDrillUp=false}chart.drillUp(isMultipleDrillUp)}}function onChartAfterDrilldown(){const chart=this,drilldownOptions=chart.options.drilldown,breadcrumbsOptions=drilldownOptions&&drilldownOptions.breadcrumbs;if(!chart.breadcrumbs){chart.breadcrumbs=new Breadcrumbs(chart,breadcrumbsOptions)}chart.breadcrumbs.updateProperties(createBreadcrumbsList(chart))}function onChartAfterDrillUp(){const chart=this;if(chart.breadcrumbs){chart.breadcrumbs.updateProperties(createBreadcrumbsList(chart))}}function onChartAfterInit(){this.drilldown=new ChartAdditions(this)}function onChartDrillup(){const chart=this;if(chart.resetZoomButton){chart.resetZoomButton=chart.resetZoomButton.destroy()}}function onChartDrillupall(){const chart=this;if(chart.resetZoomButton){chart.showResetZoom()}}function onChartRender(){(this.xAxis||[]).forEach(axis=>{axis.ddPoints={};axis.series.forEach(series=>{const xData=series.getColumn("x"),points=series.points;for(let i=0,iEnd=xData.length,p;i<iEnd;i++){p=series.options.data[i];if(typeof p!=="number"){p=series.pointClass.prototype.optionsToObject.call({series:series},p);if(p.drilldown){if(!axis.ddPoints[xData[i]]){axis.ddPoints[xData[i]]=[]}const index=i-(series.cropStart||0);axis.ddPoints[xData[i]].push(points&&index>=0&&index<points.length?points[index]:true)}}}});objectEach(axis.ticks,tick=>tick.drillable())})}function onChartUpdate(e){const breadcrumbs=this.breadcrumbs,breadcrumbOptions=e.options.drilldown&&e.options.drilldown.breadcrumbs;if(breadcrumbs&&breadcrumbOptions){breadcrumbs.update(breadcrumbOptions)}}function svgElementFadeIn(animation){const elem=this;elem.attr({opacity:.1,visibility:"inherit"}).animate({opacity:pick(elem.newOpacity,1)},animation||{duration:250})}function tickDrillable(){const pos=this.pos,label=this.label,axis=this.axis,isDrillable=axis.coll==="xAxis"&&axis.getDDPoints,ddPointsX=isDrillable&&axis.getDDPoints(pos),styledMode=axis.chart.styledMode;if(isDrillable){if(label&&ddPointsX&&ddPointsX.length){label.drillable=true;if(!label.basicStyles&&!styledMode){label.basicStyles=merge(label.styles)}label.addClass("highcharts-drilldown-axis-label");if(label.removeOnDrillableClick){removeEvent(label.element,"click")}label.removeOnDrillableClick=addEvent(label.element,"click",function(e){e.preventDefault();axis.drilldownCategory(pos,e)});if(!styledMode&&axis.chart.options.drilldown){label.css(axis.chart.options.drilldown.activeAxisLabelStyle||{})}}else if(label&&label.drillable&&label.removeOnDrillableClick){if(!styledMode){label.styles={};label.element.removeAttribute("style");label.css(label.basicStyles)}label.removeOnDrillableClick();label.removeClass("highcharts-drilldown-axis-label")}}}})(Drilldown||(Drilldown={}));export default Drilldown;"";