"use strict";import U from"../../Core/Utilities.js";const{addEvent,fireEvent,merge}=U;class DataModifier{benchmark(dataTable,options){const results=[];const modifier=this;const execute=()=>{modifier.modifyTable(dataTable);modifier.emit({type:"afterBenchmarkIteration"})};const defaultOptions={iterations:1};const{iterations}=merge(defaultOptions,options);modifier.on("afterBenchmarkIteration",()=>{if(results.length===iterations){modifier.emit({type:"afterBenchmark",results:results});return}execute()});const times={startTime:0,endTime:0};modifier.on("modify",()=>{times.startTime=window.performance.now()});modifier.on("afterModify",()=>{times.endTime=window.performance.now();results.push(times.endTime-times.startTime)});execute();return results}emit(e){fireEvent(this,e.type,e)}modify(table,eventDetail){const modifier=this;return new Promise((resolve,reject)=>{if(table.modified===table){table.modified=table.clone(false,eventDetail)}try{resolve(modifier.modifyTable(table,eventDetail))}catch(e){modifier.emit({type:"error",detail:eventDetail,table:table});reject(e)}})}modifyCell(table,columnName,rowIndex,cellValue,eventDetail){return this.modifyTable(table)}modifyColumns(table,columns,rowIndex,eventDetail){return this.modifyTable(table)}modifyRows(table,rows,rowIndex,eventDetail){return this.modifyTable(table)}on(type,callback){return addEvent(this,type,callback)}}(function(DataModifier){DataModifier.types={};function registerType(key,DataModifierClass){return!!key&&!DataModifier.types[key]&&!!(DataModifier.types[key]=DataModifierClass)}DataModifier.registerType=registerType})(DataModifier||(DataModifier={}));export default DataModifier;