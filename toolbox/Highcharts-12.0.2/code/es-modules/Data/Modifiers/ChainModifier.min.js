"use strict";import DataModifier from"./DataModifier.js";import U from"../../Core/Utilities.js";const{merge}=U;class ChainModifier extends DataModifier{constructor(options,...chain){super();this.chain=chain;this.options=merge(ChainModifier.defaultOptions,options);const optionsChain=this.options.chain||[];for(let i=0,iEnd=optionsChain.length,modifierOptions,ModifierClass;i<iEnd;++i){modifierOptions=optionsChain[i];if(!modifierOptions.type){continue}ModifierClass=DataModifier.types[modifierOptions.type];if(ModifierClass){chain.push(new ModifierClass(modifierOptions))}}}add(modifier,eventDetail){this.emit({type:"addModifier",detail:eventDetail,modifier:modifier});this.chain.push(modifier);this.emit({type:"addModifier",detail:eventDetail,modifier:modifier})}clear(eventDetail){this.emit({type:"clearChain",detail:eventDetail});this.chain.length=0;this.emit({type:"afterClearChain",detail:eventDetail})}async modify(table,eventDetail){const modifiers=this.options.reverse?this.chain.slice().reverse():this.chain.slice();if(table.modified===table){table.modified=table.clone(false,eventDetail)}let modified=table;for(let i=0,iEnd=modifiers.length;i<iEnd;++i){try{await modifiers[i].modify(modified,eventDetail)}catch(error){this.emit({type:"error",detail:eventDetail,table:table});throw error}modified=modified.modified}table.modified=modified;return table}modifyCell(table,columnName,rowIndex,cellValue,eventDetail){const modifiers=this.options.reverse?this.chain.reverse():this.chain;if(modifiers.length){let clone=table.clone();for(let i=0,iEnd=modifiers.length;i<iEnd;++i){modifiers[i].modifyCell(clone,columnName,rowIndex,cellValue,eventDetail);clone=clone.modified}table.modified=clone}return table}modifyColumns(table,columns,rowIndex,eventDetail){const modifiers=this.options.reverse?this.chain.reverse():this.chain.slice();if(modifiers.length){let clone=table.clone();for(let i=0,iEnd=modifiers.length;i<iEnd;++i){modifiers[i].modifyColumns(clone,columns,rowIndex,eventDetail);clone=clone.modified}table.modified=clone}return table}modifyRows(table,rows,rowIndex,eventDetail){const modifiers=this.options.reverse?this.chain.reverse():this.chain.slice();if(modifiers.length){let clone=table.clone();for(let i=0,iEnd=modifiers.length;i<iEnd;++i){modifiers[i].modifyRows(clone,rows,rowIndex,eventDetail);clone=clone.modified}table.modified=clone}return table}modifyTable(table,eventDetail){const chain=this;chain.emit({type:"modify",detail:eventDetail,table:table});const modifiers=chain.options.reverse?chain.chain.reverse():chain.chain.slice();let modified=table.modified;for(let i=0,iEnd=modifiers.length,modifier;i<iEnd;++i){modifier=modifiers[i];modified=modifier.modifyTable(modified,eventDetail).modified}table.modified=modified;chain.emit({type:"afterModify",detail:eventDetail,table:table});return table}remove(modifier,eventDetail){const modifiers=this.chain;this.emit({type:"removeModifier",detail:eventDetail,modifier:modifier});modifiers.splice(modifiers.indexOf(modifier),1);this.emit({type:"afterRemoveModifier",detail:eventDetail,modifier:modifier})}}ChainModifier.defaultOptions={type:"Chain"};DataModifier.registerType("Chain",ChainModifier);export default ChainModifier;