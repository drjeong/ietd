"use strict";import DataModifier from"./DataModifier.js";import FormulaParser from"../Formula/FormulaParser.js";import FormulaProcessor from"../Formula/FormulaProcessor.js";class MathModifier extends DataModifier{constructor(options){super();this.options={...MathModifier.defaultOptions,...options}}modifyTable(table,eventDetail){const modifier=this;modifier.emit({type:"modify",detail:eventDetail,table:table});const alternativeSeparators=modifier.options.alternativeSeparators,formulaColumns=modifier.options.formulaColumns||table.getColumnNames(),modified=table.modified;for(let i=0,iEnd=formulaColumns.length,columnName;i<iEnd;++i){columnName=formulaColumns[i];if(formulaColumns.indexOf(columnName)>=0){modified.setColumn(columnName,modifier.processColumn(table,columnName))}}const columnFormulas=modifier.options.columnFormulas||[];for(let i=0,iEnd=columnFormulas.length,columnFormula,formula;i<iEnd;++i){columnFormula=columnFormulas[i];formula=FormulaParser.parseFormula(columnFormula.formula,alternativeSeparators);modified.setColumn(columnFormula.column,modifier.processColumnFormula(formula,table,columnFormula.rowStart,columnFormula.rowEnd))}modifier.emit({type:"afterModify",detail:eventDetail,table:table});return table}processColumn(table,columnName,rowIndex=0){const alternativeSeparators=this.options.alternativeSeparators,column=(table.getColumn(columnName,true)||[]).slice(rowIndex>0?rowIndex:0);for(let i=0,iEnd=column.length,cacheFormula=[],cacheString="",cell;i<iEnd;++i){cell=column[i];if(typeof cell==="string"&&cell[0]==="="){try{cacheFormula=cacheString===cell?cacheFormula:FormulaParser.parseFormula(cell.substring(1),alternativeSeparators);column[i]=FormulaProcessor.processFormula(cacheFormula,table)}catch{column[i]=NaN}}}return column}processColumnFormula(formula,table,rowStart=0,rowEnd=table.getRowCount()){rowStart=rowStart>=0?rowStart:0;rowEnd=rowEnd>=0?rowEnd:table.getRowCount()+rowEnd;const column=[],modified=table.modified;for(let i=0,iEnd=rowEnd-rowStart;i<iEnd;++i){try{column[i]=FormulaProcessor.processFormula(formula,modified)}catch{column[i]=NaN}finally{formula=FormulaProcessor.translateReferences(formula,0,1)}}return column}}MathModifier.defaultOptions={type:"Math",alternativeSeparators:false};DataModifier.registerType("Math",MathModifier);export default MathModifier;