"use strict";import DataModifier from"./DataModifier.js";import DataTable from"../DataTable.js";import U from"../../Core/Utilities.js";const{merge}=U;class SortModifier extends DataModifier{static ascending(a,b){return(a||0)<(b||0)?-1:(a||0)>(b||0)?1:0}static descending(a,b){return(b||0)<(a||0)?-1:(b||0)>(a||0)?1:0}constructor(options){super();this.options=merge(SortModifier.defaultOptions,options)}getRowReferences(table){const rows=table.getRows(),rowReferences=[];for(let i=0,iEnd=rows.length;i<iEnd;++i){rowReferences.push({index:i,row:rows[i]})}return rowReferences}modifyCell(table,columnName,rowIndex,cellValue,eventDetail){const modifier=this,{orderByColumn,orderInColumn}=modifier.options;if(columnName===orderByColumn){if(orderInColumn){table.modified.setCell(columnName,rowIndex,cellValue);table.modified.setColumn(orderInColumn,modifier.modifyTable(new DataTable({columns:table.getColumns([orderByColumn,orderInColumn])})).modified.getColumn(orderInColumn))}else{modifier.modifyTable(table,eventDetail)}}return table}modifyColumns(table,columns,rowIndex,eventDetail){const modifier=this,{orderByColumn,orderInColumn}=modifier.options,columnNames=Object.keys(columns);if(columnNames.indexOf(orderByColumn)>-1){if(orderInColumn&&columns[columnNames[0]].length){table.modified.setColumns(columns,rowIndex);table.modified.setColumn(orderInColumn,modifier.modifyTable(new DataTable({columns:table.getColumns([orderByColumn,orderInColumn])})).modified.getColumn(orderInColumn))}else{modifier.modifyTable(table,eventDetail)}}return table}modifyRows(table,rows,rowIndex,eventDetail){const modifier=this,{orderByColumn,orderInColumn}=modifier.options;if(orderInColumn&&rows.length){table.modified.setRows(rows,rowIndex);table.modified.setColumn(orderInColumn,modifier.modifyTable(new DataTable({columns:table.getColumns([orderByColumn,orderInColumn])})).modified.getColumn(orderInColumn))}else{modifier.modifyTable(table,eventDetail)}return table}modifyTable(table,eventDetail){const modifier=this;modifier.emit({type:"modify",detail:eventDetail,table:table});const columnNames=table.getColumnNames(),rowCount=table.getRowCount(),rowReferences=this.getRowReferences(table),{direction,orderByColumn,orderInColumn}=modifier.options,compare=direction==="asc"?SortModifier.ascending:SortModifier.descending,orderByColumnIndex=columnNames.indexOf(orderByColumn),modified=table.modified;if(orderByColumnIndex!==-1){rowReferences.sort((a,b)=>compare(a.row[orderByColumnIndex],b.row[orderByColumnIndex]))}if(orderInColumn){const column=[];for(let i=0;i<rowCount;++i){column[rowReferences[i].index]=i}modified.setColumns({[orderInColumn]:column})}else{const originalIndexes=[];const rows=[];let rowReference;for(let i=0;i<rowCount;++i){rowReference=rowReferences[i];originalIndexes.push(modified.getOriginalRowIndex(rowReference.index));rows.push(rowReference.row)}modified.setRows(rows,0);modified.setOriginalRowIndexes(originalIndexes)}modifier.emit({type:"afterModify",detail:eventDetail,table:table});return table}}SortModifier.defaultOptions={type:"Sort",direction:"desc",orderByColumn:"y"};DataModifier.registerType("Sort",SortModifier);export default SortModifier;