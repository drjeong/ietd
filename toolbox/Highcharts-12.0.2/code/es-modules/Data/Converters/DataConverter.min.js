"use strict";import DataTable from"../DataTable.js";import U from"../../Core/Utilities.js";const{addEvent,fireEvent,isNumber,merge}=U;class DataConverter{constructor(options){this.dateFormats={"YYYY/mm/dd":{regex:/^(\d{4})([\-\.\/])(\d{1,2})\2(\d{1,2})$/,parser:function(match){return match?Date.UTC(+match[1],match[3]-1,+match[4]):NaN}},"dd/mm/YYYY":{regex:/^(\d{1,2})([\-\.\/])(\d{1,2})\2(\d{4})$/,parser:function(match){return match?Date.UTC(+match[4],match[3]-1,+match[1]):NaN},alternative:"mm/dd/YYYY"},"mm/dd/YYYY":{regex:/^(\d{1,2})([\-\.\/])(\d{1,2})\2(\d{4})$/,parser:function(match){return match?Date.UTC(+match[4],match[1]-1,+match[3]):NaN}},"dd/mm/YY":{regex:/^(\d{1,2})([\-\.\/])(\d{1,2})\2(\d{2})$/,parser:function(match){const d=new Date;if(!match){return NaN}let year=+match[4];if(year>d.getFullYear()-2e3){year+=1900}else{year+=2e3}return Date.UTC(year,match[3]-1,+match[1])},alternative:"mm/dd/YY"},"mm/dd/YY":{regex:/^(\d{1,2})([\-\.\/])(\d{1,2})\2(\d{2})$/,parser:function(match){return match?Date.UTC(+match[4]+2e3,match[1]-1,+match[3]):NaN}}};const mergedOptions=merge(DataConverter.defaultOptions,options);let regExpPoint=mergedOptions.decimalPoint;if(regExpPoint==="."||regExpPoint===","){regExpPoint=regExpPoint==="."?"\\.":",";this.decimalRegExp=new RegExp("^(-?[0-9]+)"+regExpPoint+"([0-9]+)$")}this.options=mergedOptions}asBoolean(value){if(typeof value==="boolean"){return value}if(typeof value==="string"){return value!==""&&value!=="0"&&value!=="false"}return!!this.asNumber(value)}asDate(value){let timestamp;if(typeof value==="string"){timestamp=this.parseDate(value)}else if(typeof value==="number"){timestamp=value}else if(value instanceof Date){return value}else{timestamp=this.parseDate(this.asString(value))}return new Date(timestamp)}asGuessedType(value){const converter=this,typeMap={number:converter.asNumber,Date:converter.asDate,string:converter.asString};return typeMap[converter.guessType(value)].call(converter,value)}asNumber(value){if(typeof value==="number"){return value}if(typeof value==="boolean"){return value?1:0}if(typeof value==="string"){const decimalRegex=this.decimalRegExp;if(value.indexOf(" ")>-1){value=value.replace(/\s+/g,"")}if(decimalRegex){if(!decimalRegex.test(value)){return NaN}value=value.replace(decimalRegex,"$1.$2")}return parseFloat(value)}if(value instanceof Date){return value.getDate()}if(value){return value.getRowCount()}return NaN}asString(value){return""+value}deduceDateFormat(data,limit,save){const parser=this,stable=[],max=[];let format="YYYY/mm/dd",thing,guessedFormat=[],i=0,madeDeduction=false,elem,j;if(!limit||limit>data.length){limit=data.length}for(;i<limit;i++){if(typeof data[i]!=="undefined"&&data[i]&&data[i].length){thing=data[i].trim().replace(/[\-\.\/]/g," ").split(" ");guessedFormat=["","",""];for(j=0;j<thing.length;j++){if(j<guessedFormat.length){elem=parseInt(thing[j],10);if(elem){max[j]=!max[j]||max[j]<elem?elem:max[j];if(typeof stable[j]!=="undefined"){if(stable[j]!==elem){stable[j]=false}}else{stable[j]=elem}if(elem>31){if(elem<100){guessedFormat[j]="YY"}else{guessedFormat[j]="YYYY"}}else if(elem>12&&elem<=31){guessedFormat[j]="dd";madeDeduction=true}else if(!guessedFormat[j].length){guessedFormat[j]="mm"}}}}}}if(madeDeduction){for(j=0;j<stable.length;j++){if(stable[j]!==false){if(max[j]>12&&guessedFormat[j]!=="YY"&&guessedFormat[j]!=="YYYY"){guessedFormat[j]="YY"}}else if(max[j]>12&&guessedFormat[j]==="mm"){guessedFormat[j]="dd"}}if(guessedFormat.length===3&&guessedFormat[1]==="dd"&&guessedFormat[2]==="dd"){guessedFormat[2]="YY"}format=guessedFormat.join("/")}if(save){parser.options.dateFormat=format}return format}emit(e){fireEvent(this,e.type,e)}export(connector,options){this.emit({type:"exportError",columns:[],headers:[]});throw new Error("Not implemented")}getTable(){throw new Error("Not implemented")}guessType(value){const converter=this;let result="string";if(typeof value==="string"){const trimedValue=converter.trim(`${value}`),decimalRegExp=converter.decimalRegExp;let innerTrimedValue=converter.trim(trimedValue,true);if(decimalRegExp){innerTrimedValue=decimalRegExp.test(innerTrimedValue)?innerTrimedValue.replace(decimalRegExp,"$1.$2"):""}const floatValue=parseFloat(innerTrimedValue);if(+innerTrimedValue===floatValue){value=floatValue}else{const dateValue=converter.parseDate(value);result=isNumber(dateValue)?"Date":"string"}}if(typeof value==="number"){result=value>365*24*3600*1e3?"Date":"number"}return result}on(type,callback){return addEvent(this,type,callback)}parse(options){this.emit({type:"parseError",columns:[],headers:[]});throw new Error("Not implemented")}parseDate(value,dateFormatProp){const converter=this,options=converter.options;let dateFormat=dateFormatProp||options.dateFormat,result=NaN,key,format,match;if(options.parseDate){result=options.parseDate(value)}else{if(!dateFormat){for(key in converter.dateFormats){format=converter.dateFormats[key];match=value.match(format.regex);if(match){dateFormat=key;result=format.parser(match);break}}}else{format=converter.dateFormats[dateFormat];if(!format){format=converter.dateFormats["YYYY/mm/dd"]}match=value.match(format.regex);if(match){result=format.parser(match)}}if(!match){match=Date.parse(value);if(typeof match==="object"&&match!==null&&match.getTime){result=match.getTime()-match.getTimezoneOffset()*6e4}else if(isNumber(match)){result=match-new Date(match).getTimezoneOffset()*6e4;if(value.indexOf("2001")===-1&&new Date(result).getFullYear()===2001){result=NaN}}}}return result}trim(str,inside){if(typeof str==="string"){str=str.replace(/^\s+|\s+$/g,"");if(inside&&/^[\d\s]+$/.test(str)){str=str.replace(/\s/g,"")}}return str}}DataConverter.defaultOptions={dateFormat:"",alternativeFormat:"",startColumn:0,endColumn:Number.MAX_VALUE,startRow:0,endRow:Number.MAX_VALUE,firstRowAsNames:true,switchRowsAndColumns:false};(function(DataConverter){function getTableFromColumns(columns=[],headers=[]){const table=new DataTable;for(let i=0,iEnd=Math.max(headers.length,columns.length);i<iEnd;++i){table.setColumn(headers[i]||`${i}`,columns[i])}return table}DataConverter.getTableFromColumns=getTableFromColumns})(DataConverter||(DataConverter={}));export default DataConverter;