"use strict";import DataConverter from"./DataConverter.js";import U from"../../Core/Utilities.js";const{merge,uniqueKey}=U;class GoogleSheetsConverter extends DataConverter{constructor(options){const mergedOptions=merge(GoogleSheetsConverter.defaultOptions,options);super(mergedOptions);this.columns=[];this.header=[];this.options=mergedOptions}parse(options,eventDetail){const converter=this,parseOptions=merge(converter.options,options);let columns=(parseOptions.json?.values||[]).map(column=>column.slice());if(columns.length===0){return false}converter.header=[];converter.columns=[];converter.emit({type:"parse",columns:converter.columns,detail:eventDetail,headers:converter.header});const{beforeParse,json}=parseOptions;if(beforeParse&&json){columns=beforeParse(json.values)}let column;converter.columns=columns;for(let i=0,iEnd=columns.length;i<iEnd;i++){column=columns[i];converter.header[i]=parseOptions.firstRowAsNames?`${column.shift()}`:uniqueKey();for(let j=0,jEnd=column.length;j<jEnd;++j){if(column[j]&&typeof column[j]==="string"){let cellValue=converter.asGuessedType(column[j]);if(cellValue instanceof Date){cellValue=cellValue.getTime()}converter.columns[i][j]=cellValue}}}converter.emit({type:"afterParse",columns:converter.columns,detail:eventDetail,headers:converter.header})}getTable(){return DataConverter.getTableFromColumns(this.columns,this.header)}}GoogleSheetsConverter.defaultOptions={...DataConverter.defaultOptions};export default GoogleSheetsConverter;