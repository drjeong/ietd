"use strict";import DataModifier from"../Modifiers/DataModifier.js";import DataTable from"../DataTable.js";import U from"../../Core/Utilities.js";const{addEvent,fireEvent,merge,pick}=U;class DataConnector{constructor(options={}){this.table=new DataTable(options.dataTable);this.metadata=options.metadata||{columns:{}}}get polling(){return!!this.polling}describeColumn(name,columnMeta){const connector=this,columns=connector.metadata.columns;columns[name]=merge(columns[name]||{},columnMeta)}describeColumns(columns){const connector=this,columnNames=Object.keys(columns);let columnName;while(typeof(columnName=columnNames.pop())==="string"){connector.describeColumn(columnName,columns[columnName])}}emit(e){fireEvent(this,e.type,e)}getColumnOrder(usePresentationState){const connector=this,columns=connector.metadata.columns,names=Object.keys(columns||{});if(names.length){return names.sort((a,b)=>pick(columns[a].index,0)-pick(columns[b].index,0))}}getSortedColumns(usePresentationOrder){return this.table.getColumns(this.getColumnOrder(usePresentationOrder))}load(){fireEvent(this,"afterLoad",{table:this.table});return Promise.resolve(this)}on(type,callback){return addEvent(this,type,callback)}save(){fireEvent(this,"saveError",{table:this.table});return Promise.reject(new Error("Not implemented"))}setColumnOrder(columnNames){const connector=this;for(let i=0,iEnd=columnNames.length;i<iEnd;++i){connector.describeColumn(columnNames[i],{index:i})}}setModifierOptions(modifierOptions){const ModifierClass=modifierOptions&&DataModifier.types[modifierOptions.type];return this.table.setModifier(ModifierClass?new ModifierClass(modifierOptions):void 0).then(()=>this)}startPolling(refreshTime=1e3){const connector=this;window.clearTimeout(connector._polling);connector._polling=window.setTimeout(()=>connector.load()["catch"](error=>connector.emit({type:"loadError",error:error,table:connector.table})).then(()=>{if(connector._polling){connector.startPolling(refreshTime)}}),refreshTime)}stopPolling(){const connector=this;window.clearTimeout(connector._polling);delete connector._polling}whatIs(name){return this.metadata.columns[name]}}(function(DataConnector){DataConnector.types={};function registerType(key,DataConnectorClass){return!!key&&!DataConnector.types[key]&&!!(DataConnector.types[key]=DataConnectorClass)}DataConnector.registerType=registerType})(DataConnector||(DataConnector={}));export default DataConnector;