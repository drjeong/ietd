"use strict";import DataConnector from"./DataConnector.js";import H from"../../Core/Globals.js";const{win}=H;import HTMLTableConverter from"../Converters/HTMLTableConverter.js";import U from"../../Core/Utilities.js";const{merge}=U;class HTMLTableConnector extends DataConnector{constructor(options){const mergedOptions=merge(HTMLTableConnector.defaultOptions,options);super(mergedOptions);this.converter=new HTMLTableConverter(mergedOptions);this.options=mergedOptions}load(eventDetail){const connector=this,converter=connector.converter,table=connector.table,{dataModifier,table:tableHTML}=connector.options;connector.emit({type:"load",detail:eventDetail,table:table,tableElement:connector.tableElement});let tableElement;if(typeof tableHTML==="string"){connector.tableID=tableHTML;tableElement=win.document.getElementById(tableHTML)}else{tableElement=tableHTML;connector.tableID=tableElement.id}connector.tableElement=tableElement||void 0;if(!connector.tableElement){const error="HTML table not provided, or element with ID not found";connector.emit({type:"loadError",detail:eventDetail,error:error,table:table});return Promise.reject(new Error(error))}converter.parse(merge({tableElement:connector.tableElement},connector.options),eventDetail);table.deleteColumns();table.setColumns(converter.getTable().getColumns());return connector.setModifierOptions(dataModifier).then(()=>{connector.emit({type:"afterLoad",detail:eventDetail,table:table,tableElement:connector.tableElement});return connector})}}HTMLTableConnector.defaultOptions={table:""};DataConnector.registerType("HTMLTable",HTMLTableConnector);export default HTMLTableConnector;