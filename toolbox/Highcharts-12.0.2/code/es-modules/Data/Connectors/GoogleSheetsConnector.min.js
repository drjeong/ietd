"use strict";import DataConnector from"./DataConnector.js";import GoogleSheetsConverter from"../Converters/GoogleSheetsConverter.js";import U from"../../Core/Utilities.js";const{merge,pick}=U;function isGoogleError(json){return typeof json==="object"&&json&&typeof json.error==="object"&&json.error&&typeof json.error.code==="number"&&typeof json.error.message==="string"&&typeof json.error.status==="string"}class GoogleSheetsConnector extends DataConnector{constructor(options){const mergedOptions=merge(GoogleSheetsConnector.defaultOptions,options);super(mergedOptions);this.converter=new GoogleSheetsConverter(mergedOptions);this.options=mergedOptions}load(eventDetail){const connector=this,converter=connector.converter,table=connector.table,{dataModifier,dataRefreshRate,enablePolling,firstRowAsNames,googleAPIKey,googleSpreadsheetKey}=connector.options,url=GoogleSheetsConnector.buildFetchURL(googleAPIKey,googleSpreadsheetKey,connector.options);connector.emit({type:"load",detail:eventDetail,table:table,url:url});if(!URL.canParse(url)){throw new Error("Invalid URL: "+url)}return fetch(url).then(response=>response.json()).then(json=>{if(isGoogleError(json)){throw new Error(json.error.message)}converter.parse({firstRowAsNames:firstRowAsNames,json:json});table.deleteColumns();table.setColumns(converter.getTable().getColumns());return connector.setModifierOptions(dataModifier)}).then(()=>{connector.emit({type:"afterLoad",detail:eventDetail,table:table,url:url});if(enablePolling){setTimeout(()=>connector.load(),Math.max(dataRefreshRate||0,1)*1e3)}return connector})["catch"](error=>{connector.emit({type:"loadError",detail:eventDetail,error:error,table:table});throw error})}}GoogleSheetsConnector.defaultOptions={googleAPIKey:"",googleSpreadsheetKey:"",enablePolling:false,dataRefreshRate:2,firstRowAsNames:true};(function(GoogleSheetsConnector){const alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ";function buildFetchURL(apiKey,sheetKey,options={}){const url=new URL(`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/`);const range=options.onlyColumnNames?"A1:Z1":buildQueryRange(options);url.pathname+=range;const searchParams=url.searchParams;searchParams.set("alt","json");if(!options.onlyColumnNames){searchParams.set("dateTimeRenderOption","FORMATTED_STRING");searchParams.set("majorDimension","COLUMNS");searchParams.set("valueRenderOption","UNFORMATTED_VALUE")}searchParams.set("prettyPrint","false");searchParams.set("key",apiKey);return url.href}GoogleSheetsConnector.buildFetchURL=buildFetchURL;function buildQueryRange(options={}){const{endColumn,endRow,googleSpreadsheetRange,startColumn,startRow}=options;return googleSpreadsheetRange||(alphabet[startColumn||0]||"A")+(Math.max(startRow||0,0)+1)+":"+(alphabet[pick(endColumn,25)]||"Z")+(endRow?Math.max(endRow,0):"Z")}GoogleSheetsConnector.buildQueryRange=buildQueryRange})(GoogleSheetsConnector||(GoogleSheetsConnector={}));DataConnector.registerType("GoogleSheets",GoogleSheetsConnector);export default GoogleSheetsConnector;