"use strict";import CSVConverter from"../Converters/CSVConverter.js";import DataConnector from"./DataConnector.js";import U from"../../Core/Utilities.js";const{merge}=U;class CSVConnector extends DataConnector{constructor(options){const mergedOptions=merge(CSVConnector.defaultOptions,options);super(mergedOptions);this.converter=new CSVConverter(mergedOptions);this.options=mergedOptions;if(mergedOptions.enablePolling){this.startPolling(Math.max(mergedOptions.dataRefreshRate||0,1)*1e3)}}load(eventDetail){const connector=this,converter=connector.converter,table=connector.table,{csv,csvURL,dataModifier}=connector.options;connector.emit({type:"load",csv:csv,detail:eventDetail,table:table});return Promise.resolve(csvURL?fetch(csvURL).then(response=>response.text()):csv||"").then(csv=>{if(csv){table.deleteColumns();converter.parse({csv:csv});table.setColumns(converter.getTable().getColumns())}return connector.setModifierOptions(dataModifier).then(()=>csv)}).then(csv=>{connector.emit({type:"afterLoad",csv:csv,detail:eventDetail,table:table});return connector})["catch"](error=>{connector.emit({type:"loadError",detail:eventDetail,error:error,table:table});throw error})}}CSVConnector.defaultOptions={csv:"",csvURL:"",enablePolling:false,dataRefreshRate:1,firstRowAsNames:true};DataConnector.registerType("CSV",CSVConnector);export default CSVConnector;