"use strict";const booleanRegExp=/^(?:FALSE|TRUE)/;const decimal1RegExp=/^[+\-]?\d+(?:\.\d+)?(?:e[+\-]\d+)?/;const decimal2RegExp=/^[+\-]?\d+(?:,\d+)?(?:e[+\-]\d+)?/;const functionRegExp=/^([A-Z][A-Z\d\.]*)\(/;const operatorRegExp=/^(?:[+\-*\/^<=>]|<=|=>)/;const rangeA1RegExp=/^(\$?[A-Z]+)(\$?\d+)\:(\$?[A-Z]+)(\$?\d+)/;const rangeR1C1RegExp=/^R(\d*|\[\d+\])C(\d*|\[\d+\])\:R(\d*|\[\d+\])C(\d*|\[\d+\])/;const referenceA1RegExp=/^(\$?[A-Z]+)(\$?\d+)(?![\:C])/;const referenceR1C1RegExp=/^R(\d*|\[\d+\])C(\d*|\[\d+\])(?!\:)/;function extractParantheses(text){let parantheseLevel=0;for(let i=0,iEnd=text.length,char,parantheseStart=1;i<iEnd;++i){char=text[i];if(char==="("){if(!parantheseLevel){parantheseStart=i+1}++parantheseLevel;continue}if(char===")"){--parantheseLevel;if(!parantheseLevel){return text.substring(parantheseStart,i)}}}if(parantheseLevel>0){const error=new Error("Incomplete parantheses.");error.name="FormulaParseError";throw error}return""}function extractString(text){let start=-1;for(let i=0,iEnd=text.length,char,escaping=false;i<iEnd;++i){char=text[i];if(char==="\\"){escaping=!escaping;continue}if(escaping){escaping=false;continue}if(char==='"'){if(start<0){start=i}else{return text.substring(start+1,i)}}}const error=new Error("Incomplete string.");error.name="FormulaParseError";throw error}function parseArgument(text,alternativeSeparators){let match;match=text.match(rangeR1C1RegExp);if(match){const beginColumnRelative=match[2]===""||match[2][0]==="[";const beginRowRelative=match[1]===""||match[1][0]==="[";const endColumnRelative=match[4]===""||match[4][0]==="[";const endRowRelative=match[3]===""||match[3][0]==="[";const range={type:"range",beginColumn:beginColumnRelative?parseInt(match[2].substring(1,-1)||"0",10):parseInt(match[2],10)-1,beginRow:beginRowRelative?parseInt(match[1].substring(1,-1)||"0",10):parseInt(match[1],10)-1,endColumn:endColumnRelative?parseInt(match[4].substring(1,-1)||"0",10):parseInt(match[4],10)-1,endRow:endRowRelative?parseInt(match[3].substring(1,-1)||"0",10):parseInt(match[3],10)-1};if(beginColumnRelative){range.beginColumnRelative=true}if(beginRowRelative){range.beginRowRelative=true}if(endColumnRelative){range.endColumnRelative=true}if(endRowRelative){range.endRowRelative=true}return range}match=text.match(rangeA1RegExp);if(match){const beginColumnRelative=match[1][0]!=="$";const beginRowRelative=match[2][0]!=="$";const endColumnRelative=match[3][0]!=="$";const endRowRelative=match[4][0]!=="$";const range={type:"range",beginColumn:parseReferenceColumn(beginColumnRelative?match[1]:match[1].substring(1))-1,beginRow:parseInt(beginRowRelative?match[2]:match[2].substring(1),10)-1,endColumn:parseReferenceColumn(endColumnRelative?match[3]:match[3].substring(1))-1,endRow:parseInt(endRowRelative?match[4]:match[4].substring(1),10)-1};if(beginColumnRelative){range.beginColumnRelative=true}if(beginRowRelative){range.beginRowRelative=true}if(endColumnRelative){range.endColumnRelative=true}if(endRowRelative){range.endRowRelative=true}return range}const formula=parseFormula(text,alternativeSeparators);return formula.length===1&&typeof formula[0]!=="string"?formula[0]:formula}function parseArguments(text,alternativeSeparators){const args=[],argumentsSeparator=alternativeSeparators?";":",";let parantheseLevel=0,term="";for(let i=0,iEnd=text.length,char;i<iEnd;++i){char=text[i];if(char===argumentsSeparator&&!parantheseLevel&&term){args.push(parseArgument(term,alternativeSeparators));term=""}else if(char==='"'&&!parantheseLevel&&!term){const string=extractString(text.substring(i));args.push(string);i+=string.length+1}else if(char!==" "){term+=char;if(char==="("){++parantheseLevel}else if(char===")"){--parantheseLevel}}}if(!parantheseLevel&&term){args.push(parseArgument(term,alternativeSeparators))}return args}function parseFormula(text,alternativeSeparators){const decimalRegExp=alternativeSeparators?decimal2RegExp:decimal1RegExp,formula=[];let match,next=(text[0]==="="?text.substring(1):text).trim();while(next){match=next.match(referenceR1C1RegExp);if(match){const columnRelative=match[2]===""||match[2][0]==="[";const rowRelative=match[1]===""||match[1][0]==="[";const reference={type:"reference",column:columnRelative?parseInt(match[2].substring(1,-1)||"0",10):parseInt(match[2],10)-1,row:rowRelative?parseInt(match[1].substring(1,-1)||"0",10):parseInt(match[1],10)-1};if(columnRelative){reference.columnRelative=true}if(rowRelative){reference.rowRelative=true}formula.push(reference);next=next.substring(match[0].length).trim();continue}match=next.match(referenceA1RegExp);if(match){const columnRelative=match[1][0]!=="$";const rowRelative=match[2][0]!=="$";const reference={type:"reference",column:parseReferenceColumn(columnRelative?match[1]:match[1].substring(1))-1,row:parseInt(rowRelative?match[2]:match[2].substring(1),10)-1};if(columnRelative){reference.columnRelative=true}if(rowRelative){reference.rowRelative=true}formula.push(reference);next=next.substring(match[0].length).trim();continue}match=next.match(operatorRegExp);if(match){formula.push(match[0]);next=next.substring(match[0].length).trim();continue}match=next.match(booleanRegExp);if(match){formula.push(match[0]==="TRUE");next=next.substring(match[0].length).trim();continue}match=next.match(decimalRegExp);if(match){formula.push(parseFloat(match[0]));next=next.substring(match[0].length).trim();continue}if(next[0]==='"'){const string=extractString(next);formula.push(string.substring(1,-1));next=next.substring(string.length+2).trim();continue}match=next.match(functionRegExp);if(match){next=next.substring(match[1].length).trim();const parantheses=extractParantheses(next);formula.push({type:"function",name:match[1],args:parseArguments(parantheses,alternativeSeparators)});next=next.substring(parantheses.length+2).trim();continue}if(next[0]==="("){const paranteses=extractParantheses(next);if(paranteses){formula.push(parseFormula(paranteses,alternativeSeparators));next=next.substring(paranteses.length+2).trim();continue}}const position=text.length-next.length,error=new Error("Unexpected character `"+text.substring(position,position+1)+"` at position "+(position+1)+". (`..."+text.substring(position-5,position+6)+"...`)");error.name="FormulaParseError";throw error}return formula}function parseReferenceColumn(text){let column=0;for(let i=0,iEnd=text.length,code,factor=text.length-1;i<iEnd;++i){code=text.charCodeAt(i);if(code>=65&&code<=90){column+=(code-64)*Math.pow(26,factor)}--factor}return column}const FormulaParser={parseFormula:parseFormula};export default FormulaParser;