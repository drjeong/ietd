"use strict";import DataConnector from"./Connectors/DataConnector.js";import DataPoolDefaults from"./DataPoolDefaults.js";import U from"../Core/Utilities.js";class DataPool{constructor(options=DataPoolDefaults){options.connectors=options.connectors||[];this.connectors={};this.options=options;this.waiting={}}emit(e){U.fireEvent(this,e.type,e)}getConnector(connectorId){const connector=this.connectors[connectorId];if(connector){return Promise.resolve(connector)}let waitingList=this.waiting[connectorId];if(!waitingList){waitingList=this.waiting[connectorId]=[];const connectorOptions=this.getConnectorOptions(connectorId);if(!connectorOptions){throw new Error(`Connector '${connectorId}' not found.`)}this.loadConnector(connectorOptions).then(connector=>{delete this.waiting[connectorId];for(let i=0,iEnd=waitingList.length;i<iEnd;++i){waitingList[i][0](connector)}})["catch"](error=>{delete this.waiting[connectorId];for(let i=0,iEnd=waitingList.length;i<iEnd;++i){waitingList[i][1](error)}})}return new Promise((resolve,reject)=>{waitingList.push([resolve,reject])})}getConnectorIds(){const connectors=this.options.connectors,connectorIds=[];for(let i=0,iEnd=connectors.length;i<iEnd;++i){connectorIds.push(connectors[i].id)}return connectorIds}getConnectorOptions(connectorId){const connectors=this.options.connectors;for(let i=0,iEnd=connectors.length;i<iEnd;++i){if(connectors[i].id===connectorId){return connectors[i]}}}getConnectorTable(connectorId){return this.getConnector(connectorId).then(connector=>connector.table)}isNewConnector(connectorId){return!this.connectors[connectorId]}loadConnector(options){return new Promise((resolve,reject)=>{this.emit({type:"load",options:options});const ConnectorClass=DataConnector.types[options.type];if(!ConnectorClass){throw new Error(`Connector type not found. (${options.type})`)}const connector=new ConnectorClass(options.options);connector.load().then(connector=>{this.connectors[options.id]=connector;this.emit({type:"afterLoad",options:options});resolve(connector)})["catch"](reject)})}on(type,callback){return U.addEvent(this,type,callback)}setConnectorOptions(options){const connectors=this.options.connectors,instances=this.connectors;this.emit({type:"setConnectorOptions",options:options});for(let i=0,iEnd=connectors.length;i<iEnd;++i){if(connectors[i].id===options.id){connectors.splice(i,1);break}}if(instances[options.id]){instances[options.id].stopPolling();delete instances[options.id]}connectors.push(options);this.emit({type:"afterSetConnectorOptions",options:options})}}DataPool.version="1.0.0";export default DataPool;