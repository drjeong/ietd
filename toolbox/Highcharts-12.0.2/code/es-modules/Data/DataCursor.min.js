"use strict";class DataCursor{constructor(stateMap={}){this.emittingRegister=[];this.listenerMap={};this.stateMap=stateMap}addListener(tableId,state,listener){const listenerMap=this.listenerMap[tableId]=this.listenerMap[tableId]||{};const listeners=listenerMap[state]=listenerMap[state]||[];listeners.push(listener);return this}buildEmittingTag(e){return(e.cursor.type==="position"?[e.table.id,e.cursor.column,e.cursor.row,e.cursor.state,e.cursor.type]:[e.table.id,e.cursor.columns,e.cursor.firstRow,e.cursor.lastRow,e.cursor.state,e.cursor.type]).join("\0")}emitCursor(table,cursor,event,lasting){const tableId=table.id,state=cursor.state,listeners=this.listenerMap[tableId]&&this.listenerMap[tableId][state];if(listeners){const stateMap=this.stateMap[tableId]=this.stateMap[tableId]??{};const cursors=stateMap[cursor.state]||[];if(lasting){if(!cursors.length){stateMap[cursor.state]=cursors}if(DataCursor.getIndex(cursor,cursors)===-1){cursors.push(cursor)}}const e={cursor:cursor,cursors:cursors,table:table};if(event){e.event=event}const emittingRegister=this.emittingRegister,emittingTag=this.buildEmittingTag(e);if(emittingRegister.indexOf(emittingTag)>=0){return this}try{this.emittingRegister.push(emittingTag);for(let i=0,iEnd=listeners.length;i<iEnd;++i){listeners[i].call(this,e)}}finally{const index=this.emittingRegister.indexOf(emittingTag);if(index>=0){this.emittingRegister.splice(index,1)}}}return this}remitCursor(tableId,cursor){const cursors=this.stateMap[tableId]&&this.stateMap[tableId][cursor.state];if(cursors){const index=DataCursor.getIndex(cursor,cursors);if(index>=0){cursors.splice(index,1)}}return this}removeListener(tableId,state,listener){const listeners=this.listenerMap[tableId]&&this.listenerMap[tableId][state];if(listeners){const index=listeners.indexOf(listener);if(index>=0){listeners.splice(index,1)}}return this}}DataCursor.version="1.0.0";(function(DataCursor){function getIndex(needle,cursors){if(needle.type==="position"){for(let cursor,i=0,iEnd=cursors.length;i<iEnd;++i){cursor=cursors[i];if(cursor.type==="position"&&cursor.state===needle.state&&cursor.column===needle.column&&cursor.row===needle.row){return i}}}else{const columnNeedle=JSON.stringify(needle.columns);for(let cursor,i=0,iEnd=cursors.length;i<iEnd;++i){cursor=cursors[i];if(cursor.type==="range"&&cursor.state===needle.state&&cursor.firstRow===needle.firstRow&&cursor.lastRow===needle.lastRow&&JSON.stringify(cursor.columns)===columnNeedle){return i}}}return-1}DataCursor.getIndex=getIndex;function isEqual(cursorA,cursorB){if(cursorA.type==="position"&&cursorB.type==="position"){return cursorA.column===cursorB.column&&cursorA.row===cursorB.row&&cursorA.state===cursorB.state}if(cursorA.type==="range"&&cursorB.type==="range"){return cursorA.firstRow===cursorB.firstRow&&cursorA.lastRow===cursorB.lastRow&&JSON.stringify(cursorA.columns)===JSON.stringify(cursorB.columns)}return false}DataCursor.isEqual=isEqual;function isInRange(needle,range){if(range.type==="position"){range=toRange(range)}if(needle.type==="position"){needle=toRange(needle,range)}const needleColumns=needle.columns;const rangeColumns=range.columns;return needle.firstRow>=range.firstRow&&needle.lastRow<=range.lastRow&&(!needleColumns||!rangeColumns||needleColumns.every(column=>rangeColumns.indexOf(column)>=0))}DataCursor.isInRange=isInRange;function toPositions(cursor){if(cursor.type==="position"){return[cursor]}const columns=cursor.columns||[];const positions=[];const state=cursor.state;for(let row=cursor.firstRow,rowEnd=cursor.lastRow;row<rowEnd;++row){if(!columns.length){positions.push({type:"position",row:row,state:state});continue}for(let column=0,columnEnd=columns.length;column<columnEnd;++column){positions.push({type:"position",column:columns[column],row:row,state:state})}}return positions}DataCursor.toPositions=toPositions;function toRange(cursor,defaultRange){if(cursor.type==="range"){return cursor}const range={type:"range",firstRow:cursor.row??(defaultRange&&defaultRange.firstRow)??0,lastRow:cursor.row??(defaultRange&&defaultRange.lastRow)??Number.MAX_VALUE,state:cursor.state};if(typeof cursor.column!=="undefined"){range.columns=[cursor.column]}return range}DataCursor.toRange=toRange})(DataCursor||(DataCursor={}));export default DataCursor;