"use strict";var __extends=this&&this.__extends||function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(Object.prototype.hasOwnProperty.call(b,p))d[p]=b[p]};return extendStatics(d,b)};return function(d,b){if(typeof b!=="function"&&b!==null)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";var TreemapNode=SeriesRegistry.seriesTypes.treemap.prototype.NodeClass;var TreegraphNode=function(_super){__extends(TreegraphNode,_super);function TreegraphNode(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.mod=0;_this.shift=0;_this.change=0;_this.children=[];_this.preX=0;_this.hidden=false;_this.wasVisited=false;_this.collapsed=false;return _this}TreegraphNode.prototype.nextLeft=function(){return this.getLeftMostChild()||this.thread};TreegraphNode.prototype.nextRight=function(){return this.getRightMostChild()||this.thread};TreegraphNode.prototype.getAncestor=function(leftIntNode,defaultAncestor){var leftAnc=leftIntNode.ancestor;if(leftAnc.children[0]===this.children[0]){return leftIntNode.ancestor}return defaultAncestor};TreegraphNode.prototype.getLeftMostSibling=function(){var parent=this.getParent();if(parent){for(var _i=0,_a=parent.children;_i<_a.length;_i++){var child=_a[_i];if(child&&child.point.visible){return child}}}};TreegraphNode.prototype.hasChildren=function(){var children=this.children;for(var i=0;i<children.length;i++){if(children[i].point.visible){return true}}return false};TreegraphNode.prototype.getLeftSibling=function(){var parent=this.getParent();if(parent){var children=parent.children;for(var i=this.relativeXPosition-1;i>=0;i--){if(children[i]&&children[i].point.visible){return children[i]}}}};TreegraphNode.prototype.getLeftMostChild=function(){var children=this.children;for(var i=0;i<children.length;i++){if(children[i].point.visible){return children[i]}}};TreegraphNode.prototype.getRightMostChild=function(){var children=this.children;for(var i=children.length-1;i>=0;i--){if(children[i].point.visible){return children[i]}}};TreegraphNode.prototype.getParent=function(){return this.parentNode};TreegraphNode.prototype.getFirstChild=function(){var children=this.children;for(var i=0;i<children.length;i++){if(children[i].point.visible){return children[i]}}};return TreegraphNode}(TreemapNode);export default TreegraphNode;