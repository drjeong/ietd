"use strict";import TreegraphNode from"./TreegraphNode.js";var TreegraphLayout=function(){function TreegraphLayout(){}TreegraphLayout.createDummyNode=function(parent,child,gapSize){var dummyNode=new TreegraphNode;dummyNode.id=parent.id+"-"+gapSize;dummyNode.ancestor=parent;dummyNode.children.push(child);dummyNode.parent=parent.id;dummyNode.parentNode=parent;dummyNode.point=child.point;dummyNode.level=child.level-gapSize;dummyNode.relativeXPosition=child.relativeXPosition;dummyNode.visible=child.visible;parent.children[child.relativeXPosition]=dummyNode;child.oldParentNode=parent;child.relativeXPosition=0;child.parentNode=dummyNode;child.parent=dummyNode.id;return dummyNode};TreegraphLayout.prototype.calculatePositions=function(series){var treeLayout=this;var nodes=series.nodeList;this.resetValues(nodes);var root=series.tree;if(root){treeLayout.calculateRelativeX(root,0);treeLayout.beforeLayout(nodes);treeLayout.firstWalk(root);treeLayout.secondWalk(root,-root.preX);treeLayout.afterLayout(nodes)}};TreegraphLayout.prototype.beforeLayout=function(nodes){for(var _i=0,nodes_1=nodes;_i<nodes_1.length;_i++){var node=nodes_1[_i];for(var _a=0,_b=node.children;_a<_b.length;_a++){var child=_b[_a];if(child&&child.level-node.level>1){var gapSize=child.level-node.level-1;while(gapSize>0){child=TreegraphLayout.createDummyNode(node,child,gapSize);gapSize--}}}}};TreegraphLayout.prototype.resetValues=function(nodes){for(var _i=0,nodes_2=nodes;_i<nodes_2.length;_i++){var node=nodes_2[_i];node.mod=0;node.ancestor=node;node.shift=0;node.thread=void 0;node.change=0;node.preX=0}};TreegraphLayout.prototype.calculateRelativeX=function(node,index){var treeLayout=this,children=node.children;for(var i=0,iEnd=children.length;i<iEnd;++i){treeLayout.calculateRelativeX(children[i],i)}node.relativeXPosition=index};TreegraphLayout.prototype.firstWalk=function(node){var treeLayout=this,siblingDistance=1;var leftSibling;if(!node.hasChildren()){leftSibling=node.getLeftSibling();if(leftSibling){node.preX=leftSibling.preX+siblingDistance;node.mod=node.preX}else{node.preX=0}}else{var defaultAncestor=node.getLeftMostChild();for(var _i=0,_a=node.children;_i<_a.length;_i++){var child=_a[_i];treeLayout.firstWalk(child);defaultAncestor=treeLayout.apportion(child,defaultAncestor)}treeLayout.executeShifts(node);var leftChild=node.getLeftMostChild(),rightChild=node.getRightMostChild(),midPoint=(leftChild.preX+rightChild.preX)/2;leftSibling=node.getLeftSibling();if(leftSibling){node.preX=leftSibling.preX+siblingDistance;node.mod=node.preX-midPoint}else{node.preX=midPoint}}};TreegraphLayout.prototype.secondWalk=function(node,modSum){var treeLayout=this;node.yPosition=node.preX+modSum;node.xPosition=node.level;for(var _i=0,_a=node.children;_i<_a.length;_i++){var child=_a[_i];treeLayout.secondWalk(child,modSum+node.mod)}};TreegraphLayout.prototype.executeShifts=function(node){var shift=0,change=0;for(var i=node.children.length-1;i>=0;i--){var childNode=node.children[i];childNode.preX+=shift;childNode.mod+=shift;change+=childNode.change;shift+=childNode.shift+change}};TreegraphLayout.prototype.apportion=function(node,defaultAncestor){var treeLayout=this,leftSibling=node.getLeftSibling();if(leftSibling){var rightIntNode=node,rightOutNode=node,leftIntNode=leftSibling,leftOutNode=rightIntNode.getLeftMostSibling(),rightIntMod=rightIntNode.mod,rightOutMod=rightOutNode.mod,leftIntMod=leftIntNode.mod,leftOutMod=leftOutNode.mod;while(leftIntNode&&leftIntNode.nextRight()&&rightIntNode&&rightIntNode.nextLeft()){leftIntNode=leftIntNode.nextRight();leftOutNode=leftOutNode.nextLeft();rightIntNode=rightIntNode.nextLeft();rightOutNode=rightOutNode.nextRight();rightOutNode.ancestor=node;var siblingDistance=1,shift=leftIntNode.preX+leftIntMod-(rightIntNode.preX+rightIntMod)+siblingDistance;if(shift>0){treeLayout.moveSubtree(node.getAncestor(leftIntNode,defaultAncestor),node,shift);rightIntMod+=shift;rightOutMod+=shift}leftIntMod+=leftIntNode.mod;rightIntMod+=rightIntNode.mod;leftOutMod+=leftOutNode.mod;rightOutMod+=rightOutNode.mod}if(leftIntNode&&leftIntNode.nextRight()&&!rightOutNode.nextRight()){rightOutNode.thread=leftIntNode.nextRight();rightOutNode.mod+=leftIntMod-rightOutMod}if(rightIntNode&&rightIntNode.nextLeft()&&!leftOutNode.nextLeft()){leftOutNode.thread=rightIntNode.nextLeft();leftOutNode.mod+=rightIntMod-leftOutMod}defaultAncestor=node}return defaultAncestor};TreegraphLayout.prototype.moveSubtree=function(leftNode,rightNode,shift){var subtrees=rightNode.relativeXPosition-leftNode.relativeXPosition;rightNode.change-=shift/subtrees;rightNode.shift+=shift;rightNode.preX+=shift;rightNode.mod+=shift;leftNode.change+=shift/subtrees};TreegraphLayout.prototype.afterLayout=function(nodes){for(var _i=0,nodes_3=nodes;_i<nodes_3.length;_i++){var node=nodes_3[_i];if(node.oldParentNode){node.relativeXPosition=node.parentNode.relativeXPosition;node.parent=node.oldParentNode.parent;node.parentNode=node.oldParentNode;delete node.oldParentNode.children[node.relativeXPosition];node.oldParentNode.children[node.relativeXPosition]=node;node.oldParentNode=void 0}}};return TreegraphLayout}();export default TreegraphLayout;