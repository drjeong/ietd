"use strict";var __extends=this&&this.__extends||function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(Object.prototype.hasOwnProperty.call(b,p))d[p]=b[p]};return extendStatics(d,b)};return function(d,b){if(typeof b!=="function"&&b!==null)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();import Breadcrumbs from"../../Extensions/Breadcrumbs/Breadcrumbs.js";import Color from"../../Core/Color/Color.js";var color=Color.parse;import ColorMapComposition from"../ColorMapComposition.js";import H from"../../Core/Globals.js";var composed=H.composed,noop=H.noop;import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";var _a=SeriesRegistry.seriesTypes,ColumnSeries=_a.column,ScatterSeries=_a.scatter;import TreemapAlgorithmGroup from"./TreemapAlgorithmGroup.js";import TreemapNode from"./TreemapNode.js";import TreemapPoint from"./TreemapPoint.js";import TreemapSeriesDefaults from"./TreemapSeriesDefaults.js";import TreemapUtilities from"./TreemapUtilities.js";import TU from"../TreeUtilities.js";var getColor=TU.getColor,getLevelOptions=TU.getLevelOptions,updateRootId=TU.updateRootId;import U from"../../Core/Utilities.js";var addEvent=U.addEvent,correctFloat=U.correctFloat,crisp=U.crisp,defined=U.defined,error=U.error,extend=U.extend,fireEvent=U.fireEvent,isArray=U.isArray,isObject=U.isObject,isString=U.isString,merge=U.merge,pick=U.pick,pushUnique=U.pushUnique,stableSort=U.stableSort;var axisMax=100;var treemapAxisDefaultValues=false;function onSeriesAfterBindAxes(){var series=this,xAxis=series.xAxis,yAxis=series.yAxis;var treeAxis;if(xAxis&&yAxis){if(series.is("treemap")){treeAxis={endOnTick:false,gridLineWidth:0,lineWidth:0,min:0,minPadding:0,max:axisMax,maxPadding:0,startOnTick:false,title:void 0,tickPositions:[]};extend(yAxis.options,treeAxis);extend(xAxis.options,treeAxis);treemapAxisDefaultValues=true}else if(treemapAxisDefaultValues){yAxis.setOptions(yAxis.userOptions);xAxis.setOptions(xAxis.userOptions);treemapAxisDefaultValues=false}}}var TreemapSeries=function(_super){__extends(TreemapSeries,_super);function TreemapSeries(){return _super!==null&&_super.apply(this,arguments)||this}TreemapSeries.compose=function(SeriesClass){if(pushUnique(composed,"TreemapSeries")){addEvent(SeriesClass,"afterBindAxes",onSeriesAfterBindAxes)}};TreemapSeries.prototype.algorithmCalcPoints=function(directionChange,last,group,childrenArea){var plot=group.plot,end=group.elArr.length-1;var pX,pY,pW,pH,gW=group.lW,gH=group.lH,keep,i=0;if(last){gW=group.nW;gH=group.nH}else{keep=group.elArr[end]}for(var _i=0,_a=group.elArr;_i<_a.length;_i++){var p=_a[_i];if(last||i<end){if(group.direction===0){pX=plot.x;pY=plot.y;pW=gW;pH=p/pW}else{pX=plot.x;pY=plot.y;pH=gH;pW=p/pH}childrenArea.push({x:pX,y:pY,width:pW,height:correctFloat(pH)});if(group.direction===0){plot.y=plot.y+pH}else{plot.x=plot.x+pW}}i=i+1}group.reset();if(group.direction===0){group.width=group.width-gW}else{group.height=group.height-gH}plot.y=plot.parent.y+(plot.parent.height-group.height);plot.x=plot.parent.x+(plot.parent.width-group.width);if(directionChange){group.direction=1-group.direction}if(!last){group.addElement(keep)}};TreemapSeries.prototype.algorithmFill=function(directionChange,parent,children){var childrenArea=[];var pTot,direction=parent.direction,x=parent.x,y=parent.y,width=parent.width,height=parent.height,pX,pY,pW,pH;for(var _i=0,children_1=children;_i<children_1.length;_i++){var child=children_1[_i];pTot=parent.width*parent.height*(child.val/parent.val);pX=x;pY=y;if(direction===0){pH=height;pW=pTot/pH;width=width-pW;x=x+pW}else{pW=width;pH=pTot/pW;height=height-pH;y=y+pH}childrenArea.push({x:pX,y:pY,width:pW,height:pH});if(directionChange){direction=1-direction}}return childrenArea};TreemapSeries.prototype.algorithmLowAspectRatio=function(directionChange,parent,children){var series=this,childrenArea=[],plot={x:parent.x,y:parent.y,parent:parent},direction=parent.direction,end=children.length-1,group=new TreemapAlgorithmGroup(parent.height,parent.width,direction,plot);var pTot,i=0;for(var _i=0,children_2=children;_i<children_2.length;_i++){var child=children_2[_i];pTot=parent.width*parent.height*(child.val/parent.val);group.addElement(pTot);if(group.lP.nR>group.lP.lR){series.algorithmCalcPoints(directionChange,false,group,childrenArea,plot)}if(i===end){series.algorithmCalcPoints(directionChange,true,group,childrenArea,plot)}++i}return childrenArea};TreemapSeries.prototype.alignDataLabel=function(point,dataLabel,labelOptions){var style=labelOptions.style;if(style&&!defined(style.textOverflow)&&dataLabel.text&&dataLabel.getBBox().width>(dataLabel.text.textWidth||0)){dataLabel.css({textOverflow:"ellipsis",width:style.width+="px"})}ColumnSeries.prototype.alignDataLabel.apply(this,arguments);if(point.dataLabel){point.dataLabel.attr({zIndex:(point.node.zIndex||0)+1})}};TreemapSeries.prototype.calculateChildrenAreas=function(parent,area){var series=this,options=series.options,mapOptionsToLevel=series.mapOptionsToLevel,level=mapOptionsToLevel[parent.level+1],algorithm=pick(series[level&&level.layoutAlgorithm]&&level.layoutAlgorithm,options.layoutAlgorithm),alternate=options.alternateStartingDirection,children=parent.children.filter(function(n){return!n.ignore});var childrenValues=[];if(level&&level.layoutStartingDirection){area.direction=level.layoutStartingDirection==="vertical"?0:1}childrenValues=series[algorithm](area,children);var i=-1;for(var _i=0,children_3=children;_i<children_3.length;_i++){var child=children_3[_i];var values=childrenValues[++i];child.values=merge(values,{val:child.childrenTotal,direction:alternate?1-area.direction:area.direction});child.pointValues=merge(values,{x:values.x/series.axisRatio,y:axisMax-values.y-values.height,width:values.width/series.axisRatio});if(child.children.length){series.calculateChildrenAreas(child,child.values)}}};TreemapSeries.prototype.createList=function(e){var chart=this.chart,breadcrumbs=chart.breadcrumbs,list=[];if(breadcrumbs){var currentLevelNumber=0;list.push({level:currentLevelNumber,levelOptions:chart.series[0]});var node=e.target.nodeMap[e.newRootId];var extraNodes=[];while(node.parent||node.parent===""){extraNodes.push(node);node=e.target.nodeMap[node.parent]}for(var _i=0,_a=extraNodes.reverse();_i<_a.length;_i++){var node_1=_a[_i];list.push({level:++currentLevelNumber,levelOptions:node_1})}if(list.length<=1){list.length=0}}return list};TreemapSeries.prototype.drawDataLabels=function(){var _a;var series=this,mapOptionsToLevel=series.mapOptionsToLevel,points=series.points.filter(function(n){return n.node.visible});var options,level;for(var _i=0,points_1=points;_i<points_1.length;_i++){var point=points_1[_i];level=mapOptionsToLevel[point.node.level];options={style:{}};if(!point.node.isLeaf){options.enabled=false}if(level&&level.dataLabels){options=merge(options,level.dataLabels);series.hasDataLabels=function(){return true}}if(point.shapeArgs){var css={width:"".concat(point.shapeArgs.width||0,"px"),lineClamp:Math.floor((point.shapeArgs.height||0)/16)};extend(options.style,css);(_a=point.dataLabel)===null||_a===void 0?void 0:_a.css(css)}point.dlOptions=merge(options,point.options.dataLabels)}_super.prototype.drawDataLabels.call(this)};TreemapSeries.prototype.drawPoints=function(points){if(points===void 0){points=this.points}var series=this,chart=series.chart,renderer=chart.renderer,styledMode=chart.styledMode,options=series.options,shadow=styledMode?{}:options.shadow,borderRadius=options.borderRadius,withinAnimationLimit=chart.pointCount<options.animationLimit,allowTraversingTree=options.allowTraversingTree;for(var _i=0,points_2=points;_i<points_2.length;_i++){var point=points_2[_i];var levelDynamic=point.node.levelDynamic,animatableAttribs={},attribs={},css={},groupKey="level-group-"+point.node.level,hasGraphic=!!point.graphic,shouldAnimate=withinAnimationLimit&&hasGraphic,shapeArgs=point.shapeArgs;if(point.shouldDraw()){point.isInside=true;if(borderRadius){attribs.r=borderRadius}merge(true,shouldAnimate?animatableAttribs:attribs,hasGraphic?shapeArgs:{},styledMode?{}:series.pointAttribs(point,point.selected?"select":void 0));if(series.colorAttribs&&styledMode){extend(css,series.colorAttribs(point))}if(!series[groupKey]){series[groupKey]=renderer.g(groupKey).attr({zIndex:1e3-(levelDynamic||0)}).add(series.group);series[groupKey].survive=true}}point.draw({animatableAttribs:animatableAttribs,attribs:attribs,css:css,group:series[groupKey],imageUrl:point.imageUrl,renderer:renderer,shadow:shadow,shapeArgs:shapeArgs,shapeType:point.shapeType});if(allowTraversingTree&&point.graphic){point.drillId=options.interactByLeaf?series.drillToByLeaf(point):series.drillToByGroup(point)}}};TreemapSeries.prototype.drillToByGroup=function(point){var drillId=false;if(!point.node.isLeaf&&point.node.level-this.nodeMap[this.rootNode].level===1){drillId=point.id}return drillId};TreemapSeries.prototype.drillToByLeaf=function(point){var traverseToLeaf=point.series.options.traverseToLeaf;var drillId=false,nodeParent;if(point.node.parent!==this.rootNode&&point.node.isLeaf){if(traverseToLeaf){drillId=point.id}else{nodeParent=point.node;while(!drillId){if(typeof nodeParent.parent!=="undefined"){nodeParent=this.nodeMap[nodeParent.parent]}if(nodeParent.parent===this.rootNode){drillId=nodeParent.id}}}}return drillId};TreemapSeries.prototype.drillToNode=function(id,redraw){error(32,false,void 0,{"treemap.drillToNode":"use treemap.setRootNode"});this.setRootNode(id,redraw)};TreemapSeries.prototype.drillUp=function(){var series=this,node=series.nodeMap[series.rootNode];if(node&&isString(node.parent)){series.setRootNode(node.parent,true,{trigger:"traverseUpButton"})}};TreemapSeries.prototype.getExtremes=function(){var _a=_super.prototype.getExtremes.call(this,this.colorValueData),dataMin=_a.dataMin,dataMax=_a.dataMax;this.valueMin=dataMin;this.valueMax=dataMax;return _super.prototype.getExtremes.call(this)};TreemapSeries.prototype.getListOfParents=function(data,existingIds){var arr=isArray(data)?data:[],ids=isArray(existingIds)?existingIds:[],listOfParents=arr.reduce(function(prev,curr,i){var parent=pick(curr.parent,"");if(typeof prev[parent]==="undefined"){prev[parent]=[]}prev[parent].push(i);return prev},{"":[]});for(var _i=0,_a=Object.keys(listOfParents);_i<_a.length;_i++){var parent_1=_a[_i];var children=listOfParents[parent_1];if(parent_1!==""&&ids.indexOf(parent_1)===-1){for(var _b=0,children_4=children;_b<children_4.length;_b++){var child=children_4[_b];listOfParents[""].push(child)}delete listOfParents[parent_1]}}return listOfParents};TreemapSeries.prototype.getTree=function(){var series=this,allIds=this.data.map(function(d){return d.id}),parentList=series.getListOfParents(this.data,allIds);series.nodeMap={};series.nodeList=[];return series.buildTree("",-1,0,parentList)};TreemapSeries.prototype.buildTree=function(id,index,level,list,parent){var series=this,children=[],point=series.points[index];var height=0,child;for(var _i=0,_a=list[id]||[];_i<_a.length;_i++){var i=_a[_i];child=series.buildTree(series.points[i].id,i,level+1,list,id);height=Math.max(child.height+1,height);children.push(child)}var node=(new series.NodeClass).init(id,index,children,height,level,series,parent);for(var _b=0,children_5=children;_b<children_5.length;_b++){var child_1=children_5[_b];child_1.parentNode=node}series.nodeMap[node.id]=node;series.nodeList.push(node);if(point){point.node=node;node.point=point}return node};TreemapSeries.prototype.hasData=function(){return!!this.dataTable.rowCount};TreemapSeries.prototype.init=function(chart,options){var series=this,breadcrumbsOptions=merge(options.drillUpButton,options.breadcrumbs),setOptionsEvent=addEvent(series,"setOptions",function(event){var options=event.userOptions;if(defined(options.allowDrillToNode)&&!defined(options.allowTraversingTree)){options.allowTraversingTree=options.allowDrillToNode;delete options.allowDrillToNode}if(defined(options.drillUpButton)&&!defined(options.traverseUpButton)){options.traverseUpButton=options.drillUpButton;delete options.drillUpButton}});_super.prototype.init.call(this,chart,options);delete series.opacity;series.eventsToUnbind.push(setOptionsEvent);if(series.options.allowTraversingTree){series.eventsToUnbind.push(addEvent(series,"click",series.onClickDrillToNode));series.eventsToUnbind.push(addEvent(series,"setRootNode",function(e){var chart=series.chart;if(chart.breadcrumbs){chart.breadcrumbs.updateProperties(series.createList(e))}}));series.eventsToUnbind.push(addEvent(series,"update",function(e,redraw){var breadcrumbs=this.chart.breadcrumbs;if(breadcrumbs&&e.options.breadcrumbs){breadcrumbs.update(e.options.breadcrumbs)}}));series.eventsToUnbind.push(addEvent(series,"destroy",function destroyEvents(e){var chart=this.chart;if(chart.breadcrumbs&&!e.keepEventsForUpdate){chart.breadcrumbs.destroy();chart.breadcrumbs=void 0}}))}if(!chart.breadcrumbs){chart.breadcrumbs=new Breadcrumbs(chart,breadcrumbsOptions)}series.eventsToUnbind.push(addEvent(chart.breadcrumbs,"up",function(e){var drillUpsNumber=this.level-e.newLevel;for(var i=0;i<drillUpsNumber;i++){series.drillUp()}}))};TreemapSeries.prototype.onClickDrillToNode=function(event){var series=this,point=event.point,drillId=point&&point.drillId;if(isString(drillId)){point.setState("");series.setRootNode(drillId,true,{trigger:"click"})}};TreemapSeries.prototype.pointAttribs=function(point,state){var series=this,mapOptionsToLevel=isObject(series.mapOptionsToLevel)?series.mapOptionsToLevel:{},level=point&&mapOptionsToLevel[point.node.level]||{},options=this.options,stateOptions=state&&options.states&&options.states[state]||{},className=point&&point.getClassName()||"",attr={stroke:point&&point.borderColor||level.borderColor||stateOptions.borderColor||options.borderColor,"stroke-width":pick(point&&point.borderWidth,level.borderWidth,stateOptions.borderWidth,options.borderWidth),dashstyle:point&&point.borderDashStyle||level.borderDashStyle||stateOptions.borderDashStyle||options.borderDashStyle,fill:point&&point.color||this.color};var opacity;if(className.indexOf("highcharts-above-level")!==-1){attr.fill="none";attr["stroke-width"]=0}else if(className.indexOf("highcharts-internal-node-interactive")!==-1){opacity=pick(stateOptions.opacity,options.opacity);attr.fill=color(attr.fill).setOpacity(opacity).get();attr.cursor="pointer"}else if(className.indexOf("highcharts-internal-node")!==-1){attr.fill="none"}else if(state){attr.fill=color(attr.fill).brighten(stateOptions.brightness).get()}return attr};TreemapSeries.prototype.setColorRecursive=function(node,parentColor,colorIndex,index,siblings){var series=this,chart=series&&series.chart,colors=chart&&chart.options&&chart.options.colors;if(node){var colorInfo=getColor(node,{colors:colors,index:index,mapOptionsToLevel:series.mapOptionsToLevel,parentColor:parentColor,parentColorIndex:colorIndex,series:series,siblings:siblings}),point=series.points[node.i];if(point){point.color=colorInfo.color;point.colorIndex=colorInfo.colorIndex}var i=-1;for(var _i=0,_a=node.children||[];_i<_a.length;_i++){var child=_a[_i];series.setColorRecursive(child,colorInfo.color,colorInfo.colorIndex,++i,node.children.length)}}};TreemapSeries.prototype.setPointValues=function(){var series=this;var points=series.points,xAxis=series.xAxis,yAxis=series.yAxis;var styledMode=series.chart.styledMode;var getStrokeWidth=function(point){return styledMode?0:series.pointAttribs(point)["stroke-width"]||0};for(var _i=0,points_3=points;_i<points_3.length;_i++){var point=points_3[_i];var _a=point.node,values=_a.pointValues,visible=_a.visible;if(values&&visible){var height=values.height,width=values.width,x=values.x,y=values.y;var strokeWidth=getStrokeWidth(point);var x1=crisp(xAxis.toPixels(x,true),strokeWidth,true);var x2=crisp(xAxis.toPixels(x+width,true),strokeWidth,true);var y1=crisp(yAxis.toPixels(y,true),strokeWidth,true);var y2=crisp(yAxis.toPixels(y+height,true),strokeWidth,true);var shapeArgs={x:Math.min(x1,x2),y:Math.min(y1,y2),width:Math.abs(x2-x1),height:Math.abs(y2-y1)};point.plotX=shapeArgs.x+shapeArgs.width/2;point.plotY=shapeArgs.y+shapeArgs.height/2;point.shapeArgs=shapeArgs}else{delete point.plotX;delete point.plotY}}};TreemapSeries.prototype.setRootNode=function(id,redraw,eventArguments){var series=this,eventArgs=extend({newRootId:id,previousRootId:series.rootNode,redraw:pick(redraw,true),series:series},eventArguments);var defaultFn=function(args){var series=args.series;series.idPreviousRoot=args.previousRootId;series.rootNode=args.newRootId;series.isDirty=true;if(args.redraw){series.chart.redraw()}};fireEvent(series,"setRootNode",eventArgs,defaultFn)};TreemapSeries.prototype.setState=function(state){this.options.inactiveOtherPoints=true;_super.prototype.setState.call(this,state,false);this.options.inactiveOtherPoints=false};TreemapSeries.prototype.setTreeValues=function(tree){var series=this,options=series.options,idRoot=series.rootNode,mapIdToNode=series.nodeMap,nodeRoot=mapIdToNode[idRoot],levelIsConstant=typeof options.levelIsConstant==="boolean"?options.levelIsConstant:true,children=[],point=series.points[tree.i];var childrenTotal=0;for(var _i=0,_a=tree.children;_i<_a.length;_i++){var child=_a[_i];child=series.setTreeValues(child);children.push(child);if(!child.ignore){childrenTotal+=child.val}}stableSort(children,function(a,b){return(a.sortIndex||0)-(b.sortIndex||0)});var val=pick(point&&point.options.value,childrenTotal);if(point){point.value=val}extend(tree,{children:children,childrenTotal:childrenTotal,ignore:!(pick(point&&point.visible,true)&&val>0),isLeaf:tree.visible&&!childrenTotal,levelDynamic:tree.level-(levelIsConstant?0:nodeRoot.level),name:pick(point&&point.name,""),sortIndex:pick(point&&point.sortIndex,-val),val:val});return tree};TreemapSeries.prototype.sliceAndDice=function(parent,children){return this.algorithmFill(true,parent,children)};TreemapSeries.prototype.squarified=function(parent,children){return this.algorithmLowAspectRatio(true,parent,children)};TreemapSeries.prototype.strip=function(parent,children){return this.algorithmLowAspectRatio(false,parent,children)};TreemapSeries.prototype.stripes=function(parent,children){return this.algorithmFill(false,parent,children)};TreemapSeries.prototype.translate=function(){var series=this,options=series.options;var rootId=updateRootId(series),rootNode,pointValues,seriesArea,val;_super.prototype.translate.call(this);var tree=series.tree=series.getTree();rootNode=series.nodeMap[rootId];if(rootId!==""&&!rootNode){series.setRootNode("",false);rootId=series.rootNode;rootNode=series.nodeMap[rootId]}series.mapOptionsToLevel=getLevelOptions({from:rootNode.level+1,levels:options.levels,to:tree.height,defaults:{levelIsConstant:series.options.levelIsConstant,colorByPoint:options.colorByPoint}});TreemapUtilities.recursive(series.nodeMap[series.rootNode],function(node){var p=node.parent;var next=false;node.visible=true;if(p||p===""){next=series.nodeMap[p]}return next});TreemapUtilities.recursive(series.nodeMap[series.rootNode].children,function(children){var next=false;for(var _i=0,children_6=children;_i<children_6.length;_i++){var child=children_6[_i];child.visible=true;if(child.children.length){next=(next||[]).concat(child.children)}}return next});series.setTreeValues(tree);series.axisRatio=series.xAxis.len/series.yAxis.len;series.nodeMap[""].pointValues=pointValues={x:0,y:0,width:axisMax,height:axisMax};series.nodeMap[""].values=seriesArea=merge(pointValues,{width:pointValues.width*series.axisRatio,direction:options.layoutStartingDirection==="vertical"?0:1,val:tree.val});series.calculateChildrenAreas(tree,seriesArea);if(!series.colorAxis&&!options.colorByPoint){series.setColorRecursive(series.tree)}if(options.allowTraversingTree){val=rootNode.pointValues;series.xAxis.setExtremes(val.x,val.x+val.width,false);series.yAxis.setExtremes(val.y,val.y+val.height,false);series.xAxis.setScale();series.yAxis.setScale()}series.setPointValues()};TreemapSeries.defaultOptions=merge(ScatterSeries.defaultOptions,TreemapSeriesDefaults);return TreemapSeries}(ScatterSeries);extend(TreemapSeries.prototype,{buildKDTree:noop,colorAttribs:ColorMapComposition.seriesMembers.colorAttribs,colorKey:"colorValue",directTouch:true,getExtremesFromAll:true,getSymbol:noop,optionalAxis:"colorAxis",parallelArrays:["x","y","value","colorValue"],pointArrayMap:["value","colorValue"],pointClass:TreemapPoint,NodeClass:TreemapNode,trackerGroups:["group","dataLabelsGroup"],utils:TreemapUtilities});ColorMapComposition.compose(TreemapSeries);SeriesRegistry.registerSeriesType("treemap",TreemapSeries);export default TreemapSeries;