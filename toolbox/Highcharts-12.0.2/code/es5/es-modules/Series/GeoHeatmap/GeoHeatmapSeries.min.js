"use strict";var __extends=this&&this.__extends||function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(Object.prototype.hasOwnProperty.call(b,p))d[p]=b[p]};return extendStatics(d,b)};return function(d,b){if(typeof b!=="function"&&b!==null)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();import A from"../../Core/Animation/AnimationUtilities.js";var animObject=A.animObject,stop=A.stop;import GeoHeatmapPoint from"./GeoHeatmapPoint.js";import H from"../../Core/Globals.js";var noop=H.noop;import IU from"../InterpolationUtilities.js";var colorFromPoint=IU.colorFromPoint,getContext=IU.getContext;import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";var MapSeries=SeriesRegistry.seriesTypes.map;import U from"../../Core/Utilities.js";var addEvent=U.addEvent,extend=U.extend,isNumber=U.isNumber,isObject=U.isObject,merge=U.merge,pick=U.pick;function normalizeLonValue(lon){return lon-Math.floor((lon+180)/360)*360}function scaledPointPos(lon,lat,canvasWidth,canvasHeight,colsize,rowsize){return Math.ceil(canvasWidth*(canvasHeight-1-(lat+90)/rowsize)+(lon+180)/colsize)}var GeoHeatmapSeries=function(_super){__extends(GeoHeatmapSeries,_super);function GeoHeatmapSeries(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.isDirtyCanvas=true;return _this}GeoHeatmapSeries.prototype.update=function(){var series=this;series.options=merge(series.options,arguments[0]);if(series.getInterpolation().enabled){series.isDirtyCanvas=true;series.points.forEach(function(point){if(point.graphic){point.graphic.destroy();delete point.graphic}})}_super.prototype.update.apply(series,arguments)};GeoHeatmapSeries.prototype.translate=function(){if(this.getInterpolation().enabled&&this.image&&!this.isDirty&&!this.isDirtyData){return}_super.prototype.translate.apply(this,arguments)};GeoHeatmapSeries.prototype.getInterpolation=function(){if(!isObject(this.options.interpolation)){return{blur:1,enabled:this.options.interpolation}}return this.options.interpolation};GeoHeatmapSeries.prototype.drawPoints=function(){var series=this,chart=series.chart,mapView=chart.mapView,seriesOptions=series.options;if(series.getInterpolation().enabled&&mapView&&series.bounds){var ctx=series.context||getContext(series),canvas=series.canvas,colorAxis=series.colorAxis,image_1=series.image,chart_1=series.chart,points=series.points,_a=[pick(seriesOptions.colsize,1),pick(seriesOptions.rowsize,1)],colsize=_a[0],rowsize=_a[1],topLeft=mapView.projectedUnitsToPixels({x:series.bounds.x1,y:series.bounds.y2}),bottomRight=mapView.projectedUnitsToPixels({x:series.bounds.x2,y:series.bounds.y1});if(canvas&&ctx&&colorAxis&&topLeft&&bottomRight){var dimensions_1={x:topLeft.x,y:topLeft.y,width:bottomRight.x-topLeft.x,height:bottomRight.y-topLeft.y};if(series.isDirtyCanvas||series.isDirtyData||mapView.projection.options.name==="Orthographic"){series.isDirtyCanvas=true;var canvasWidth=canvas.width=~~(360/colsize)+1,canvasHeight=canvas.height=~~(180/rowsize)+1,canvasArea=canvasWidth*canvasHeight,pixelData=new Uint8ClampedArray(canvasArea*4);series.directTouch=false;for(var i=0;i<points.length;i++){var p=points[i],sourceArr=new Uint8ClampedArray(colorFromPoint(p.value,p)),_b=p.options,lon=_b.lon,lat=_b.lat;if(isNumber(lon)&&isNumber(lat)){pixelData.set(sourceArr,scaledPointPos(lon,lat,canvasWidth,canvasHeight,colsize,rowsize)*4)}}var blur_1=series.getInterpolation().blur,blurFactor=blur_1===0?1:blur_1*11,upscaledWidth=~~(canvasWidth*blurFactor),upscaledHeight=~~(canvasHeight*blurFactor),projectedWidth=~~dimensions_1.width,projectedHeight=~~dimensions_1.height,img=new ImageData(pixelData,canvasWidth,canvasHeight);canvas.width=upscaledWidth;canvas.height=upscaledHeight;ctx.putImageData(img,0,0);ctx.globalCompositeOperation="copy";ctx.drawImage(canvas,0,0,img.width,img.height,0,0,canvas.width,canvas.height);var cartesianImageData=ctx.getImageData(0,0,canvas.width,canvas.height),projectedPixelData=this.getProjectedImageData(mapView,projectedWidth,projectedHeight,cartesianImageData,canvas,dimensions_1.x,dimensions_1.y),projectedImg=new ImageData(projectedPixelData,projectedWidth,projectedHeight);ctx.globalCompositeOperation="copy";canvas.width=projectedWidth;canvas.height=projectedHeight;ctx.putImageData(projectedImg,0,0)}if(image_1){if(chart_1.renderer.globalAnimation&&chart_1.hasRendered){var startX_1=Number(image_1.attr("x")),startY_1=Number(image_1.attr("y")),startWidth_1=Number(image_1.attr("width")),startHeight_1=Number(image_1.attr("height"));var step_1=function(now,fx){image_1.attr({x:startX_1+(dimensions_1.x-startX_1)*fx.pos,y:startY_1+(dimensions_1.y-startY_1)*fx.pos,width:startWidth_1+(dimensions_1.width-startWidth_1)*fx.pos,height:startHeight_1+(dimensions_1.height-startHeight_1)*fx.pos})};var animOptions=merge(animObject(chart_1.renderer.globalAnimation)),userStep_1=animOptions.step;animOptions.step=function(){if(userStep_1){userStep_1.apply(this,arguments)}step_1.apply(this,arguments)};image_1.attr(merge({animator:0},series.isDirtyCanvas?{href:canvas.toDataURL("image/png",1)}:void 0)).animate({animator:1},animOptions)}else{stop(image_1);image_1.attr(merge(dimensions_1,series.isDirtyCanvas?{href:canvas.toDataURL("image/png",1)}:void 0))}}else{series.image=chart_1.renderer.image(canvas.toDataURL("image/png",1)).attr(dimensions_1).add(series.group)}series.isDirtyCanvas=false}}else{_super.prototype.drawPoints.apply(series,arguments)}};GeoHeatmapSeries.prototype.getProjectedImageData=function(mapView,projectedWidth,projectedHeight,cartesianImageData,canvas,horizontalShift,verticalShift){var _a;var projectedPixelData=new Uint8ClampedArray(projectedWidth*projectedHeight*4),lambda=pick((_a=mapView.projection.options.rotation)===null||_a===void 0?void 0:_a[0],0),widthFactor=canvas.width/360,heightFactor=-1*canvas.height/180;var y=-1;for(var i=0;i<projectedPixelData.length;i+=4){var x=i/4%projectedWidth;if(x===0){y++}var projectedCoords=mapView.pixelsToLonLat({x:horizontalShift+x,y:verticalShift+y});if(projectedCoords){if(projectedCoords.lon>-180-lambda&&projectedCoords.lon<180-lambda){projectedCoords.lon=normalizeLonValue(projectedCoords.lon)}var projected=[projectedCoords.lon,projectedCoords.lat],cvs2PixelX=projected[0]*widthFactor+canvas.width/2,cvs2PixelY=projected[1]*heightFactor+canvas.height/2;if(cvs2PixelX>=0&&cvs2PixelX<=canvas.width&&cvs2PixelY>=0&&cvs2PixelY<=canvas.height){var redPos=Math.floor(cvs2PixelY)*canvas.width*4+Math.round(cvs2PixelX)*4;projectedPixelData[i]=cartesianImageData.data[redPos];projectedPixelData[i+1]=cartesianImageData.data[redPos+1];projectedPixelData[i+2]=cartesianImageData.data[redPos+2];projectedPixelData[i+3]=cartesianImageData.data[redPos+3]}}}return projectedPixelData};GeoHeatmapSeries.prototype.searchPoint=function(e,compareX){var series=this,chart=this.chart,mapView=chart.mapView;if(mapView&&series.bounds&&series.image&&chart.tooltip&&chart.tooltip.options.enabled){if(!chart.pointer.hasDragged&&(+series.image.attr("animator")<=.01||+series.image.attr("animator")>=.99)){var topLeft=mapView.projectedUnitsToPixels({x:series.bounds.x1,y:series.bounds.y2}),bottomRight=mapView.projectedUnitsToPixels({x:series.bounds.x2,y:series.bounds.y1});chart.pointer.normalize(e);if(e.lon&&e.lat&&topLeft&&bottomRight&&e.chartX-chart.plotLeft>topLeft.x&&e.chartX-chart.plotLeft<bottomRight.x&&e.chartY-chart.plotTop>topLeft.y&&e.chartY-chart.plotTop<bottomRight.y){return this.searchKDTree({clientX:e.chartX,lon:normalizeLonValue(e.lon),lat:e.lat},compareX,e)}}else{chart.tooltip.destroy()}}};GeoHeatmapSeries.defaultOptions=merge(MapSeries.defaultOptions,{nullColor:"transparent",tooltip:{pointFormat:"Lat: {point.lat}, Lon: {point.lon}, Value: {point.value}<br/>"},borderWidth:0,colsize:1,rowsize:1,stickyTracking:true,interpolation:{enabled:false,blur:1}});return GeoHeatmapSeries}(MapSeries);addEvent(GeoHeatmapSeries,"afterDataClassLegendClick",function(){this.isDirtyCanvas=true;this.drawPoints()});extend(GeoHeatmapSeries.prototype,{type:"geoheatmap",applyJitter:noop,pointClass:GeoHeatmapPoint,pointArrayMap:["lon","lat","value"],kdAxisArray:["lon","lat"]});SeriesRegistry.registerSeriesType("geoheatmap",GeoHeatmapSeries);export default GeoHeatmapSeries;"";