"use strict";import QuadTreeNode from"./QuadTreeNode.js";var QuadTree=function(){function QuadTree(x,y,width,height){this.box={left:x,top:y,width:width,height:height};this.maxDepth=25;this.root=new QuadTreeNode(this.box);this.root.isInternal=true;this.root.isRoot=true;this.root.divideBox()}QuadTree.prototype.calculateMassAndCenter=function(){this.visitNodeRecursive(null,null,function(node){node.updateMassAndCenter()})};QuadTree.prototype.insertNodes=function(points){for(var _i=0,points_1=points;_i<points_1.length;_i++){var point=points_1[_i];this.root.insert(point,this.maxDepth)}};QuadTree.prototype.visitNodeRecursive=function(node,beforeCallback,afterCallback){var goFurther;if(!node){node=this.root}if(node===this.root&&beforeCallback){goFurther=beforeCallback(node)}if(goFurther===false){return}for(var _i=0,_a=node.nodes;_i<_a.length;_i++){var qtNode=_a[_i];if(qtNode.isInternal){if(beforeCallback){goFurther=beforeCallback(qtNode)}if(goFurther===false){continue}this.visitNodeRecursive(qtNode,beforeCallback,afterCallback)}else if(qtNode.body){if(beforeCallback){beforeCallback(qtNode.body)}}if(afterCallback){afterCallback(qtNode)}}if(node===this.root&&afterCallback){afterCallback(node)}};return QuadTree}();export default QuadTree;