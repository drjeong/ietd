"use strict";var __extends=this&&this.__extends||function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(Object.prototype.hasOwnProperty.call(b,p))d[p]=b[p]};return extendStatics(d,b)};return function(d,b){if(typeof b!=="function"&&b!==null)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();var __spreadArray=this&&this.__spreadArray||function(to,from,pack){if(pack||arguments.length===2)for(var i=0,l=from.length,ar;i<l;i++){if(ar||!(i in from)){if(!ar)ar=Array.prototype.slice.call(from,0,i);ar[i]=from[i]}}return to.concat(ar||Array.prototype.slice.call(from))};import FlowMapPoint from"./FlowMapPoint.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";var Point=SeriesRegistry.series.prototype.pointClass,_a=SeriesRegistry.seriesTypes,ColumnSeries=_a.column,MapSeries=_a.map,MapLineSeries=_a.mapline;import U from"../../Core/Utilities.js";var addEvent=U.addEvent,arrayMax=U.arrayMax,arrayMin=U.arrayMin,defined=U.defined,extend=U.extend,isArray=U.isArray,merge=U.merge,pick=U.pick,relativeLength=U.relativeLength;var FlowMapSeries=function(_super){__extends(FlowMapSeries,_super);function FlowMapSeries(){return _super!==null&&_super.apply(this,arguments)||this}FlowMapSeries.getLength=function(x,y){return Math.sqrt(x*x+y*y)};FlowMapSeries.normalize=function(x,y){var length=this.getLength(x,y);return[x/length,y/length]};FlowMapSeries.markerEndPath=function(lCorner,rCorner,topCorner,options){var width=relativeLength(options.width||0,this.getLength(rCorner[0]-lCorner[0],rCorner[1]-lCorner[1]));var type=options.markerType||"arrow",_a=this.normalize(rCorner[0]-lCorner[0],rCorner[1]-lCorner[1]),edgeX=_a[0],edgeY=_a[1];var path=[];if(type==="arrow"){var x=lCorner[0],y=lCorner[1];x-=edgeX*width;y-=edgeY*width;path.push(["L",x,y]);path.push(["L",topCorner[0],topCorner[1]]);x=rCorner[0],y=rCorner[1];x+=edgeX*width;y+=edgeY*width;path.push(["L",x,y])}if(type==="mushroom"){var xLeft=lCorner[0],yLeft=lCorner[1],xRight=rCorner[0],yRight=rCorner[1];var xTop=topCorner[0],yTop=topCorner[1],xMid=(xRight-xLeft)/2+xLeft,yMid=(yRight-yLeft)/2+yLeft,xControl=(xTop-xMid)*2+xMid,yControl=(yTop-yMid)*2+yMid;xLeft-=edgeX*width;yLeft-=edgeY*width;path.push(["L",xLeft,yLeft]);xRight+=edgeX*width;yRight+=edgeY*width;path.push(["Q",xControl,yControl,xRight,yRight])}return path};FlowMapSeries.prototype.animate=function(init){var series=this,points=series.points;if(!init){points.forEach(function(point){if(point.shapeArgs&&isArray(point.shapeArgs.d)&&point.shapeArgs.d.length){var path=point.shapeArgs.d,x=path[0][1],y=path[0][2];if(x&&y){var start=[];for(var i=0;i<path.length;i++){start.push(__spreadArray([],path[i],true));for(var j=1;j<path[i].length;j++){start[i][j]=j%2?x:y}}if(point.graphic){point.graphic.attr({d:start});point.graphic.animate({d:path})}}}})}};FlowMapSeries.prototype.getLinkWidth=function(point){var width=this.options.width,weight=point.options.weight||this.options.weight;point.options.weight=weight;if(width&&!weight){return width}var smallestWeight=this.smallestWeight,greatestWeight=this.greatestWeight;if(!defined(weight)||!smallestWeight||!greatestWeight){return 0}var minWidthLimit=this.options.minWidth,maxWidthLimit=this.options.maxWidth;return(weight-smallestWeight)*(maxWidthLimit-minWidthLimit)/(greatestWeight-smallestWeight||1)+minWidthLimit};FlowMapSeries.prototype.autoCurve=function(fromX,fromY,toX,toY,centerX,centerY){var linkV={x:toX-fromX,y:toY-fromY},half={x:(toX-fromX)/2+fromX,y:(toY-fromY)/2+fromY},centerV={x:half.x-centerX,y:half.y-centerY};var dot=linkV.x*centerV.x+linkV.y*centerV.y,det=linkV.x*centerV.y-linkV.y*centerV.x;var angle=Math.atan2(det,dot),angleDeg=angle*180/Math.PI;if(angleDeg<0){angleDeg=360+angleDeg}angle=angleDeg*Math.PI/180;return-Math.sin(angle)*.7};FlowMapSeries.prototype.pointAttribs=function(point,state){var attrs=MapSeries.prototype.pointAttribs.call(this,point,state);attrs.fill=pick(point.options.fillColor,point.options.color,this.options.fillColor==="none"?null:this.options.fillColor,this.color);attrs["fill-opacity"]=pick(point.options.fillOpacity,this.options.fillOpacity);attrs["stroke-width"]=pick(point.options.lineWidth,this.options.lineWidth,1);if(point.options.opacity){attrs.opacity=point.options.opacity}return attrs};FlowMapSeries.prototype.translate=function(){var _this=this;if(this.chart.hasRendered&&(this.isDirtyData||!this.hasRendered)){this.processData();this.generatePoints()}var weights=[];var averageX=0,averageY=0;this.points.forEach(function(point){var chart=_this.chart,mapView=chart.mapView,options=point.options,dirtySeries=function(){point.series.isDirty=true},getPointXY=function(pointId){var foundPoint=chart.get(pointId);if(foundPoint instanceof Point&&foundPoint.plotX&&foundPoint.plotY){addEvent(foundPoint,"update",dirtySeries);return{x:foundPoint.plotX,y:foundPoint.plotY}}},getLonLatXY=function(lonLat){if(isArray(lonLat)){return{lon:lonLat[0],lat:lonLat[1]}}return lonLat};var fromPos,toPos;if(typeof options.from==="string"){fromPos=getPointXY(options.from)}else if(typeof options.from==="object"&&mapView){fromPos=mapView.lonLatToPixels(getLonLatXY(options.from))}if(typeof options.to==="string"){toPos=getPointXY(options.to)}else if(typeof options.to==="object"&&mapView){toPos=mapView.lonLatToPixels(getLonLatXY(options.to))}point.fromPos=fromPos;point.toPos=toPos;if(fromPos&&toPos){averageX+=(fromPos.x+toPos.x)/2;averageY+=(fromPos.y+toPos.y)/2}if(pick(point.options.weight,_this.options.weight)){weights.push(pick(point.options.weight,_this.options.weight))}});this.smallestWeight=arrayMin(weights);this.greatestWeight=arrayMax(weights);this.centerOfPoints={x:averageX/this.points.length,y:averageY/this.points.length};this.points.forEach(function(point){if(!_this.getLinkWidth(point)){point.shapeArgs={d:[]};return}if(point.fromPos){point.plotX=point.fromPos.x;point.plotY=point.fromPos.y}point.shapeType="path";point.shapeArgs=_this.getPointShapeArgs(point);point.color=pick(point.options.color,point.series.color)})};FlowMapSeries.prototype.getPointShapeArgs=function(point){var _a;var fromPos=point.fromPos,toPos=point.toPos;if(!fromPos||!toPos){return{}}var finalWidth=this.getLinkWidth(point)/2,pointOptions=point.options,markerEndOptions=merge(this.options.markerEnd,pointOptions.markerEnd),growTowards=pick(pointOptions.growTowards,this.options.growTowards),fromX=fromPos.x||0,fromY=fromPos.y||0;var toX=toPos.x||0,toY=toPos.y||0,curveFactor=pick(pointOptions.curveFactor,this.options.curveFactor),offset=markerEndOptions&&markerEndOptions.enabled&&markerEndOptions.height||0;if(!defined(curveFactor)){curveFactor=this.autoCurve(fromX,fromY,toX,toY,this.centerOfPoints.x,this.centerOfPoints.y)}if(offset){offset=relativeLength(offset,finalWidth*4);var dX_1=toX-fromX,dY_1=toY-fromY;dX_1*=.5;dY_1*=.5;var mX_1=fromX+dX_1,mY_1=fromY+dY_1;var tmp_1=dX_1;dX_1=dY_1;dY_1=-tmp_1;var arcPointX_1=mX_1+dX_1*curveFactor,arcPointY_1=mY_1+dY_1*curveFactor;var _b=FlowMapSeries.normalize(arcPointX_1-toX,arcPointY_1-toY),offsetX=_b[0],offsetY=_b[1];offsetX*=offset;offsetY*=offset;toX+=offsetX;toY+=offsetY}var dX=toX-fromX,dY=toY-fromY;dX*=.5;dY*=.5;var mX=fromX+dX,mY=fromY+dY;var tmp=dX;dX=dY;dY=-tmp;var _c=FlowMapSeries.normalize(dX,dY),wX=_c[0],wY=_c[1];var fineTune=1+Math.sqrt(curveFactor*curveFactor)*.25;wX*=finalWidth*fineTune;wY*=finalWidth*fineTune;var arcPointX=mX+dX*curveFactor,arcPointY=mY+dY*curveFactor;var _d=FlowMapSeries.normalize(arcPointX-fromX,arcPointY-fromY),fromXToArc=_d[0],fromYToArc=_d[1];tmp=fromXToArc;fromXToArc=fromYToArc;fromYToArc=-tmp;fromXToArc*=finalWidth;fromYToArc*=finalWidth;var _e=FlowMapSeries.normalize(arcPointX-toX,arcPointY-toY),toXToArc=_e[0],toYToArc=_e[1];tmp=toXToArc;toXToArc=-toYToArc;toYToArc=tmp;toXToArc*=finalWidth;toYToArc*=finalWidth;if(growTowards){fromXToArc/=finalWidth;fromYToArc/=finalWidth;wX/=4;wY/=4}var shapeArgs={d:[["M",fromX-fromXToArc,fromY-fromYToArc],["Q",arcPointX-wX,arcPointY-wY,toX-toXToArc,toY-toYToArc],["L",toX+toXToArc,toY+toYToArc],["Q",arcPointX+wX,arcPointY+wY,fromX+fromXToArc,fromY+fromYToArc],["Z"]]};if(markerEndOptions&&markerEndOptions.enabled&&shapeArgs.d){var marker=FlowMapSeries.markerEndPath([toX-toXToArc,toY-toYToArc],[toX+toXToArc,toY+toYToArc],[toPos.x,toPos.y],markerEndOptions);(_a=shapeArgs.d).splice.apply(_a,__spreadArray([2,0],marker,false))}var fromPoint=point.options.from,toPoint=point.options.to,fromLat=fromPoint.lat,fromLon=fromPoint.lon,toLat=toPoint.lat,toLon=toPoint.lon;if(fromLat&&fromLon){point.options.from="".concat(+fromLat,", ").concat(+fromLon)}if(toLat&&toLon){point.options.to="".concat(+toLat,", ").concat(+toLon)}return shapeArgs};FlowMapSeries.defaultOptions=merge(MapLineSeries.defaultOptions,{animation:true,dataLabels:{enabled:false},fillOpacity:.5,markerEnd:{enabled:true,height:"40%",width:"40%",markerType:"arrow"},width:1,maxWidth:25,minWidth:5,lineWidth:void 0,tooltip:{headerFormat:'<span style="font-size: 0.8em">{series.name}</span><br/>',pointFormat:"{point.options.from} â†’ {point.options.to}: <b>{point.options.weight}</b>"}});return FlowMapSeries}(MapLineSeries);extend(FlowMapSeries.prototype,{pointClass:FlowMapPoint,pointArrayMap:["from","to","weight"],drawPoints:ColumnSeries.prototype.drawPoints,dataColumnKeys:ColumnSeries.prototype.dataColumnKeys,useMapGeometry:true});SeriesRegistry.registerSeriesType("flowmap",FlowMapSeries);export default FlowMapSeries;"";