"use strict";import Color from"../Core/Color/Color.js";import U from"../Core/Utilities.js";var extend=U.extend,isArray=U.isArray,isNumber=U.isNumber,isObject=U.isObject,merge=U.merge,pick=U.pick,relativeLength=U.relativeLength;function getColor(node,options){var index=options.index,mapOptionsToLevel=options.mapOptionsToLevel,parentColor=options.parentColor,parentColorIndex=options.parentColorIndex,series=options.series,colors=options.colors,siblings=options.siblings,points=series.points,chartOptionsChart=series.chart.options.chart;var getColorByPoint,point,level,colorByPoint,colorIndexByPoint,color,colorIndex;var variateColor=function(color){var colorVariation=level&&level.colorVariation;if(colorVariation&&colorVariation.key==="brightness"&&index&&siblings){return Color.parse(color).brighten(colorVariation.to*(index/siblings)).get()}return color};if(node){point=points[node.i];level=mapOptionsToLevel[node.level]||{};getColorByPoint=point&&level.colorByPoint;if(getColorByPoint){colorIndexByPoint=point.index%(colors?colors.length:chartOptionsChart.colorCount);colorByPoint=colors&&colors[colorIndexByPoint]}if(!series.chart.styledMode){color=pick(point&&point.options.color,level&&level.color,colorByPoint,parentColor&&variateColor(parentColor),series.color)}colorIndex=pick(point&&point.options.colorIndex,level&&level.colorIndex,colorIndexByPoint,parentColorIndex,options.colorIndex)}return{color:color,colorIndex:colorIndex}}function getLevelOptions(params){var result={};var defaults,converted,i,from,to,levels;if(isObject(params)){from=isNumber(params.from)?params.from:1;levels=params.levels;converted={};defaults=isObject(params.defaults)?params.defaults:{};if(isArray(levels)){converted=levels.reduce(function(obj,item){var level,levelIsConstant,options;if(isObject(item)&&isNumber(item.level)){options=merge({},item);levelIsConstant=pick(options.levelIsConstant,defaults.levelIsConstant);delete options.levelIsConstant;delete options.level;level=item.level+(levelIsConstant?0:from-1);if(isObject(obj[level])){merge(true,obj[level],options)}else{obj[level]=options}}return obj},{})}to=isNumber(params.to)?params.to:1;for(i=0;i<=to;i++){result[i]=merge({},defaults,isObject(converted[i])?converted[i]:{})}}return result}function setTreeValues(tree,options){var before=options.before,idRoot=options.idRoot,mapIdToNode=options.mapIdToNode,nodeRoot=mapIdToNode[idRoot],levelIsConstant=options.levelIsConstant!==false,points=options.points,point=points[tree.i],optionsPoint=point&&point.options||{},children=[];var childrenTotal=0;tree.levelDynamic=tree.level-(levelIsConstant?0:nodeRoot.level);tree.name=pick(point&&point.name,"");tree.visible=idRoot===tree.id||options.visible===true;if(typeof before==="function"){tree=before(tree,options)}tree.children.forEach(function(child,i){var newOptions=extend({},options);extend(newOptions,{index:i,siblings:tree.children.length,visible:tree.visible});child=setTreeValues(child,newOptions);children.push(child);if(child.visible){childrenTotal+=child.val}});var value=pick(optionsPoint.value,childrenTotal);tree.visible=value>=0&&(childrenTotal>0||tree.visible);tree.children=children;tree.childrenTotal=childrenTotal;tree.isLeaf=tree.visible&&!childrenTotal;tree.val=value;return tree}function updateRootId(series){var rootId,options;if(isObject(series)){options=isObject(series.options)?series.options:{};rootId=pick(series.rootNode,options.rootId,"");if(isObject(series.userOptions)){series.userOptions.rootId=rootId}series.rootNode=rootId}return rootId}function getNodeWidth(series,columnCount){var chart=series.chart,options=series.options,_a=options.nodeDistance,nodeDistance=_a===void 0?0:_a,_b=options.nodeWidth,nodeWidth=_b===void 0?0:_b,_c=chart.plotSizeX,plotSizeX=_c===void 0?1:_c;if(nodeWidth==="auto"){if(typeof nodeDistance==="string"&&/%$/.test(nodeDistance)){var fraction=parseFloat(nodeDistance)/100,total=columnCount+fraction*(columnCount-1);return plotSizeX/total}var nDistance=Number(nodeDistance);return(plotSizeX+nDistance)/(columnCount||1)-nDistance}return relativeLength(nodeWidth,plotSizeX)}var TreeUtilities={getColor:getColor,getLevelOptions:getLevelOptions,getNodeWidth:getNodeWidth,setTreeValues:setTreeValues,updateRootId:updateRootId};export default TreeUtilities;