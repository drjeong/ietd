"use strict";import ControlPoint from"./ControlPoint.js";import MockPoint from"./MockPoint.js";import U from"../../Core/Utilities.js";var ControlTarget;(function(ControlTarget){function addControlPoints(){var _this=this;var controlPoints=this.controlPoints,controlPointsOptions=this.options.controlPoints||[];controlPointsOptions.forEach(function(controlPointOptions,i){var options=U.merge(_this.options.controlPointOptions,controlPointOptions);if(!options.index){options.index=i}controlPointsOptions[i]=options;controlPoints.push(new ControlPoint(_this.chart,_this,options))})}function anchor(point){var plotBox=point.series.getPlotBox(),chart=point.series.chart,box=point.mock?point.toAnchor():chart.tooltip&&chart.tooltip.getAnchor.call({chart:point.series.chart},point)||[0,0,0,0],anchor={x:box[0]+(this.options.x||0),y:box[1]+(this.options.y||0),height:box[2]||0,width:box[3]||0};return{relativePosition:anchor,absolutePosition:U.merge(anchor,{x:anchor.x+(point.mock?plotBox.translateX:chart.plotLeft),y:anchor.y+(point.mock?plotBox.translateY:chart.plotTop)})}}function compose(ControlTargetClass){var controlProto=ControlTargetClass.prototype;if(!controlProto.addControlPoints){U.merge(true,controlProto,{addControlPoints:addControlPoints,anchor:anchor,destroyControlTarget:destroyControlTarget,getPointsOptions:getPointsOptions,linkPoints:linkPoints,point:point,redrawControlPoints:redrawControlPoints,renderControlPoints:renderControlPoints,transform:transform,transformPoint:transformPoint,translate:translate,translatePoint:translatePoint})}}ControlTarget.compose=compose;function destroyControlTarget(){this.controlPoints.forEach(function(controlPoint){return controlPoint.destroy()});this.chart=null;this.controlPoints=null;this.points=null;this.options=null;if(this.annotation){this.annotation=null}}function getPointsOptions(){var options=this.options;return options.points||options.point&&U.splat(options.point)}function linkPoints(){var pointsOptions=this.getPointsOptions(),points=this.points,len=pointsOptions&&pointsOptions.length||0;var i,point;for(i=0;i<len;i++){point=this.point(pointsOptions[i],points[i]);if(!point){points.length=0;return}if(point.mock){point.refresh()}points[i]=point}return points}function point(pointOptions,point){if(pointOptions&&pointOptions.series){return pointOptions}if(!point||point.series===null){if(U.isObject(pointOptions)){point=new MockPoint(this.chart,this,pointOptions)}else if(U.isString(pointOptions)){point=this.chart.get(pointOptions)||null}else if(typeof pointOptions==="function"){var pointConfig=pointOptions.call(point,this);point=pointConfig.series?pointConfig:new MockPoint(this.chart,this,pointOptions)}}return point}function redrawControlPoints(animation){this.controlPoints.forEach(function(controlPoint){return controlPoint.redraw(animation)})}function renderControlPoints(){this.controlPoints.forEach(function(controlPoint){return controlPoint.render()})}function transform(transformation,cx,cy,p1,p2){var _this=this;if(this.chart.inverted){var temp=cx;cx=cy;cy=temp}this.points.forEach(function(_point,i){return _this.transformPoint(transformation,cx,cy,p1,p2,i)},this)}function transformPoint(transformation,cx,cy,p1,p2,i){var point=this.points[i];if(!point.mock){point=this.points[i]=MockPoint.fromPoint(point)}point[transformation](cx,cy,p1,p2)}function translate(dx,dy){this.transform("translate",null,null,dx,dy)}function translatePoint(dx,dy,i){this.transformPoint("translate",null,null,dx,dy,i)}})(ControlTarget||(ControlTarget={}));export default ControlTarget;