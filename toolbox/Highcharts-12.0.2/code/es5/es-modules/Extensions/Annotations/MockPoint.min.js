"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";var seriesProto=SeriesRegistry.series.prototype;import U from"../../Core/Utilities.js";var defined=U.defined,fireEvent=U.fireEvent;var MockPoint=function(){function MockPoint(chart,target,options){this.mock=true;this.point=this;this.series={visible:true,chart:chart,getPlotBox:seriesProto.getPlotBox};this.target=target||null;this.options=options;this.applyOptions(this.getOptions())}MockPoint.fromPoint=function(point){return new MockPoint(point.series.chart,null,{x:point.x,y:point.y,xAxis:point.series.xAxis,yAxis:point.series.yAxis})};MockPoint.pointToPixels=function(point,paneCoordinates){var series=point.series,chart=series.chart;var x=point.plotX||0,y=point.plotY||0,plotBox;if(chart.inverted){if(point.mock){x=point.plotY;y=point.plotX}else{x=chart.plotWidth-(point.plotY||0);y=chart.plotHeight-(point.plotX||0)}}if(series&&!paneCoordinates){plotBox=series.getPlotBox();x+=plotBox.translateX;y+=plotBox.translateY}return{x:x,y:y}};MockPoint.pointToOptions=function(point){return{x:point.x,y:point.y,xAxis:point.series.xAxis,yAxis:point.series.yAxis}};MockPoint.prototype.applyOptions=function(options){this.command=options.command;this.setAxis(options,"x");this.setAxis(options,"y");this.refresh()};MockPoint.prototype.getOptions=function(){return this.hasDynamicOptions()?this.options(this.target):this.options};MockPoint.prototype.hasDynamicOptions=function(){return typeof this.options==="function"};MockPoint.prototype.isInsidePlot=function(){var plotX=this.plotX,plotY=this.plotY,xAxis=this.series.xAxis,yAxis=this.series.yAxis,e={x:plotX,y:plotY,isInsidePlot:true,options:{}};if(xAxis){e.isInsidePlot=defined(plotX)&&plotX>=0&&plotX<=xAxis.len}if(yAxis){e.isInsidePlot=e.isInsidePlot&&defined(plotY)&&plotY>=0&&plotY<=yAxis.len}fireEvent(this.series.chart,"afterIsInsidePlot",e);return e.isInsidePlot};MockPoint.prototype.refresh=function(){var series=this.series,xAxis=series.xAxis,yAxis=series.yAxis,options=this.getOptions();if(xAxis){this.x=options.x;this.plotX=xAxis.toPixels(options.x,true)}else{this.x=void 0;this.plotX=options.x}if(yAxis){this.y=options.y;this.plotY=yAxis.toPixels(options.y,true)}else{this.y=null;this.plotY=options.y}this.isInside=this.isInsidePlot()};MockPoint.prototype.refreshOptions=function(){var series=this.series,xAxis=series.xAxis,yAxis=series.yAxis;this.x=this.options.x=xAxis?this.options.x=xAxis.toValue(this.plotX,true):this.plotX;this.y=this.options.y=yAxis?yAxis.toValue(this.plotY,true):this.plotY};MockPoint.prototype.rotate=function(cx,cy,radians){if(!this.hasDynamicOptions()){var cos=Math.cos(radians),sin=Math.sin(radians),x=this.plotX-cx,y=this.plotY-cy,tx=x*cos-y*sin,ty=x*sin+y*cos;this.plotX=tx+cx;this.plotY=ty+cy;this.refreshOptions()}};MockPoint.prototype.scale=function(cx,cy,sx,sy){if(!this.hasDynamicOptions()){var x=this.plotX*sx,y=this.plotY*sy,tx=(1-sx)*cx,ty=(1-sy)*cy;this.plotX=tx+x;this.plotY=ty+y;this.refreshOptions()}};MockPoint.prototype.setAxis=function(options,xOrY){var axisName=xOrY+"Axis",axisOptions=options[axisName],chart=this.series.chart;this.series[axisName]=typeof axisOptions==="object"?axisOptions:defined(axisOptions)?chart[axisName][axisOptions]||chart.get(axisOptions):null};MockPoint.prototype.toAnchor=function(){var anchor=[this.plotX,this.plotY,0,0];if(this.series.chart.inverted){anchor[0]=this.plotY;anchor[1]=this.plotX}return anchor};MockPoint.prototype.translate=function(_cx,_cy,dx,dy){if(!this.hasDynamicOptions()){this.plotX+=dx;this.plotY+=dy;this.refreshOptions()}};return MockPoint}();export default MockPoint;"";