"use strict";var __extends=this&&this.__extends||function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(Object.prototype.hasOwnProperty.call(b,p))d[p]=b[p]};return extendStatics(d,b)};return function(d,b){if(typeof b!=="function"&&b!==null)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";var SMAIndicator=SeriesRegistry.seriesTypes.sma;import U from"../../../Core/Utilities.js";var extend=U.extend,isArray=U.isArray,merge=U.merge;function getStandardDeviation(arr,index,isOHLC,mean){var arrLen=arr.length;var i=0,std=0,value,variance=0;for(;i<arrLen;i++){value=(isOHLC?arr[i][index]:arr[i])-mean;variance+=value*value}variance=variance/(arrLen-1);std=Math.sqrt(variance);return std}var BBIndicator=function(_super){__extends(BBIndicator,_super);function BBIndicator(){return _super!==null&&_super.apply(this,arguments)||this}BBIndicator.prototype.init=function(){SeriesRegistry.seriesTypes.sma.prototype.init.apply(this,arguments);this.options=merge({topLine:{styles:{lineColor:this.color}},bottomLine:{styles:{lineColor:this.color}}},this.options)};BBIndicator.prototype.getValues=function(series,params){var period=params.period,standardDeviation=params.standardDeviation,xData=[],yData=[],xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,BB=[];var ML,TL,BL,date,slicedX,slicedY,stdDev,point,i;if(xVal.length<period){return}var isOHLC=isArray(yVal[0]);for(i=period;i<=yValLen;i++){slicedX=xVal.slice(i-period,i);slicedY=yVal.slice(i-period,i);point=SeriesRegistry.seriesTypes.sma.prototype.getValues.call(this,{xData:slicedX,yData:slicedY},params);date=point.xData[0];ML=point.yData[0];stdDev=getStandardDeviation(slicedY,params.index,isOHLC,ML);TL=ML+standardDeviation*stdDev;BL=ML-standardDeviation*stdDev;BB.push([date,TL,ML,BL]);xData.push(date);yData.push([TL,ML,BL])}return{values:BB,xData:xData,yData:yData}};BBIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{period:20,standardDeviation:2,index:3},bottomLine:{styles:{lineWidth:1,lineColor:void 0}},topLine:{styles:{lineWidth:1,lineColor:void 0}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>'},marker:{enabled:false},dataGrouping:{approximation:"averages"}});return BBIndicator}(SMAIndicator);extend(BBIndicator.prototype,{areaLinesNames:["top","bottom"],linesApiNames:["topLine","bottomLine"],nameComponents:["period","standardDeviation"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"});MultipleLinesComposition.compose(BBIndicator);SeriesRegistry.registerSeriesType("bb",BBIndicator);export default BBIndicator;"";