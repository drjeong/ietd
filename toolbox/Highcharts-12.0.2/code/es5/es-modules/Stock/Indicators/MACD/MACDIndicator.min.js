"use strict";var __extends=this&&this.__extends||function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(Object.prototype.hasOwnProperty.call(b,p))d[p]=b[p]};return extendStatics(d,b)};return function(d,b){if(typeof b!=="function"&&b!==null)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();import H from"../../../Core/Globals.js";var noop=H.noop;import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";var _a=SeriesRegistry.seriesTypes,ColumnSeries=_a.column,SMAIndicator=_a.sma;import U from"../../../Core/Utilities.js";var extend=U.extend,correctFloat=U.correctFloat,defined=U.defined,merge=U.merge;var MACDIndicator=function(_super){__extends(MACDIndicator,_super);function MACDIndicator(){return _super!==null&&_super.apply(this,arguments)||this}MACDIndicator.prototype.init=function(){SeriesRegistry.seriesTypes.sma.prototype.init.apply(this,arguments);var originalColor=this.color;if(this.options){if(defined(this.colorIndex)){if(this.options.signalLine&&this.options.signalLine.styles&&!this.options.signalLine.styles.lineColor){this.options.colorIndex=this.colorIndex+1;this.getCyclic("color",void 0,this.chart.options.colors);this.options.signalLine.styles.lineColor=this.color}if(this.options.macdLine&&this.options.macdLine.styles&&!this.options.macdLine.styles.lineColor){this.options.colorIndex=this.colorIndex+1;this.getCyclic("color",void 0,this.chart.options.colors);this.options.macdLine.styles.lineColor=this.color}}this.macdZones={zones:this.options.macdLine.zones,startIndex:0};this.signalZones={zones:this.macdZones.zones.concat(this.options.signalLine.zones),startIndex:this.macdZones.zones.length}}this.color=originalColor};MACDIndicator.prototype.toYData=function(point){return[point.y,point.signal,point.MACD]};MACDIndicator.prototype.translate=function(){var indicator=this,plotNames=["plotSignal","plotMACD"];H.seriesTypes.column.prototype.translate.apply(indicator);indicator.points.forEach(function(point){[point.signal,point.MACD].forEach(function(value,i){if(value!==null){point[plotNames[i]]=indicator.yAxis.toPixels(value,true)}})})};MACDIndicator.prototype.destroy=function(){this.graph=null;this.graphmacd=this.graphmacd&&this.graphmacd.destroy();this.graphsignal=this.graphsignal&&this.graphsignal.destroy();SeriesRegistry.seriesTypes.sma.prototype.destroy.apply(this,arguments)};MACDIndicator.prototype.drawGraph=function(){var indicator=this,mainLinePoints=indicator.points,mainLineOptions=indicator.options,histogramZones=indicator.zones,gappedExtend={options:{gapSize:mainLineOptions.gapSize}},otherSignals=[[],[]];var point,pointsLength=mainLinePoints.length;while(pointsLength--){point=mainLinePoints[pointsLength];if(defined(point.plotMACD)){otherSignals[0].push({plotX:point.plotX,plotY:point.plotMACD,isNull:!defined(point.plotMACD)})}if(defined(point.plotSignal)){otherSignals[1].push({plotX:point.plotX,plotY:point.plotSignal,isNull:!defined(point.plotMACD)})}}["macd","signal"].forEach(function(lineName,i){var _a;indicator.points=otherSignals[i];indicator.options=merge(((_a=mainLineOptions["".concat(lineName,"Line")])===null||_a===void 0?void 0:_a.styles)||{},gappedExtend);indicator.graph=indicator["graph".concat(lineName)];indicator.zones=(indicator["".concat(lineName,"Zones")].zones||[]).slice(indicator["".concat(lineName,"Zones")].startIndex||0);SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);indicator["graph".concat(lineName)]=indicator.graph});indicator.points=mainLinePoints;indicator.options=mainLineOptions;indicator.zones=histogramZones};MACDIndicator.prototype.applyZones=function(){var histogramZones=this.zones;this.zones=this.signalZones.zones;SeriesRegistry.seriesTypes.sma.prototype.applyZones.call(this);if(this.graphmacd&&this.options.macdLine.zones.length){this.graphmacd.hide()}this.zones=histogramZones};MACDIndicator.prototype.getValues=function(series,params){var indexToShift=params.longPeriod-params.shortPeriod,MACD=[],xMACD=[],yMACD=[];var shortEMA,longEMA,i,j=0,signalLine=[];if(series.xData.length<params.longPeriod+params.signalPeriod){return}shortEMA=SeriesRegistry.seriesTypes.ema.prototype.getValues(series,{period:params.shortPeriod,index:params.index});longEMA=SeriesRegistry.seriesTypes.ema.prototype.getValues(series,{period:params.longPeriod,index:params.index});shortEMA=shortEMA.values;longEMA=longEMA.values;for(i=0;i<=shortEMA.length;i++){if(defined(longEMA[i])&&defined(longEMA[i][1])&&defined(shortEMA[i+indexToShift])&&defined(shortEMA[i+indexToShift][0])){MACD.push([shortEMA[i+indexToShift][0],0,null,shortEMA[i+indexToShift][1]-longEMA[i][1]])}}for(i=0;i<MACD.length;i++){xMACD.push(MACD[i][0]);yMACD.push([0,null,MACD[i][3]])}signalLine=SeriesRegistry.seriesTypes.ema.prototype.getValues({xData:xMACD,yData:yMACD},{period:params.signalPeriod,index:2});signalLine=signalLine.values;for(i=0;i<MACD.length;i++){if(MACD[i][0]>=signalLine[0][0]){MACD[i][2]=signalLine[j][1];yMACD[i]=[0,signalLine[j][1],MACD[i][3]];if(MACD[i][3]===null){MACD[i][1]=0;yMACD[i][0]=0}else{MACD[i][1]=correctFloat(MACD[i][3]-signalLine[j][1]);yMACD[i][0]=correctFloat(MACD[i][3]-signalLine[j][1])}j++}}return{values:MACD,xData:xMACD,yData:yMACD}};MACDIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{shortPeriod:12,longPeriod:26,signalPeriod:9,period:26},signalLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},macdLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},threshold:0,groupPadding:.1,pointPadding:.1,crisp:false,states:{hover:{halo:{size:0}}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span> <b> {series.name}</b><br/>'+"Value: {point.MACD}<br/>"+"Signal: {point.signal}<br/>"+"Histogram: {point.y}<br/>"},dataGrouping:{approximation:"averages"},minPointLength:0});return MACDIndicator}(SMAIndicator);extend(MACDIndicator.prototype,{nameComponents:["longPeriod","shortPeriod","signalPeriod"],pointArrayMap:["y","signal","MACD"],parallelArrays:["x","y","signal","MACD"],pointValKey:"y",markerAttribs:noop,getColumnMetrics:H.seriesTypes.column.prototype.getColumnMetrics,crispCol:H.seriesTypes.column.prototype.crispCol,drawPoints:H.seriesTypes.column.prototype.drawPoints});SeriesRegistry.registerSeriesType("macd",MACDIndicator);export default MACDIndicator;"";