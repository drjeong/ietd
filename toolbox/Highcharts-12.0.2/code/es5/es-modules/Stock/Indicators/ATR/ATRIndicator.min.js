"use strict";var __extends=this&&this.__extends||function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(Object.prototype.hasOwnProperty.call(b,p))d[p]=b[p]};return extendStatics(d,b)};return function(d,b){if(typeof b!=="function"&&b!==null)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";var SMAIndicator=SeriesRegistry.seriesTypes.sma;import U from"../../../Core/Utilities.js";var isArray=U.isArray,merge=U.merge;function accumulateAverage(points,xVal,yVal,i){var xValue=xVal[i],yValue=yVal[i];points.push([xValue,yValue])}function getTR(currentPoint,prevPoint){var pointY=currentPoint,prevY=prevPoint,HL=pointY[1]-pointY[2],HCp=typeof prevY==="undefined"?0:Math.abs(pointY[1]-prevY[3]),LCp=typeof prevY==="undefined"?0:Math.abs(pointY[2]-prevY[3]),TR=Math.max(HL,HCp,LCp);return TR}function populateAverage(points,xVal,yVal,i,period,prevATR){var x=xVal[i-1],TR=getTR(yVal[i-1],yVal[i-2]),y=(prevATR*(period-1)+TR)/period;return[x,y]}var ATRIndicator=function(_super){__extends(ATRIndicator,_super);function ATRIndicator(){return _super!==null&&_super.apply(this,arguments)||this}ATRIndicator.prototype.getValues=function(series,params){var period=params.period,xVal=series.xData,yVal=series.yData,yValLen=yVal?yVal.length:0,xValue=xVal[0],yValue=yVal[0],points=[[xValue,yValue]],ATR=[],xData=[],yData=[];var point,i,prevATR=0,range=1,TR=0;if(xVal.length<=period||!isArray(yVal[0])||yVal[0].length!==4){return}for(i=1;i<=yValLen;i++){accumulateAverage(points,xVal,yVal,i);if(period<range){point=populateAverage(points,xVal,yVal,i,period,prevATR);prevATR=point[1];ATR.push(point);xData.push(point[0]);yData.push(point[1])}else if(period===range){prevATR=TR/(i-1);ATR.push([xVal[i-1],prevATR]);xData.push(xVal[i-1]);yData.push(prevATR);range++}else{TR+=getTR(yVal[i-1],yVal[i-2]);range++}}return{values:ATR,xData:xData,yData:yData}};ATRIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0}});return ATRIndicator}(SMAIndicator);SeriesRegistry.registerSeriesType("atr",ATRIndicator);export default ATRIndicator;"";