"use strict";import H from"../Core/Globals.js";var win=H.win;import T from"../Core/Templating.js";var format=T.format;import U from"../Core/Utilities.js";var error=U.error,extend=U.extend,merge=U.merge,wrap=U.wrap;var GeoJSONComposition;(function(GeoJSONComposition){function chartFromLatLonToPoint(lonLat){return this.mapView&&this.mapView.lonLatToProjectedUnits(lonLat)}function chartFromPointToLatLon(point){return this.mapView&&this.mapView.projectedUnitsToLonLat(point)}function chartTransformFromLatLon(latLon,transform){var proj4=this.options.chart.proj4||win.proj4;if(!proj4){error(21,false,this);return}var _a=transform.jsonmarginX,jsonmarginX=_a===void 0?0:_a,_b=transform.jsonmarginY,jsonmarginY=_b===void 0?0:_b,_c=transform.jsonres,jsonres=_c===void 0?1:_c,_d=transform.scale,scale=_d===void 0?1:_d,_e=transform.xoffset,xoffset=_e===void 0?0:_e,_f=transform.xpan,xpan=_f===void 0?0:_f,_g=transform.yoffset,yoffset=_g===void 0?0:_g,_h=transform.ypan,ypan=_h===void 0?0:_h;var projected=proj4(transform.crs,[latLon.lon,latLon.lat]),cosAngle=transform.cosAngle||transform.rotation&&Math.cos(transform.rotation),sinAngle=transform.sinAngle||transform.rotation&&Math.sin(transform.rotation),rotated=transform.rotation?[projected[0]*cosAngle+projected[1]*sinAngle,-projected[0]*sinAngle+projected[1]*cosAngle]:projected;return{x:((rotated[0]-xoffset)*scale+xpan)*jsonres+jsonmarginX,y:-(((yoffset-rotated[1])*scale+ypan)*jsonres-jsonmarginY)}}function chartTransformToLatLon(point,transform){var proj4=this.options.chart.proj4||win.proj4;if(!proj4){error(21,false,this);return}if(point.y===null){return}var _a=transform.jsonmarginX,jsonmarginX=_a===void 0?0:_a,_b=transform.jsonmarginY,jsonmarginY=_b===void 0?0:_b,_c=transform.jsonres,jsonres=_c===void 0?1:_c,_d=transform.scale,scale=_d===void 0?1:_d,_e=transform.xoffset,xoffset=_e===void 0?0:_e,_f=transform.xpan,xpan=_f===void 0?0:_f,_g=transform.yoffset,yoffset=_g===void 0?0:_g,_h=transform.ypan,ypan=_h===void 0?0:_h;var normalized={x:((point.x-jsonmarginX)/jsonres-xpan)/scale+xoffset,y:((point.y-jsonmarginY)/jsonres+ypan)/scale+yoffset},cosAngle=transform.cosAngle||transform.rotation&&Math.cos(transform.rotation),sinAngle=transform.sinAngle||transform.rotation&&Math.sin(transform.rotation),projected=proj4(transform.crs,"WGS84",transform.rotation?{x:normalized.x*cosAngle+normalized.y*-sinAngle,y:normalized.x*sinAngle+normalized.y*cosAngle}:normalized);return{lat:projected.y,lon:projected.x}}function compose(ChartClass){var chartProto=ChartClass.prototype;if(!chartProto.transformFromLatLon){chartProto.fromLatLonToPoint=chartFromLatLonToPoint;chartProto.fromPointToLatLon=chartFromPointToLatLon;chartProto.transformFromLatLon=chartTransformFromLatLon;chartProto.transformToLatLon=chartTransformToLatLon;wrap(chartProto,"addCredits",wrapChartAddCredit)}}GeoJSONComposition.compose=compose;function geojson(json,hType,series){var _a,_b;if(hType===void 0){hType="map"}var mapData=[];var geojson=json.type==="Topology"?topo2geo(json):json,features=geojson.features;for(var i=0,iEnd=features.length;i<iEnd;++i){var feature=features[i],geometry=feature.geometry||{},type=geometry.type,coordinates=geometry.coordinates,properties=feature.properties;var pointOptions=void 0;if((hType==="map"||hType==="mapbubble")&&(type==="Polygon"||type==="MultiPolygon")){if(coordinates.length){pointOptions={geometry:{coordinates:coordinates,type:type}}}}else if(hType==="mapline"&&(type==="LineString"||type==="MultiLineString")){if(coordinates.length){pointOptions={geometry:{coordinates:coordinates,type:type}}}}else if(hType==="mappoint"&&type==="Point"){if(coordinates.length){pointOptions={geometry:{coordinates:coordinates,type:type}}}}if(pointOptions){var name_1=properties&&(properties.name||properties.NAME),lon=properties&&properties.lon,lat=properties&&properties.lat;mapData.push(extend(pointOptions,{lat:typeof lat==="number"?lat:void 0,lon:typeof lon==="number"?lon:void 0,name:typeof name_1==="string"?name_1:void 0,properties:properties}))}}if(series&&geojson.copyrightShort){series.chart.mapCredits=format((_a=series.chart.options.credits)===null||_a===void 0?void 0:_a.mapText,{geojson:geojson});series.chart.mapCreditsFull=format((_b=series.chart.options.credits)===null||_b===void 0?void 0:_b.mapTextFull,{geojson:geojson})}return mapData}GeoJSONComposition.geojson=geojson;function topo2geo(topology,objectName){if(!objectName){objectName=Object.keys(topology.objects)[0]}var obj=topology.objects[objectName];if(obj["hc-decoded-geojson"]&&obj["hc-decoded-geojson"].title===topology.title){return obj["hc-decoded-geojson"]}var arcsArray=topology.arcs;if(topology.transform){var arcs=topology.arcs,_a=topology.transform,scale=_a.scale,translate=_a.translate;var positionArray=void 0,x=void 0,y=void 0;arcsArray=[];for(var i=0,iEnd=arcs.length;i<iEnd;++i){var positions=arcs[i];arcsArray.push(positionArray=[]);x=0;y=0;for(var j=0,jEnd=positions.length;j<jEnd;++j){positionArray.push([(x+=positions[j][0])*scale[0]+translate[0],(y+=positions[j][1])*scale[1]+translate[1]])}}}var arcsToCoordinates=function(arcs){if(typeof arcs[0]==="number"){return arcs.reduce(function(coordinates,arcNo,i){var arc=arcNo<0?arcsArray[~arcNo]:arcsArray[arcNo];if(arcNo<0){arc=arc.slice(0,i===0?arc.length:arc.length-1);arc.reverse()}else if(i){arc=arc.slice(1)}return coordinates.concat(arc)},[])}return arcs.map(arcsToCoordinates)};var geometries=obj.geometries,features=[];for(var i=0,iEnd=geometries.length;i<iEnd;++i){features.push({type:"Feature",properties:geometries[i].properties,geometry:{type:geometries[i].type,coordinates:geometries[i].coordinates||arcsToCoordinates(geometries[i].arcs)}})}var geojson={type:"FeatureCollection",copyright:topology.copyright,copyrightShort:topology.copyrightShort,copyrightUrl:topology.copyrightUrl,features:features,"hc-recommended-mapview":obj["hc-recommended-mapview"],bbox:topology.bbox,title:topology.title};obj["hc-decoded-geojson"]=geojson;return geojson}GeoJSONComposition.topo2geo=topo2geo;function wrapChartAddCredit(proceed,credits){credits=merge(true,this.options.credits,credits);proceed.call(this,credits);if(this.credits&&this.mapCreditsFull){this.credits.attr({title:this.mapCreditsFull})}}})(GeoJSONComposition||(GeoJSONComposition={}));export default GeoJSONComposition;"";