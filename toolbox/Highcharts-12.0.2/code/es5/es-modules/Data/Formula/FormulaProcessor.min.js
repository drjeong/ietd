"use strict";import FormulaTypes from"./FormulaTypes.js";var isFormula=FormulaTypes.isFormula,isFunction=FormulaTypes.isFunction,isOperator=FormulaTypes.isOperator,isRange=FormulaTypes.isRange,isReference=FormulaTypes.isReference,isValue=FormulaTypes.isValue;var asLogicalStringRegExp=/ */;var MAX_FALSE=Number.MAX_VALUE/1.000000000001;var MAX_STRING=Number.MAX_VALUE/1.000000000002;var MAX_TRUE=Number.MAX_VALUE;var operatorPriority={"^":3,"*":2,"/":2,"+":1,"-":1,"=":0,"<":0,"<=":0,">":0,">=":0};var processorFunctions={};var processorFunctionNameRegExp=/^[A-Z][A-Z\.]*$/;function asLogicalNumber(value){switch(typeof value){case"boolean":return value?MAX_TRUE:MAX_FALSE;case"string":return MAX_STRING;case"number":return value;default:return NaN}}function asLogicalString(value){if(typeof value==="string"){return value.toLowerCase().replace(asLogicalStringRegExp,"\0")}return value}function asNumber(value){switch(typeof value){case"boolean":return value?1:0;case"string":return parseFloat(value.replace(",","."));case"number":return value;default:return NaN}}function basicOperation(operator,x,y){switch(operator){case"=":return asLogicalString(x)===asLogicalString(y);case"<":if(typeof x===typeof y){return asLogicalString(x)<asLogicalString(y)}return asLogicalNumber(x)<asLogicalNumber(y);case"<=":if(typeof x===typeof y){return asLogicalString(x)<=asLogicalString(y)}return asLogicalNumber(x)<=asLogicalNumber(y);case">":if(typeof x===typeof y){return asLogicalString(x)>asLogicalString(y)}return asLogicalNumber(x)>asLogicalNumber(y);case">=":if(typeof x===typeof y){return asLogicalString(x)>=asLogicalString(y)}return asLogicalNumber(x)>=asLogicalNumber(y)}x=asNumber(x);y=asNumber(y);var result;switch(operator){case"+":result=x+y;break;case"-":result=x-y;break;case"*":result=x*y;break;case"/":result=x/y;break;case"^":result=Math.pow(x,y);break;default:return NaN}return result%1?Math.round(result*1e9)/1e9:result}function getArgumentValue(arg,table){if(isValue(arg)){return arg}if(isRange(arg)){return table&&getRangeValues(arg,table)||[]}if(isFunction(arg)){return processFunction(arg,table)}return processFormula(isFormula(arg)?arg:[arg],table)}function getArgumentsValues(args,table){var values=[];for(var i=0,iEnd=args.length;i<iEnd;++i){values.push(getArgumentValue(args[i],table))}return values}function getRangeValues(range,table){var columnNames=table.getColumnNames().slice(range.beginColumn,range.endColumn+1),values=[];for(var i=0,iEnd=columnNames.length,cell=void 0;i<iEnd;++i){var cells=table.getColumn(columnNames[i],true)||[];for(var j=range.beginRow,jEnd=range.endRow+1;j<jEnd;++j){cell=cells[j];if(typeof cell==="string"&&cell[0]==="="&&table!==table.modified){cell=table.modified.getCell(columnNames[i],j)}values.push(isValue(cell)?cell:NaN)}}return values}function getReferenceValue(reference,table){var columnName=table.getColumnNames()[reference.column];if(columnName){var cell=table.getCell(columnName,reference.row);if(typeof cell==="string"&&cell[0]==="="&&table!==table.modified){var result=table.modified.getCell(columnName,reference.row);return isValue(result)?result:NaN}return isValue(cell)?cell:NaN}return NaN}function processFormula(formula,table){var x;for(var i=0,iEnd=formula.length,item=void 0,operator=void 0,result=void 0,y=void 0;i<iEnd;++i){item=formula[i];if(isOperator(item)){operator=item;continue}if(isValue(item)){y=item}else if(isFormula(item)){y=processFormula(formula,table)}else if(isFunction(item)){result=processFunction(item,table);y=isValue(result)?result:NaN}else if(isReference(item)){y=table&&getReferenceValue(item,table)}if(typeof y!=="undefined"){if(typeof x==="undefined"){if(operator){x=basicOperation(operator,0,y)}else{x=y}}else if(!operator){return NaN}else{var operator2=formula[i+1];if(isOperator(operator2)&&operatorPriority[operator2]>operatorPriority[operator]){y=basicOperation(operator2,y,processFormula(formula.slice(i+2)));i=iEnd}x=basicOperation(operator,x,y)}operator=void 0;y=void 0}}return isValue(x)?x:NaN}function processFunction(formulaFunction,table,reference){var processor=processorFunctions[formulaFunction.name];if(processor){try{return processor(formulaFunction.args,table)}catch(_a){return NaN}}var error=new Error('Function "'.concat(formulaFunction.name,'" not found.'));error.name="FormulaProcessError";throw error}function registerProcessorFunction(name,processorFunction){return processorFunctionNameRegExp.test(name)&&!processorFunctions[name]&&!!(processorFunctions[name]=processorFunction)}function translateReferences(formula,columnDelta,rowDelta){if(columnDelta===void 0){columnDelta=0}if(rowDelta===void 0){rowDelta=0}for(var i=0,iEnd=formula.length,item=void 0;i<iEnd;++i){item=formula[i];if(item instanceof Array){translateReferences(item,columnDelta,rowDelta)}else if(isFunction(item)){translateReferences(item.args,columnDelta,rowDelta)}else if(isRange(item)){if(item.beginColumnRelative){item.beginColumn+=columnDelta}if(item.beginRowRelative){item.beginRow+=rowDelta}if(item.endColumnRelative){item.endColumn+=columnDelta}if(item.endRowRelative){item.endRow+=rowDelta}}else if(isReference(item)){if(item.columnRelative){item.column+=columnDelta}if(item.rowRelative){item.row+=rowDelta}}}return formula}var FormulaProcessor={asNumber:asNumber,getArgumentValue:getArgumentValue,getArgumentsValues:getArgumentsValues,getRangeValues:getRangeValues,getReferenceValue:getReferenceValue,processFormula:processFormula,processorFunctions:processorFunctions,registerProcessorFunction:registerProcessorFunction,translateReferences:translateReferences};export default FormulaProcessor;