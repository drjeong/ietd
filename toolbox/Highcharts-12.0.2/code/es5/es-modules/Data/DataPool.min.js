"use strict";import DataConnector from"./Connectors/DataConnector.js";import DataPoolDefaults from"./DataPoolDefaults.js";import U from"../Core/Utilities.js";var DataPool=function(){function DataPool(options){if(options===void 0){options=DataPoolDefaults}options.connectors=options.connectors||[];this.connectors={};this.options=options;this.waiting={}}DataPool.prototype.emit=function(e){U.fireEvent(this,e.type,e)};DataPool.prototype.getConnector=function(connectorId){var _this=this;var connector=this.connectors[connectorId];if(connector){return Promise.resolve(connector)}var waitingList=this.waiting[connectorId];if(!waitingList){waitingList=this.waiting[connectorId]=[];var connectorOptions=this.getConnectorOptions(connectorId);if(!connectorOptions){throw new Error("Connector '".concat(connectorId,"' not found."))}this.loadConnector(connectorOptions).then(function(connector){delete _this.waiting[connectorId];for(var i=0,iEnd=waitingList.length;i<iEnd;++i){waitingList[i][0](connector)}})["catch"](function(error){delete _this.waiting[connectorId];for(var i=0,iEnd=waitingList.length;i<iEnd;++i){waitingList[i][1](error)}})}return new Promise(function(resolve,reject){waitingList.push([resolve,reject])})};DataPool.prototype.getConnectorIds=function(){var connectors=this.options.connectors,connectorIds=[];for(var i=0,iEnd=connectors.length;i<iEnd;++i){connectorIds.push(connectors[i].id)}return connectorIds};DataPool.prototype.getConnectorOptions=function(connectorId){var connectors=this.options.connectors;for(var i=0,iEnd=connectors.length;i<iEnd;++i){if(connectors[i].id===connectorId){return connectors[i]}}};DataPool.prototype.getConnectorTable=function(connectorId){return this.getConnector(connectorId).then(function(connector){return connector.table})};DataPool.prototype.isNewConnector=function(connectorId){return!this.connectors[connectorId]};DataPool.prototype.loadConnector=function(options){var _this=this;return new Promise(function(resolve,reject){_this.emit({type:"load",options:options});var ConnectorClass=DataConnector.types[options.type];if(!ConnectorClass){throw new Error("Connector type not found. (".concat(options.type,")"))}var connector=new ConnectorClass(options.options);connector.load().then(function(connector){_this.connectors[options.id]=connector;_this.emit({type:"afterLoad",options:options});resolve(connector)})["catch"](reject)})};DataPool.prototype.on=function(type,callback){return U.addEvent(this,type,callback)};DataPool.prototype.setConnectorOptions=function(options){var connectors=this.options.connectors,instances=this.connectors;this.emit({type:"setConnectorOptions",options:options});for(var i=0,iEnd=connectors.length;i<iEnd;++i){if(connectors[i].id===options.id){connectors.splice(i,1);break}}if(instances[options.id]){instances[options.id].stopPolling();delete instances[options.id]}connectors.push(options);this.emit({type:"afterSetConnectorOptions",options:options})};DataPool.version="1.0.0";return DataPool}();export default DataPool;