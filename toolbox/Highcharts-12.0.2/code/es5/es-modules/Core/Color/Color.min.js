"use strict";import H from"../Globals.js";import U from"../Utilities.js";var isNumber=U.isNumber,merge=U.merge,pInt=U.pInt,defined=U.defined;var Color=function(){function Color(input){this.rgba=[NaN,NaN,NaN,NaN];this.input=input;var GlobalColor=H.Color;if(GlobalColor&&GlobalColor!==Color){return new GlobalColor(input)}var result,rgba,i,parser;if(typeof input==="object"&&typeof input.stops!=="undefined"){this.stops=input.stops.map(function(stop){return new Color(stop[1])})}else if(typeof input==="string"){this.input=input=Color.names[input.toLowerCase()]||input;i=Color.parsers.length;while(i--&&!rgba){parser=Color.parsers[i];result=parser.regex.exec(input);if(result){rgba=parser.parse(result)}}}if(rgba){this.rgba=rgba}}Color.parse=function(input){return input?new Color(input):Color.None};Color.prototype.get=function(format){var input=this.input,rgba=this.rgba;if(typeof input==="object"&&typeof this.stops!=="undefined"){var ret_1=merge(input);ret_1.stops=[].slice.call(ret_1.stops);this.stops.forEach(function(stop,i){ret_1.stops[i]=[ret_1.stops[i][0],stop.get(format)]});return ret_1}if(rgba&&isNumber(rgba[0])){if(format==="rgb"||!format&&rgba[3]===1){return"rgb("+rgba[0]+","+rgba[1]+","+rgba[2]+")"}if(format==="a"){return"".concat(rgba[3])}return"rgba("+rgba.join(",")+")"}return input};Color.prototype.brighten=function(alpha){var rgba=this.rgba;if(this.stops){this.stops.forEach(function(stop){stop.brighten(alpha)})}else if(isNumber(alpha)&&alpha!==0){for(var i=0;i<3;i++){rgba[i]+=pInt(alpha*255);if(rgba[i]<0){rgba[i]=0}if(rgba[i]>255){rgba[i]=255}}}return this};Color.prototype.setOpacity=function(alpha){this.rgba[3]=alpha;return this};Color.prototype.tweenTo=function(to,pos){var fromRgba=this.rgba,toRgba=to.rgba;if(!isNumber(fromRgba[0])||!isNumber(toRgba[0])){return to.input||"none"}var hasAlpha=toRgba[3]!==1||fromRgba[3]!==1;return(hasAlpha?"rgba(":"rgb(")+Math.round(toRgba[0]+(fromRgba[0]-toRgba[0])*(1-pos))+","+Math.round(toRgba[1]+(fromRgba[1]-toRgba[1])*(1-pos))+","+Math.round(toRgba[2]+(fromRgba[2]-toRgba[2])*(1-pos))+(hasAlpha?","+(toRgba[3]+(fromRgba[3]-toRgba[3])*(1-pos)):"")+")"};Color.names={white:"#ffffff",black:"#000000"};Color.parsers=[{regex:/rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d?(?:\.\d+)?)\s*\)/,parse:function(result){return[pInt(result[1]),pInt(result[2]),pInt(result[3]),parseFloat(result[4],10)]}},{regex:/rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)/,parse:function(result){return[pInt(result[1]),pInt(result[2]),pInt(result[3]),1]}},{regex:/^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?$/i,parse:function(result){return[pInt(result[1]+result[1],16),pInt(result[2]+result[2],16),pInt(result[3]+result[3],16),!defined(result[4])?1:pInt(result[4]+result[4],16)/255]}},{regex:/^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?$/i,parse:function(result){return[pInt(result[1],16),pInt(result[2],16),pInt(result[3],16),!defined(result[4])?1:pInt(result[4],16)/255]}}];Color.None=new Color("");return Color}();export default Color;"";