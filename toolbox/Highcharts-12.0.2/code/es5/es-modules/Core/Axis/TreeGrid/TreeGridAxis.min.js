"use strict";import BrokenAxis from"../BrokenAxis.js";import GridAxis from"../GridAxis.js";import Tree from"../../../Gantt/Tree.js";import TreeGridTick from"./TreeGridTick.js";import TU from"../../../Series/TreeUtilities.js";var getLevelOptions=TU.getLevelOptions;import U from"../../Utilities.js";var addEvent=U.addEvent,isArray=U.isArray,splat=U.splat,find=U.find,fireEvent=U.fireEvent,isObject=U.isObject,isString=U.isString,merge=U.merge,pick=U.pick,removeEvent=U.removeEvent,wrap=U.wrap;var TickConstructor;function getBreakFromNode(node,max){var to=node.collapseEnd||0;var from=node.collapseStart||0;if(to>=max){from-=.5}return{from:from,to:to,showPoints:false}}function getTreeGridFromData(data,uniqueNames,numberOfSeries){var categories=[],collapsedNodes=[],mapOfIdToNode={},uniqueNamesEnabled=uniqueNames||false;var mapOfPosToGridNode={},posIterator=-1;var treeParams={after:function(node){var gridNode=mapOfPosToGridNode[node.pos];var height=0,descendants=0;gridNode.children.forEach(function(child){descendants+=(child.descendants||0)+1;height=Math.max((child.height||0)+1,height)});gridNode.descendants=descendants;gridNode.height=height;if(gridNode.collapsed){collapsedNodes.push(gridNode)}},before:function(node){var data=isObject(node.data,true)?node.data:{},name=isString(data.name)?data.name:"",parentNode=mapOfIdToNode[node.parent],parentGridNode=isObject(parentNode,true)?mapOfPosToGridNode[parentNode.pos]:null,hasSameName=function(x){return x.name===name};var gridNode,pos;if(uniqueNamesEnabled&&isObject(parentGridNode,true)&&!!(gridNode=find(parentGridNode.children,hasSameName))){pos=gridNode.pos;gridNode.nodes.push(node)}else{pos=posIterator++}if(!mapOfPosToGridNode[pos]){mapOfPosToGridNode[pos]=gridNode={depth:parentGridNode?parentGridNode.depth+1:0,name:name,id:data.id,nodes:[node],children:[],pos:pos};if(pos!==-1){categories.push(name)}if(isObject(parentGridNode,true)){parentGridNode.children.push(gridNode)}}if(isString(node.id)){mapOfIdToNode[node.id]=node}if(gridNode&&data.collapsed===true){gridNode.collapsed=true}node.pos=pos}};var updateYValuesAndTickPos=function(map,numberOfSeries){var setValues=function(gridNode,start,result){var nodes=gridNode.nodes,padding=.5;var end=start+(start===-1?0:numberOfSeries-1);var diff=(end-start)/2,pos=start+diff;nodes.forEach(function(node){var data=node.data;if(isObject(data,true)){data.y=start+(data.seriesIndex||0);delete data.seriesIndex}node.pos=pos});result[pos]=gridNode;gridNode.pos=pos;gridNode.tickmarkOffset=diff+padding;gridNode.collapseStart=end+padding;gridNode.children.forEach(function(child){setValues(child,end+1,result);end=(child.collapseEnd||0)-padding});gridNode.collapseEnd=end+padding;return result};return setValues(map["-1"],-1,{})};var tree=Tree.getTree(data,treeParams);mapOfPosToGridNode=updateYValuesAndTickPos(mapOfPosToGridNode,numberOfSeries);return{categories:categories,mapOfIdToNode:mapOfIdToNode,mapOfPosToGridNode:mapOfPosToGridNode,collapsedNodes:collapsedNodes,tree:tree}}function onBeforeRender(e){var chart=e.target,axes=chart.axes;axes.filter(function(axis){return axis.type==="treegrid"}).forEach(function(axis){var options=axis.options||{},labelOptions=options.labels,uniqueNames=axis.uniqueNames,max=chart.time.parse(options.max),isDirty=!axis.treeGrid.mapOfPosToGridNode||axis.series.some(function(series){return!series.hasRendered||series.isDirtyData||series.isDirty});var numberOfSeries=0,data,treeGrid;if(isDirty){var seriesHasPrimitivePoints_1=[];data=axis.series.reduce(function(arr,s){var seriesData=s.options.data||[],firstPoint=seriesData[0],foundPrimitivePoint=Array.isArray(firstPoint)&&!firstPoint.find(function(value){return typeof value==="object"});seriesHasPrimitivePoints_1.push(foundPrimitivePoint);if(s.visible){seriesData.forEach(function(pointOptions){if(foundPrimitivePoint||s.options.keys&&s.options.keys.length){pointOptions=s.pointClass.prototype.optionsToObject.call({series:s},pointOptions);s.pointClass.setGanttPointAliases(pointOptions,chart)}if(isObject(pointOptions,true)){pointOptions.seriesIndex=numberOfSeries;arr.push(pointOptions)}});if(uniqueNames===true){numberOfSeries++}}return arr},[]);if(max&&data.length<max){for(var i=data.length;i<=max;i++){data.push({name:i+"â€‹"})}}treeGrid=getTreeGridFromData(data,uniqueNames||false,uniqueNames===true?numberOfSeries:1);axis.categories=treeGrid.categories;axis.treeGrid.mapOfPosToGridNode=treeGrid.mapOfPosToGridNode;axis.hasNames=true;axis.treeGrid.tree=treeGrid.tree;axis.series.forEach(function(series,index){var axisData=(series.options.data||[]).map(function(d){if(seriesHasPrimitivePoints_1[index]||isArray(d)&&series.options.keys&&series.options.keys.length){data.forEach(function(point){var toArray=splat(d);if(toArray.indexOf(point.x||0)>=0&&toArray.indexOf(point.x2||0)>=0){d=point}})}return isObject(d,true)?merge(d):d});if(series.visible){series.setData(axisData,false)}});axis.treeGrid.mapOptionsToLevel=getLevelOptions({defaults:labelOptions,from:1,levels:labelOptions&&labelOptions.levels,to:axis.treeGrid.tree&&axis.treeGrid.tree.height});if(e.type==="beforeRender"){axis.treeGrid.collapsedNodes=treeGrid.collapsedNodes}}})}function wrapGenerateTick(proceed,pos){var axis=this,mapOptionsToLevel=axis.treeGrid.mapOptionsToLevel||{},isTreeGrid=axis.type==="treegrid",ticks=axis.ticks;var tick=ticks[pos],levelOptions,options,gridNode;if(isTreeGrid&&axis.treeGrid.mapOfPosToGridNode){gridNode=axis.treeGrid.mapOfPosToGridNode[pos];levelOptions=mapOptionsToLevel[gridNode.depth];if(levelOptions){options={labels:levelOptions}}if(!tick&&TickConstructor){ticks[pos]=tick=new TickConstructor(axis,pos,void 0,void 0,{category:gridNode.name,tickmarkOffset:gridNode.tickmarkOffset,options:options})}else{tick.parameters.category=gridNode.name;tick.options=options;tick.addLabel()}}else{proceed.apply(axis,Array.prototype.slice.call(arguments,1))}}function wrapInit(proceed,chart,userOptions,coll){var axis=this,isTreeGrid=userOptions.type==="treegrid";if(!axis.treeGrid){axis.treeGrid=new TreeGridAxisAdditions(axis)}if(isTreeGrid){addEvent(chart,"beforeRender",onBeforeRender);addEvent(chart,"beforeRedraw",onBeforeRender);addEvent(chart,"addSeries",function(e){if(e.options.data){var treeGrid=getTreeGridFromData(e.options.data,userOptions.uniqueNames||false,1);axis.treeGrid.collapsedNodes=(axis.treeGrid.collapsedNodes||[]).concat(treeGrid.collapsedNodes)}});addEvent(axis,"foundExtremes",function(){if(axis.treeGrid.collapsedNodes){axis.treeGrid.collapsedNodes.forEach(function(node){var breaks=axis.treeGrid.collapse(node);if(axis.brokenAxis){axis.brokenAxis.setBreaks(breaks,false);if(axis.treeGrid.collapsedNodes){axis.treeGrid.collapsedNodes=axis.treeGrid.collapsedNodes.filter(function(n){return node.collapseStart!==n.collapseStart||node.collapseEnd!==n.collapseEnd})}}})}});addEvent(axis,"afterBreaks",function(){if(axis.coll==="yAxis"&&!axis.staticScale&&axis.chart.options.chart.height){axis.isDirty=true}});userOptions=merge({grid:{enabled:true},labels:{align:"left",levels:[{level:void 0},{level:1,style:{fontWeight:"bold"}}],symbol:{type:"triangle",x:-5,y:-5,height:10,width:10}},uniqueNames:false},userOptions,{reversed:true})}proceed.apply(axis,[chart,userOptions,coll]);if(isTreeGrid){axis.hasNames=true;axis.options.showLastLabel=true}}function wrapSetTickInterval(proceed){var _a,_b,_c,_d,_e;var axis=this,options=axis.options,time=axis.chart.time,linkedParent=typeof options.linkedTo==="number"?(_a=this.chart[axis.coll])===null||_a===void 0?void 0:_a[options.linkedTo]:void 0,isTreeGrid=axis.type==="treegrid";if(isTreeGrid){axis.min=(_c=(_b=axis.userMin)!==null&&_b!==void 0?_b:time.parse(options.min))!==null&&_c!==void 0?_c:axis.dataMin;axis.max=(_e=(_d=axis.userMax)!==null&&_d!==void 0?_d:time.parse(options.max))!==null&&_e!==void 0?_e:axis.dataMax;fireEvent(axis,"foundExtremes");axis.setAxisTranslation();axis.tickInterval=1;axis.tickmarkOffset=.5;axis.tickPositions=axis.treeGrid.mapOfPosToGridNode?axis.treeGrid.getTickPositions():[];if(linkedParent){var linkedParentExtremes=linkedParent.getExtremes();axis.min=pick(linkedParentExtremes.min,linkedParentExtremes.dataMin);axis.max=pick(linkedParentExtremes.max,linkedParentExtremes.dataMax);axis.tickPositions=linkedParent.tickPositions}axis.linkedParent=linkedParent}else{proceed.apply(axis,Array.prototype.slice.call(arguments,1))}}function wrapRedraw(proceed){var axis=this,isTreeGrid=this.type==="treegrid";if(isTreeGrid&&axis.visible){axis.tickPositions.forEach(function(pos){var tick=axis.ticks[pos];if(tick.label&&tick.label.attachedTreeGridEvents){removeEvent(tick.label.element);tick.label.attachedTreeGridEvents=false}})}proceed.apply(axis,Array.prototype.slice.call(arguments,1))}var TreeGridAxisAdditions=function(){function TreeGridAxisAdditions(axis){this.axis=axis}TreeGridAxisAdditions.compose=function(AxisClass,ChartClass,SeriesClass,TickClass){if(!AxisClass.keepProps.includes("treeGrid")){var axisProps=AxisClass.prototype;AxisClass.keepProps.push("treeGrid");wrap(axisProps,"generateTick",wrapGenerateTick);wrap(axisProps,"init",wrapInit);wrap(axisProps,"setTickInterval",wrapSetTickInterval);wrap(axisProps,"redraw",wrapRedraw);axisProps.utils={getNode:Tree.getNode};if(!TickConstructor){TickConstructor=TickClass}}GridAxis.compose(AxisClass,ChartClass,TickClass);BrokenAxis.compose(AxisClass,SeriesClass);TreeGridTick.compose(TickClass);return AxisClass};TreeGridAxisAdditions.prototype.setCollapsedStatus=function(node){var axis=this.axis,chart=axis.chart;axis.series.forEach(function(series){var data=series.options.data;if(node.id&&data){var point=chart.get(node.id),dataPoint=data[series.data.indexOf(point)];if(point&&dataPoint){point.collapsed=node.collapsed;dataPoint.collapsed=node.collapsed}}})};TreeGridAxisAdditions.prototype.collapse=function(node){var axis=this.axis,breaks=axis.options.breaks||[],obj=getBreakFromNode(node,axis.max);breaks.push(obj);node.collapsed=true;axis.treeGrid.setCollapsedStatus(node);return breaks};TreeGridAxisAdditions.prototype.expand=function(node){var axis=this.axis,breaks=axis.options.breaks||[],obj=getBreakFromNode(node,axis.max);node.collapsed=false;axis.treeGrid.setCollapsedStatus(node);return breaks.reduce(function(arr,b){if(b.to!==obj.to||b.from!==obj.from){arr.push(b)}return arr},[])};TreeGridAxisAdditions.prototype.getTickPositions=function(){var axis=this.axis,roundedMin=Math.floor(axis.min/axis.tickInterval)*axis.tickInterval,roundedMax=Math.ceil(axis.max/axis.tickInterval)*axis.tickInterval;return Object.keys(axis.treeGrid.mapOfPosToGridNode||{}).reduce(function(arr,key){var pos=+key;if(pos>=roundedMin&&pos<=roundedMax&&!(axis.brokenAxis&&axis.brokenAxis.isInAnyBreak(pos))){arr.push(pos)}return arr},[])};TreeGridAxisAdditions.prototype.isCollapsed=function(node){var axis=this.axis,breaks=axis.options.breaks||[],obj=getBreakFromNode(node,axis.max);return breaks.some(function(b){return b.from===obj.from&&b.to===obj.to})};TreeGridAxisAdditions.prototype.toggleCollapse=function(node){return this.isCollapsed(node)?this.expand(node):this.collapse(node)};return TreeGridAxisAdditions}();export default TreeGridAxisAdditions;