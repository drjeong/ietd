"use strict";import Axis3DDefaults from"./Axis3DDefaults.js";import D from"../Defaults.js";var defaultOptions=D.defaultOptions;import H from"../Globals.js";var deg2rad=H.deg2rad;import Math3D from"../Math3D.js";var perspective=Math3D.perspective,perspective3D=Math3D.perspective3D,shapeArea=Math3D.shapeArea;import Tick3D from"./Tick3DComposition.js";import U from"../Utilities.js";var addEvent=U.addEvent,merge=U.merge,pick=U.pick,wrap=U.wrap;function onAxisAfterSetOptions(){var axis=this,chart=axis.chart,options=axis.options;if(chart.is3d&&chart.is3d()&&axis.coll!=="colorAxis"){options.tickWidth=pick(options.tickWidth,0);options.gridLineWidth=pick(options.gridLineWidth,1)}}function onAxisDrawCrosshair(e){var axis=this;if(axis.chart.is3d()&&axis.coll!=="colorAxis"){if(e.point){e.point.crosshairPos=axis.isXAxis?e.point.axisXpos:axis.len-e.point.axisYpos}}}function onAxisInit(){var axis=this;if(!axis.axis3D){axis.axis3D=new Axis3DAdditions(axis)}}function wrapAxisGetLinePath(proceed){var axis=this;if(!axis.chart.is3d()||axis.coll==="colorAxis"){return proceed.apply(axis,[].slice.call(arguments,1))}return[]}function wrapAxisGetPlotBandPath(proceed){if(!this.chart.is3d()||this.coll==="colorAxis"){return proceed.apply(this,[].slice.call(arguments,1))}var args=arguments,from=args[1],to=args[2],path=[],fromPath=this.getPlotLinePath({value:from}),toPath=this.getPlotLinePath({value:to});if(fromPath&&toPath){for(var i=0;i<fromPath.length;i+=2){var fromStartSeg=fromPath[i],fromEndSeg=fromPath[i+1],toStartSeg=toPath[i],toEndSeg=toPath[i+1];if(fromStartSeg[0]==="M"&&fromEndSeg[0]==="L"&&toStartSeg[0]==="M"&&toEndSeg[0]==="L"){path.push(fromStartSeg,fromEndSeg,toEndSeg,["L",toStartSeg[1],toStartSeg[2]],["Z"])}}}return path}function wrapAxisGetPlotLinePath(proceed){var axis=this,axis3D=axis.axis3D,chart=axis.chart,path=proceed.apply(axis,[].slice.call(arguments,1));if(axis.coll==="colorAxis"||!chart.chart3d||!chart.is3d()){return path}if(path===null){return path}var options3d=chart.options.chart.options3d,d=axis.isZAxis?chart.plotWidth:options3d.depth,frame=chart.chart3d.frame3d,startSegment=path[0],endSegment=path[1];var pArr,pathSegments=[];if(startSegment[0]==="M"&&endSegment[0]==="L"){pArr=[axis3D.swapZ({x:startSegment[1],y:startSegment[2],z:0}),axis3D.swapZ({x:startSegment[1],y:startSegment[2],z:d}),axis3D.swapZ({x:endSegment[1],y:endSegment[2],z:0}),axis3D.swapZ({x:endSegment[1],y:endSegment[2],z:d})];if(!this.horiz){if(frame.front.visible){pathSegments.push(pArr[0],pArr[2])}if(frame.back.visible){pathSegments.push(pArr[1],pArr[3])}if(frame.left.visible){pathSegments.push(pArr[0],pArr[1])}if(frame.right.visible){pathSegments.push(pArr[2],pArr[3])}}else if(this.isZAxis){if(frame.left.visible){pathSegments.push(pArr[0],pArr[2])}if(frame.right.visible){pathSegments.push(pArr[1],pArr[3])}if(frame.top.visible){pathSegments.push(pArr[0],pArr[1])}if(frame.bottom.visible){pathSegments.push(pArr[2],pArr[3])}}else{if(frame.front.visible){pathSegments.push(pArr[0],pArr[2])}if(frame.back.visible){pathSegments.push(pArr[1],pArr[3])}if(frame.top.visible){pathSegments.push(pArr[0],pArr[1])}if(frame.bottom.visible){pathSegments.push(pArr[2],pArr[3])}}pathSegments=perspective(pathSegments,this.chart,false)}return chart.renderer.toLineSegments(pathSegments)}function wrapAxisGetSlotWidth(proceed,tick){var _a;var axis=this,chart=axis.chart,gridGroup=axis.gridGroup,tickPositions=axis.tickPositions,ticks=axis.ticks;if(axis.categories&&chart.frameShapes&&chart.is3d()&&gridGroup&&tick&&tick.label){var firstGridLine=gridGroup.element.childNodes[0].getBBox(),frame3DLeft=chart.frameShapes.left.getBBox(),options3d=chart.options.chart.options3d,origin_1={x:chart.plotWidth/2,y:chart.plotHeight/2,z:options3d.depth/2,vd:pick(options3d.depth,1)*pick(options3d.viewDistance,0)},index=tickPositions.indexOf(tick.pos),prevTick=ticks[tickPositions[index-1]],nextTick=ticks[tickPositions[index+1]];var labelPos=void 0,prevLabelPos=void 0,nextLabelPos=void 0;if((_a=prevTick===null||prevTick===void 0?void 0:prevTick.label)===null||_a===void 0?void 0:_a.xy){prevLabelPos=perspective3D({x:prevTick.label.xy.x,y:prevTick.label.xy.y,z:null},origin_1,origin_1.vd)}if(nextTick&&nextTick.label&&nextTick.label.xy){nextLabelPos=perspective3D({x:nextTick.label.xy.x,y:nextTick.label.xy.y,z:null},origin_1,origin_1.vd)}labelPos={x:tick.label.xy.x,y:tick.label.xy.y,z:null};labelPos=perspective3D(labelPos,origin_1,origin_1.vd);return Math.abs(prevLabelPos?labelPos.x-prevLabelPos.x:nextLabelPos?nextLabelPos.x-labelPos.x:firstGridLine.x-frame3DLeft.x)}return proceed.apply(axis,[].slice.call(arguments,1))}function wrapAxisGetTitlePosition(proceed){var pos=proceed.apply(this,[].slice.call(arguments,1));return this.axis3D?this.axis3D.fix3dPosition(pos,true):pos}var Axis3DAdditions=function(){function Axis3DAdditions(axis){this.axis=axis}Axis3DAdditions.compose=function(AxisClass,TickClass){Tick3D.compose(TickClass);if(!AxisClass.keepProps.includes("axis3D")){merge(true,defaultOptions.xAxis,Axis3DDefaults);AxisClass.keepProps.push("axis3D");addEvent(AxisClass,"init",onAxisInit);addEvent(AxisClass,"afterSetOptions",onAxisAfterSetOptions);addEvent(AxisClass,"drawCrosshair",onAxisDrawCrosshair);var axisProto=AxisClass.prototype;wrap(axisProto,"getLinePath",wrapAxisGetLinePath);wrap(axisProto,"getPlotBandPath",wrapAxisGetPlotBandPath);wrap(axisProto,"getPlotLinePath",wrapAxisGetPlotLinePath);wrap(axisProto,"getSlotWidth",wrapAxisGetSlotWidth);wrap(axisProto,"getTitlePosition",wrapAxisGetTitlePosition)}};Axis3DAdditions.prototype.fix3dPosition=function(pos,isTitle){var axis3D=this;var axis=axis3D.axis;var chart=axis.chart;if(axis.coll==="colorAxis"||!chart.chart3d||!chart.is3d()){return pos}var alpha=deg2rad*chart.options.chart.options3d.alpha,beta=deg2rad*chart.options.chart.options3d.beta,positionMode=pick(isTitle&&axis.options.title.position3d,axis.options.labels.position3d),skew=pick(isTitle&&axis.options.title.skew3d,axis.options.labels.skew3d),frame=chart.chart3d.frame3d,plotLeft=chart.plotLeft,plotRight=chart.plotWidth+plotLeft,plotTop=chart.plotTop,plotBottom=chart.plotHeight+plotTop;var offsetX=0,offsetY=0,vecX,vecY={x:0,y:1,z:0},reverseFlap=false;pos=axis.axis3D.swapZ({x:pos.x,y:pos.y,z:0});if(axis.isZAxis){if(axis.opposite){if(frame.axes.z.top===null){return{}}offsetY=pos.y-plotTop;pos.x=frame.axes.z.top.x;pos.y=frame.axes.z.top.y;vecX=frame.axes.z.top.xDir;reverseFlap=!frame.top.frontFacing}else{if(frame.axes.z.bottom===null){return{}}offsetY=pos.y-plotBottom;pos.x=frame.axes.z.bottom.x;pos.y=frame.axes.z.bottom.y;vecX=frame.axes.z.bottom.xDir;reverseFlap=!frame.bottom.frontFacing}}else if(axis.horiz){if(axis.opposite){if(frame.axes.x.top===null){return{}}offsetY=pos.y-plotTop;pos.y=frame.axes.x.top.y;pos.z=frame.axes.x.top.z;vecX=frame.axes.x.top.xDir;reverseFlap=!frame.top.frontFacing}else{if(frame.axes.x.bottom===null){return{}}offsetY=pos.y-plotBottom;pos.y=frame.axes.x.bottom.y;pos.z=frame.axes.x.bottom.z;vecX=frame.axes.x.bottom.xDir;reverseFlap=!frame.bottom.frontFacing}}else{if(axis.opposite){if(frame.axes.y.right===null){return{}}offsetX=pos.x-plotRight;pos.x=frame.axes.y.right.x;pos.z=frame.axes.y.right.z;vecX=frame.axes.y.right.xDir;vecX={x:vecX.z,y:vecX.y,z:-vecX.x}}else{if(frame.axes.y.left===null){return{}}offsetX=pos.x-plotLeft;pos.x=frame.axes.y.left.x;pos.z=frame.axes.y.left.z;vecX=frame.axes.y.left.xDir}}if(positionMode==="chart"){}else if(positionMode==="flap"){if(!axis.horiz){vecX={x:Math.cos(beta),y:0,z:Math.sin(beta)}}else{var sin=Math.sin(alpha);var cos=Math.cos(alpha);if(axis.opposite){sin=-sin}if(reverseFlap){sin=-sin}vecY={x:vecX.z*sin,y:cos,z:-vecX.x*sin}}}else if(positionMode==="ortho"){if(!axis.horiz){vecX={x:Math.cos(beta),y:0,z:Math.sin(beta)}}else{var sina=Math.sin(alpha);var cosa=Math.cos(alpha);var sinb=Math.sin(beta);var cosb=Math.cos(beta);var vecZ={x:sinb*cosa,y:-sina,z:-cosa*cosb};vecY={x:vecX.y*vecZ.z-vecX.z*vecZ.y,y:vecX.z*vecZ.x-vecX.x*vecZ.z,z:vecX.x*vecZ.y-vecX.y*vecZ.x};var scale=1/Math.sqrt(vecY.x*vecY.x+vecY.y*vecY.y+vecY.z*vecY.z);if(reverseFlap){scale=-scale}vecY={x:scale*vecY.x,y:scale*vecY.y,z:scale*vecY.z}}}else{if(!axis.horiz){vecX={x:Math.cos(beta),y:0,z:Math.sin(beta)}}else{vecY={x:Math.sin(beta)*Math.sin(alpha),y:Math.cos(alpha),z:-Math.cos(beta)*Math.sin(alpha)}}}pos.x+=offsetX*vecX.x+offsetY*vecY.x;pos.y+=offsetX*vecX.y+offsetY*vecY.y;pos.z+=offsetX*vecX.z+offsetY*vecY.z;var projected=perspective([pos],axis.chart)[0];if(skew){var isMirrored=shapeArea(perspective([pos,{x:pos.x+vecX.x,y:pos.y+vecX.y,z:pos.z+vecX.z},{x:pos.x+vecY.x,y:pos.y+vecY.y,z:pos.z+vecY.z}],axis.chart))<0;if(isMirrored){vecX={x:-vecX.x,y:-vecX.y,z:-vecX.z}}var pointsProjected=perspective([{x:pos.x,y:pos.y,z:pos.z},{x:pos.x+vecX.x,y:pos.y+vecX.y,z:pos.z+vecX.z},{x:pos.x+vecY.x,y:pos.y+vecY.y,z:pos.z+vecY.z}],axis.chart);projected.matrix=[pointsProjected[1].x-pointsProjected[0].x,pointsProjected[1].y-pointsProjected[0].y,pointsProjected[2].x-pointsProjected[0].x,pointsProjected[2].y-pointsProjected[0].y,projected.x,projected.y];projected.matrix[4]-=projected.x*projected.matrix[0]+projected.y*projected.matrix[2];projected.matrix[5]-=projected.x*projected.matrix[1]+projected.y*projected.matrix[3]}return projected};Axis3DAdditions.prototype.swapZ=function(p,insidePlotArea){var axis=this.axis;if(axis.isZAxis){var plotLeft=insidePlotArea?0:axis.chart.plotLeft;return{x:plotLeft+p.z,y:p.y,z:p.x-plotLeft}}return p};return Axis3DAdditions}();export default Axis3DAdditions;