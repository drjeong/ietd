(function webpackUniversalModuleDefinition(root,factory){if(typeof exports==="object"&&typeof module==="object")module.exports=factory(root["_Highcharts"]);else if(typeof define==="function"&&define.amd)define("highcharts/modules/draggable-points",["highcharts/highcharts"],function(amd1){return factory(amd1)});else if(typeof exports==="object")exports["highcharts/modules/draggable-points"]=factory(root["_Highcharts"]);else root["Highcharts"]=factory(root["Highcharts"])})(typeof window==="undefined"?this:window,__WEBPACK_EXTERNAL_MODULE__944__=>{return(()=>{"use strict";var __webpack_modules__={944:module=>{module.exports=__WEBPACK_EXTERNAL_MODULE__944__}};var __webpack_module_cache__={};function __webpack_require__(moduleId){var cachedModule=__webpack_module_cache__[moduleId];if(cachedModule!==undefined){return cachedModule.exports}var module=__webpack_module_cache__[moduleId]={exports:{}};__webpack_modules__[moduleId](module,module.exports,__webpack_require__);return module.exports}(()=>{__webpack_require__.n=module=>{var getter=module&&module.__esModule?()=>module["default"]:()=>module;__webpack_require__.d(getter,{a:getter});return getter}})();(()=>{__webpack_require__.d=(exports,definition)=>{for(var key in definition){if(__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)){Object.defineProperty(exports,key,{enumerable:true,get:definition[key]})}}}})();(()=>{__webpack_require__.o=(obj,prop)=>Object.prototype.hasOwnProperty.call(obj,prop)})();var __webpack_exports__={};__webpack_require__.d(__webpack_exports__,{default:()=>draggable_points_src});var highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_=__webpack_require__(944);var highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default=__webpack_require__.n(highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_);const{addEvent}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();function addEvents(el,types,fn,options){const removeFuncs=types.map(type=>addEvent(el,type,fn,options));return function(){for(const fn of removeFuncs){fn()}}}function countProps(obj){return Object.keys(obj).length}function getFirstProp(obj){for(const p in obj){if(Object.hasOwnProperty.call(obj,p)){return obj[p]}}}function getNormalizedEvent(e,chart){return typeof e.chartX==="undefined"||typeof e.chartY==="undefined"?chart.pointer?.normalize(e)||e:e}const DragDropUtilities={addEvents:addEvents,countProps:countProps,getFirstProp:getFirstProp,getNormalizedEvent:getNormalizedEvent};const DraggablePoints_DragDropUtilities=DragDropUtilities;const DragDropDefaults={dragSensitivity:2,dragHandle:{className:"highcharts-drag-handle",color:"#fff",lineColor:"rgba(0, 0, 0, 0.6)",lineWidth:1,zIndex:901},guideBox:{default:{className:"highcharts-drag-box-default",lineWidth:1,lineColor:"#888",color:"rgba(0, 0, 0, 0.1)",cursor:"move",zIndex:900}}};const DraggablePoints_DragDropDefaults=DragDropDefaults;const{animObject}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();const{addEvents:DraggableChart_addEvents,countProps:DraggableChart_countProps,getFirstProp:DraggableChart_getFirstProp,getNormalizedEvent:DraggableChart_getNormalizedEvent}=DraggablePoints_DragDropUtilities;const{doc}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();const{addEvent:DraggableChart_addEvent,isArray,merge,pick}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();function addDragDropEvents(chart){const container=chart.container;if(isChartDraggable(chart)){DraggableChart_addEvents(container,["mousedown","touchstart"],e=>{mouseDown(DraggableChart_getNormalizedEvent(e,chart),chart)});DraggableChart_addEvents(container,["mousemove","touchmove"],e=>{mouseMove(DraggableChart_getNormalizedEvent(e,chart),chart)},{passive:false});DraggableChart_addEvent(container,"mouseleave",e=>{mouseUp(DraggableChart_getNormalizedEvent(e,chart),chart)});chart.unbindDragDropMouseUp=DraggableChart_addEvents(doc,["mouseup","touchend"],e=>{mouseUp(DraggableChart_getNormalizedEvent(e,chart),chart)},{passive:false});chart.hasAddedDragDropEvents=true;DraggableChart_addEvent(chart,"destroy",()=>{if(chart.unbindDragDropMouseUp){chart.unbindDragDropMouseUp()}})}}function chartHideDragHandles(){const chart=this,dragHandles=chart.dragHandles||{};if(dragHandles){for(const key of Object.keys(dragHandles)){if(dragHandles[key].destroy){dragHandles[key].destroy()}}delete chart.dragHandles}}function chartSetGuideBoxState(state,options){const guideBox=this.dragGuideBox,guideBoxOptions=merge(DraggablePoints_DragDropDefaults.guideBox,options),stateOptions=merge(guideBoxOptions["default"],guideBoxOptions[state]);return guideBox.attr({class:stateOptions.className,stroke:stateOptions.lineColor,strokeWidth:stateOptions.lineWidth,fill:stateOptions.color,cursor:stateOptions.cursor,zIndex:stateOptions.zIndex}).css({pointerEvents:"none"})}function chartZoomOrPanKeyPressed(e){const chart=this,chartOptions=chart.options.chart||{},panKey=chartOptions.panKey&&chartOptions.panKey+"Key",zoomKey=chart.zooming.key&&chart.zooming.key+"Key";return e[zoomKey]||e[panKey]}function compose(ChartClass){const chartProto=ChartClass.prototype;if(!chartProto.hideDragHandles){chartProto.hideDragHandles=chartHideDragHandles;chartProto.setGuideBoxState=chartSetGuideBoxState;chartProto.zoomOrPanKeyPressed=chartZoomOrPanKeyPressed;DraggableChart_addEvent(ChartClass,"render",onChartRender)}}function dragMove(e,point){const series=point.series,chart=series.chart,data=chart.dragDropData,options=merge(series.options.dragDrop,point.options.dragDrop),draggableX=options.draggableX,draggableY=options.draggableY,origin=data.origin,updateProp=data.updateProp;let dX=e.chartX-origin.chartX,dY=e.chartY-origin.chartY;const oldDx=dX;if(chart.inverted){dX=-dY;dY=-oldDx}if(pick(options.liveRedraw,true)){updatePoints(chart,false);point.showDragHandles()}else{if(updateProp){resizeGuideBox(point,dX,dY)}else{chart.dragGuideBox.translate(draggableX?dX:0,draggableY?dY:0)}}origin.prevdX=dX;origin.prevdY=dY}function flipResizeSide(side){return{left:"right",right:"left",top:"bottom",bottom:"top"}[side]}function getGroupedPoints(point){const series=point.series,data=series.options.data||[],groupKey=series.options.dragDrop.groupBy;let points=[];if(series.boosted&&isArray(data)){for(let i=0,iEnd=data.length;i<iEnd;++i){points.push(new series.pointClass(series,data[i]));points[points.length-1].index=i}}else{points=series.points}return point.options[groupKey]?points.filter(comparePoint=>comparePoint.options[groupKey]===point.options[groupKey]):[point]}function getNewPoints(dragDropData,newPos){const point=dragDropData.point,series=point.series,chart=series.chart,options=merge(series.options.dragDrop,point.options.dragDrop),updateProps={},resizeProp=dragDropData.updateProp,hashmap={},dragDropProps=point.series.dragDropProps;for(const key in dragDropProps){const val=dragDropProps[key];if(resizeProp&&(resizeProp!==key||!val.resize||val.optionName&&options[val.optionName]===false)){continue}if(resizeProp||val.move&&(val.axis==="x"&&options.draggableX||val.axis==="y"&&options.draggableY)){if(chart.mapView){updateProps[key==="x"?"lon":"lat"]=val}else{updateProps[key]=val}}}for(const p of resizeProp?[point]:dragDropData.groupedPoints){hashmap[p.id]={point:p,newValues:p.getDropValues(dragDropData.origin,newPos,updateProps)}}return hashmap}function getPositionSnapshot(e,points,guideBox){const res={chartX:e.chartX,chartY:e.chartY,guideBox:guideBox&&{x:guideBox.attr("x"),y:guideBox.attr("y"),width:guideBox.attr("width"),height:guideBox.attr("height")},points:{}};for(const point of points){const dragDropProps=point.series.dragDropProps||{},pointProps={};for(const key of Object.keys(dragDropProps)){const val=dragDropProps[key],axis=point.series[val.axis+"Axis"];pointProps[key]=point[key];if(point.series.chart.mapView&&point.plotX&&point.plotY){pointProps[key+"Offset"]=key==="x"?point.plotX:point.plotY}else{pointProps[key+"Offset"]=axis.toPixels(point[key])-(axis.horiz?e.chartX:e.chartY)}}pointProps.point=point;res.points[point.id]=pointProps}return res}function hasDraggedPastSensitivity(e,chart,sensitivity){const orig=chart.dragDropData.origin,oldX=orig.chartX,oldY=orig.chartY,newX=e.chartX,newY=e.chartY,distance=Math.sqrt((newX-oldX)*(newX-oldX)+(newY-oldY)*(newY-oldY));return distance>sensitivity}function initDragDrop(e,point){const groupedPoints=getGroupedPoints(point),series=point.series,chart=series.chart;let guideBox;if(!pick(series.options.dragDrop&&series.options.dragDrop.liveRedraw,true)){chart.dragGuideBox=guideBox=series.getGuideBox(groupedPoints);chart.setGuideBoxState("default",series.options.dragDrop.guideBox).add(series.group)}chart.dragDropData={origin:getPositionSnapshot(e,groupedPoints,guideBox),point:point,groupedPoints:groupedPoints,isDragging:true}}function isChartDraggable(chart){let i=chart.series?chart.series.length:0;if(chart.hasCartesianSeries&&!chart.polar||chart.mapView){while(i--){if(chart.series[i].options.dragDrop&&isSeriesDraggable(chart.series[i])){return true}}}return false}function isPointMovable(point){const series=point.series,chart=series.chart,seriesDragDropOptions=series.options.dragDrop||{},pointDragDropOptions=point.options&&point.options.dragDrop,updateProps=series.dragDropProps;let p,hasMovableX,hasMovableY;for(const key in updateProps){p=updateProps[key];if(p.axis==="x"&&p.move){hasMovableX=true}else if(p.axis==="y"&&p.move){hasMovableY=true}}return(seriesDragDropOptions.draggableX&&hasMovableX||seriesDragDropOptions.draggableY&&hasMovableY)&&!(pointDragDropOptions&&pointDragDropOptions.draggableX===false&&pointDragDropOptions.draggableY===false)&&(!!(series.yAxis&&series.xAxis)||chart.mapView)}function isSeriesDraggable(series){const props=["draggableX","draggableY"],dragDropProps=series.dragDropProps||{};let val;for(const key of Object.keys(dragDropProps)){val=dragDropProps[key];if(val.optionName){props.push(val.optionName)}}let i=props.length;while(i--){if(series.options.dragDrop[props[i]]){return true}}}function mouseDown(e,chart){const dragPoint=chart.hoverPoint,dragDropOptions=merge(dragPoint&&dragPoint.series.options.dragDrop,dragPoint&&dragPoint.options.dragDrop),draggableX=dragDropOptions.draggableX||false,draggableY=dragDropOptions.draggableY||false;chart.cancelClick=false;if(!(draggableX||draggableY)||chart.zoomOrPanKeyPressed(e)||chart.hasDraggedAnnotation){return}if(chart.dragDropData&&chart.dragDropData.isDragging){mouseUp(e,chart);return}if(dragPoint&&isPointMovable(dragPoint)){chart.mouseIsDown=false;initDragDrop(e,dragPoint);dragPoint.firePointEvent("dragStart",e)}}function mouseMove(e,chart){if(chart.zoomOrPanKeyPressed(e)){return}const dragDropData=chart.dragDropData;let point,seriesDragDropOpts,newPoints,numNewPoints=0,newPoint;if(dragDropData&&dragDropData.isDragging&&dragDropData.point.series){point=dragDropData.point;seriesDragDropOpts=point.series.options.dragDrop;e.preventDefault();if(!dragDropData.draggedPastSensitivity){dragDropData.draggedPastSensitivity=hasDraggedPastSensitivity(e,chart,pick(point.options.dragDrop&&point.options.dragDrop.dragSensitivity,seriesDragDropOpts&&seriesDragDropOpts.dragSensitivity,DraggablePoints_DragDropDefaults.dragSensitivity))}if(dragDropData.draggedPastSensitivity){dragDropData.newPoints=getNewPoints(dragDropData,e);newPoints=dragDropData.newPoints;numNewPoints=DraggableChart_countProps(newPoints);newPoint=numNewPoints===1?DraggableChart_getFirstProp(newPoints):null;point.firePointEvent("drag",{origin:dragDropData.origin,newPoints:dragDropData.newPoints,newPoint:newPoint&&newPoint.newValues,newPointId:newPoint&&newPoint.point.id,numNewPoints:numNewPoints,chartX:e.chartX,chartY:e.chartY},function(){dragMove(e,point)})}}}function mouseUp(e,chart){const dragDropData=chart.dragDropData;if(dragDropData&&dragDropData.isDragging&&dragDropData.draggedPastSensitivity&&dragDropData.point.series){const point=dragDropData.point,newPoints=dragDropData.newPoints,numNewPoints=DraggableChart_countProps(newPoints),newPoint=numNewPoints===1?DraggableChart_getFirstProp(newPoints):null;if(chart.dragHandles){chart.hideDragHandles()}e.preventDefault();chart.cancelClick=true;point.firePointEvent("drop",{origin:dragDropData.origin,chartX:e.chartX,chartY:e.chartY,newPoints:newPoints,numNewPoints:numNewPoints,newPoint:newPoint&&newPoint.newValues,newPointId:newPoint&&newPoint.point.id},function(){updatePoints(chart)})}delete chart.dragDropData;if(chart.dragGuideBox){chart.dragGuideBox.destroy();delete chart.dragGuideBox}}function onChartRender(){if(!this.hasAddedDragDropEvents){addDragDropEvents(this)}}function resizeGuideBox(point,dX,dY){const series=point.series,chart=series.chart,dragDropData=chart.dragDropData,resizeProp=series.dragDropProps[dragDropData.updateProp],newPoint=dragDropData.newPoints[point.id].newValues,resizeSide=typeof resizeProp.resizeSide==="function"?resizeProp.resizeSide(newPoint,point):resizeProp.resizeSide;if(resizeProp.beforeResize){resizeProp.beforeResize(chart.dragGuideBox,newPoint,point)}resizeRect(chart.dragGuideBox,resizeProp.axis==="x"&&series.xAxis.reversed||resizeProp.axis==="y"&&series.yAxis.reversed?flipResizeSide(resizeSide):resizeSide,{x:resizeProp.axis==="x"?dX-(dragDropData.origin.prevdX||0):0,y:resizeProp.axis==="y"?dY-(dragDropData.origin.prevdY||0):0})}function resizeRect(rect,updateSide,update){let resizeAttrs;switch(updateSide){case"left":resizeAttrs={x:rect.attr("x")+update.x,width:Math.max(1,rect.attr("width")-update.x)};break;case"right":resizeAttrs={width:Math.max(1,rect.attr("width")+update.x)};break;case"top":resizeAttrs={y:rect.attr("y")+update.y,height:Math.max(1,rect.attr("height")-update.y)};break;case"bottom":resizeAttrs={height:Math.max(1,rect.attr("height")+update.y)};break;default:}rect.attr(resizeAttrs)}function updatePoints(chart,animation){const newPoints=chart.dragDropData.newPoints,animOptions=animObject(animation);chart.isDragDropAnimating=true;let newPoint;for(const key of Object.keys(newPoints)){newPoint=newPoints[key];newPoint.point.update(newPoint.newValues,false)}chart.redraw(animOptions);setTimeout(()=>{delete chart.isDragDropAnimating;if(chart.hoverPoint&&!chart.dragHandles){chart.hoverPoint.showDragHandles()}},animOptions.duration)}const DraggableChart={compose:compose,flipResizeSide:flipResizeSide,initDragDrop:initDragDrop};const DraggablePoints_DraggableChart=DraggableChart;const{flipResizeSide:DragDropProps_flipResizeSide}=DraggablePoints_DraggableChart;const{isNumber,merge:DragDropProps_merge,pick:DragDropProps_pick}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();const line={x:{axis:"x",move:true},y:{axis:"y",move:true}};const flags=line;const column={x:{axis:"x",move:true},y:{axis:"y",move:false,resize:true,beforeResize:(guideBox,pointVals,point)=>{const plotThreshold=DragDropProps_pick(point.yBottom,point.series.translatedThreshold),plotY=guideBox.attr("y"),threshold=isNumber(point.stackY)?point.stackY-(point.y||0):point.series.options.threshold||0,y=threshold+pointVals.y;let height,diff;if(point.series.yAxis.reversed?y<threshold:y>=threshold){height=guideBox.attr("height");diff=plotThreshold?plotThreshold-plotY-height:0;guideBox.attr({height:Math.max(0,Math.round(height+diff))})}else{guideBox.attr({y:Math.round(plotY+(plotThreshold?plotThreshold-plotY:0))})}},resizeSide:(pointVals,point)=>{const chart=point.series.chart,dragHandles=chart.dragHandles,side=pointVals.y>=(point.series.options.threshold||0)?"top":"bottom",flipSide=DragDropProps_flipResizeSide(side);if(dragHandles&&dragHandles[flipSide]){dragHandles[flipSide].destroy();delete dragHandles[flipSide]}return side},handlePositioner:point=>{const bBox=point.shapeArgs||point.graphic&&point.graphic.getBBox()||{},reversed=point.series.yAxis.reversed,threshold=point.series.options.threshold||0,y=point.y||0,bottom=!reversed&&y>=threshold||reversed&&y<threshold;return{x:bBox.x||0,y:bottom?bBox.y||0:(bBox.y||0)+(bBox.height||0)}},handleFormatter:point=>{const shapeArgs=point.shapeArgs||{},radius=shapeArgs.r||0,width=shapeArgs.width||0,centerX=width/2;return[["M",radius,0],["L",centerX-5,0],["A",1,1,0,0,0,centerX+5,0],["A",1,1,0,0,0,centerX-5,0],["M",centerX+5,0],["L",width-radius,0]]}}};const boxplot={x:column.x,low:{optionName:"draggableLow",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>({x:point.shapeArgs.x||0,y:point.lowPlot}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.q1},q1:{optionName:"draggableQ1",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>({x:point.shapeArgs.x||0,y:point.q1Plot}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.median&&val>=point.low},median:{axis:"y",move:true},q3:{optionName:"draggableQ3",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>({x:point.shapeArgs.x||0,y:point.q3Plot}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.high&&val>=point.median},high:{optionName:"draggableHigh",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>({x:point.shapeArgs.x||0,y:point.highPlot}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val>=point.q3}};const errorbar={x:column.x,low:{...boxplot.low,propValidate:(val,point)=>val<=point.high},high:{...boxplot.high,propValidate:(val,point)=>val>=point.low}};const bullet={x:column.x,y:column.y,target:{optionName:"draggableTarget",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>{const bBox=point.targetGraphic.getBBox();return{x:point.barX,y:bBox.y+bBox.height/2}},handleFormatter:column.y.handleFormatter}};const ohlc={x:column.x,low:{optionName:"draggableLow",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>({x:point.shapeArgs.x,y:point.plotLow}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.open&&val<=point.close},high:{optionName:"draggableHigh",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>({x:point.shapeArgs.x,y:point.plotHigh}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val>=point.open&&val>=point.close},open:{optionName:"draggableOpen",axis:"y",move:true,resize:true,resizeSide:point=>point.open>=point.close?"top":"bottom",handlePositioner:point=>({x:point.shapeArgs.x,y:point.plotOpen}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.high&&val>=point.low},close:{optionName:"draggableClose",axis:"y",move:true,resize:true,resizeSide:point=>point.open>=point.close?"bottom":"top",handlePositioner:point=>({x:point.shapeArgs.x,y:point.plotClose}),handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.high&&val>=point.low}};const waterfall={x:column.x,y:DragDropProps_merge(column.y,{handleFormatter:point=>point.isSum||point.isIntermediateSum?null:column?.y?.handleFormatter?.(point)||null})};const columnrange={x:{axis:"x",move:true},low:{optionName:"draggableLow",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>{const bBox=point.shapeArgs||point.graphic.getBBox();return{x:bBox.x||0,y:(bBox.y||0)+(bBox.height||0)}},handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val<=point.high},high:{optionName:"draggableHigh",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>{const bBox=point.shapeArgs||point.graphic.getBBox();return{x:bBox.x||0,y:bBox.y||0}},handleFormatter:column.y.handleFormatter,propValidate:(val,point)=>val>=point.low}};const arearange={x:columnrange.x,low:{optionName:"draggableLow",axis:"y",move:true,resize:true,resizeSide:"bottom",handlePositioner:point=>{const bBox=point.graphics&&point.graphics[0]&&point.graphics[0].getBBox();return bBox?{x:bBox.x+bBox.width/2,y:bBox.y+bBox.height/2}:{x:-999,y:-999}},handleFormatter:arearangeHandleFormatter,propValidate:columnrange.low.propValidate},high:{optionName:"draggableHigh",axis:"y",move:true,resize:true,resizeSide:"top",handlePositioner:point=>{const bBox=point.graphics&&point.graphics[1]&&point.graphics[1].getBBox();return bBox?{x:bBox.x+bBox.width/2,y:bBox.y+bBox.height/2}:{x:-999,y:-999}},handleFormatter:arearangeHandleFormatter,propValidate:columnrange.high.propValidate}};const xrange={y:{axis:"y",move:true},x:{optionName:"draggableX1",axis:"x",move:true,resize:true,resizeSide:"left",handlePositioner:point=>xrangeHandlePositioner(point,"x"),handleFormatter:horizHandleFormatter,propValidate:(val,point)=>val<=point.x2},x2:{optionName:"draggableX2",axis:"x",move:true,resize:true,resizeSide:"right",handlePositioner:point=>xrangeHandlePositioner(point,"x2"),handleFormatter:horizHandleFormatter,propValidate:(val,point)=>val>=point.x}};const gantt={y:xrange.y,start:DragDropProps_merge(xrange.x,{optionName:"draggableStart",validateIndividualDrag:point=>!point.milestone}),end:DragDropProps_merge(xrange.x2,{optionName:"draggableEnd",validateIndividualDrag:point=>!point.milestone})};function arearangeHandleFormatter(point){const radius=point.graphic?point.graphic.getBBox().width/2+1:4;return[["M",0-radius,0],["a",radius,radius,0,1,0,radius*2,0],["a",radius,radius,0,1,0,radius*-2,0]]}function horizHandleFormatter(point){const shapeArgs=point.shapeArgs||point.graphic.getBBox(),top=shapeArgs.r||0,bottom=shapeArgs.height-top,centerY=shapeArgs.height/2;return[["M",0,top],["L",0,centerY-5],["A",1,1,0,0,0,0,centerY+5],["A",1,1,0,0,0,0,centerY-5],["M",0,centerY+5],["L",0,bottom]]}function xrangeHandlePositioner(point,xProp){const series=point.series,xAxis=series.xAxis,yAxis=series.yAxis,inverted=series.chart.inverted,offsetY=series.columnMetrics?series.columnMetrics.offset:-point.shapeArgs.height/2;let newX=xAxis.toPixels(point[xProp],true),newY=yAxis.toPixels(point.y,true);if(inverted){newX=xAxis.len-newX;newY=yAxis.len-newY}newY+=offsetY;return{x:Math.round(newX),y:Math.round(newY)}}const DragDropProps={arearange:arearange,boxplot:boxplot,bullet:bullet,column:column,columnrange:columnrange,errorbar:errorbar,flags:flags,gantt:gantt,line:line,ohlc:ohlc,waterfall:waterfall,xrange:xrange};const DraggablePoints_DragDropProps=DragDropProps;const{addEvents:DraggablePoints_addEvents,getNormalizedEvent:DraggablePoints_getNormalizedEvent}=DraggablePoints_DragDropUtilities;const{initDragDrop:DraggablePoints_initDragDrop}=DraggablePoints_DraggableChart;const{addEvent:DraggablePoints_addEvent,clamp,isNumber:DraggablePoints_isNumber,merge:DraggablePoints_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();function DraggablePoints_compose(ChartClass,SeriesClass){DraggablePoints_DraggableChart.compose(ChartClass);const seriesProto=SeriesClass.prototype;if(!seriesProto.dragDropProps){const PointClass=SeriesClass.prototype.pointClass,seriesTypes=SeriesClass.types,pointProto=PointClass.prototype;pointProto.getDropValues=pointGetDropValues;pointProto.showDragHandles=pointShowDragHandles;DraggablePoints_addEvent(PointClass,"mouseOut",onPointMouseOut);DraggablePoints_addEvent(PointClass,"mouseOver",onPointMouseOver);DraggablePoints_addEvent(PointClass,"remove",onPointRemove);seriesProto.dragDropProps=DraggablePoints_DragDropProps.line;seriesProto.getGuideBox=seriesGetGuideBox;const seriesWithDragDropProps=["arearange","boxplot","bullet","column","columnrange","errorbar","flags","gantt","ohlc","waterfall","xrange"];for(const seriesType of seriesWithDragDropProps){if(seriesTypes[seriesType]){seriesTypes[seriesType].prototype.dragDropProps=DraggablePoints_DragDropProps[seriesType]}}const seriesWithoutDragDropProps=["bellcurve","gauge","histogram","map","mapline","pareto","pie","sankey","sma","sunburst","treemap","vector","windbarb","wordcloud"];for(const seriesType of seriesWithoutDragDropProps){if(seriesTypes[seriesType]){seriesTypes[seriesType].prototype.dragDropProps=null}}}}function mouseOut(point){const chart=point.series&&point.series.chart,dragDropData=chart&&chart.dragDropData;if(chart&&chart.dragHandles&&!(dragDropData&&(dragDropData.isDragging&&dragDropData.draggedPastSensitivity||dragDropData.isHoveringHandle===point.id))){chart.hideDragHandles()}}function mouseOver(point){const series=point.series,chart=series&&series.chart,dragDropData=chart&&chart.dragDropData,is3d=chart&&chart.is3d&&chart.is3d();if(chart&&!(dragDropData&&dragDropData.isDragging&&dragDropData.draggedPastSensitivity)&&!chart.isDragDropAnimating&&series.options.dragDrop&&!is3d){if(chart.dragHandles){chart.hideDragHandles()}point.showDragHandles()}}function onPointMouseOut(){const point=this;setTimeout(()=>{if(point.series){mouseOut(point)}},10)}function onPointMouseOver(){const point=this;setTimeout(()=>mouseOver(point),12)}function onPointRemove(){const chart=this.series.chart,dragHandles=chart.dragHandles;if(dragHandles&&dragHandles.point===this.id){chart.hideDragHandles()}}function onResizeHandleMouseOut(point){const chart=point.series.chart;if(chart.dragDropData&&point.id===chart.dragDropData.isHoveringHandle){delete chart.dragDropData.isHoveringHandle}if(!chart.hoverPoint){mouseOut(point)}}function onResizeHandleMouseDown(e,point,updateProp){const chart=point.series.chart;if(chart.zoomOrPanKeyPressed(e)){return}chart.mouseIsDown=false;DraggablePoints_initDragDrop(e,point);chart.dragDropData.updateProp=e.updateProp=updateProp;point.firePointEvent("dragStart",e);e.stopPropagation();e.preventDefault()}function pointGetDropValues(origin,newPos,updateProps){const point=this,series=point.series,chart=series.chart,mapView=chart.mapView,options=DraggablePoints_merge(series.options.dragDrop,point.options.dragDrop),result={},pointOrigin=origin.points[point.id],updateSingleProp=Object.keys(updateProps).length===1;const limitToRange=(val,dir)=>{const direction=dir.toUpperCase(),time=series.chart.time,defaultPrecision=series[`${dir}Axis`].categories?1:0,precision=options[`dragPrecision${direction}`]??defaultPrecision,min=time.parse(options[`dragMin${direction}`])??-Infinity,max=time.parse(options[`dragMax${direction}`])??Infinity;let res=val;if(precision){res=Math.round(res/precision)*precision}return clamp(res,min,max)};const limitToMapRange=(newPos,dir,key)=>{if(mapView){const direction=dir.toUpperCase(),precision=options[`dragPrecision${direction}`]??0,lonLatMin=mapView.pixelsToLonLat({x:0,y:0}),lonLatMax=mapView.pixelsToLonLat({x:chart.plotBox.width,y:chart.plotBox.height});let min=options[`dragMin${direction}`]??lonLatMin?.[key]??-Infinity,max=options[`dragMax${direction}`]??lonLatMax?.[key]??Infinity,res=newPos[key];if(mapView.projection.options.name==="Orthographic"){return res}if(key==="lat"){if(isNaN(min)||min>mapView.projection.maxLatitude){min=mapView.projection.maxLatitude}if(isNaN(max)||max<-1*mapView.projection.maxLatitude){max=-1*mapView.projection.maxLatitude}const temp=max;max=min;min=temp}if(!mapView.projection.hasCoordinates){const lonLatRes=mapView.pixelsToLonLat({x:newPos.chartX-chart.plotLeft,y:chart.plotHeight-newPos.chartY+chart.plotTop});if(lonLatRes){res=lonLatRes[key]}}if(precision){res=Math.round(res/precision)*precision}return clamp(res,min,max)}};for(const key of Object.keys(updateProps)){const val=updateProps[key],oldVal=pointOrigin.point[key],axis=series[val.axis+"Axis"],newVal=mapView?limitToMapRange(newPos,val.axis,key):limitToRange(axis.toValue((axis.horiz?newPos.chartX:newPos.chartY)+pointOrigin[key+"Offset"]),val.axis);if(DraggablePoints_isNumber(newVal)&&!(updateSingleProp&&val.propValidate&&!val.propValidate(newVal,point))&&typeof oldVal!=="undefined"){result[key]=newVal}}return result}function pointShowDragHandles(){const point=this,series=point.series,chart=series.chart,{inverted,renderer}=chart,options=DraggablePoints_merge(series.options.dragDrop,point.options.dragDrop),dragDropProps=series.dragDropProps||{};let dragHandles=chart.dragHandles;for(const key of Object.keys(dragDropProps)){const val=dragDropProps[key],handleOptions=DraggablePoints_merge(DraggablePoints_DragDropDefaults.dragHandle,val.handleOptions,options.dragHandle),handleAttrs={class:handleOptions.className,"stroke-width":handleOptions.lineWidth,fill:handleOptions.color,stroke:handleOptions.lineColor},pathFormatter=handleOptions.pathFormatter||val.handleFormatter,handlePositioner=val.handlePositioner,validate=val.validateIndividualDrag?val.validateIndividualDrag(point):true;let pos,handle,path;if(val.resize&&validate&&val.resizeSide&&pathFormatter&&(options["draggable"+val.axis.toUpperCase()]||options[val.optionName])&&options[val.optionName]!==false){if(!dragHandles){dragHandles=chart.dragHandles={group:renderer.g("drag-drop-handles").add(series.markerGroup||series.group),point:point.id}}else{dragHandles.point=point.id}pos=handlePositioner(point);handleAttrs.d=path=pathFormatter(point);const minEdge=point.series.xAxis.categories?-.5:0;if(!path||pos.x<minEdge||pos.y<0){return}handleAttrs.cursor=handleOptions.cursor||(val.axis==="x"!==!!inverted?"ew-resize":"ns-resize");handle=dragHandles[val.optionName];if(!handle){handle=dragHandles[val.optionName]=renderer.path().add(dragHandles.group)}handleAttrs.translateX=inverted?series.yAxis.len-pos.y:pos.x;handleAttrs.translateY=inverted?series.xAxis.len-pos.x:pos.y;if(inverted){handleAttrs.rotation=-90}handle.attr(handleAttrs);DraggablePoints_addEvents(handle.element,["touchstart","mousedown"],e=>{onResizeHandleMouseDown(DraggablePoints_getNormalizedEvent(e,chart),point,key)},{passive:false});DraggablePoints_addEvent(dragHandles.group.element,"mouseover",()=>{chart.dragDropData=chart.dragDropData||{};chart.dragDropData.isHoveringHandle=point.id});DraggablePoints_addEvents(dragHandles.group.element,["touchend","mouseout"],()=>{onResizeHandleMouseOut(point)})}}}function seriesGetGuideBox(points){const chart=this.chart;let minX=Infinity,maxX=-Infinity,minY=Infinity,maxY=-Infinity,changed;for(const point of points){const bBox=point.graphic&&point.graphic.getBBox()||point.shapeArgs;if(bBox){let plotX2;const x2=point.x2;if(DraggablePoints_isNumber(x2)){plotX2=point.series.xAxis.translate(x2,false,false,false,true)}const skipBBox=!(bBox.width||bBox.height||bBox.x||bBox.y);changed=true;minX=Math.min(point.plotX||0,plotX2||0,skipBBox?Infinity:bBox.x||0,minX);maxX=Math.max(point.plotX||0,plotX2||0,(bBox.x||0)+(bBox.width||0),maxX);minY=Math.min(point.plotY||0,skipBBox?Infinity:bBox.y||0,minY);maxY=Math.max((bBox.y||0)+(bBox.height||0),maxY)}}return changed?chart.renderer.rect(minX,minY,maxX-minX,maxY-minY):chart.renderer.g()}const DraggablePoints={compose:DraggablePoints_compose};const DraggablePoints_DraggablePoints=DraggablePoints;"";const G=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();DraggablePoints_DraggablePoints.compose(G.Chart,G.Series);const draggable_points_src=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();__webpack_exports__=__webpack_exports__["default"];return __webpack_exports__})()});