(function webpackUniversalModuleDefinition(root,factory){if(typeof exports==="object"&&typeof module==="object")module.exports=factory(root["_Highcharts"]);else if(typeof define==="function"&&define.amd)define("highcharts/modules/data-tools",["highcharts/highcharts"],function(amd1){return factory(amd1)});else if(typeof exports==="object")exports["highcharts/modules/data-tools"]=factory(root["_Highcharts"]);else root["Highcharts"]=factory(root["Highcharts"])})(typeof window==="undefined"?this:window,__WEBPACK_EXTERNAL_MODULE__944__=>{return(()=>{"use strict";var __webpack_modules__={944:module=>{module.exports=__WEBPACK_EXTERNAL_MODULE__944__}};var __webpack_module_cache__={};function __webpack_require__(moduleId){var cachedModule=__webpack_module_cache__[moduleId];if(cachedModule!==undefined){return cachedModule.exports}var module=__webpack_module_cache__[moduleId]={exports:{}};__webpack_modules__[moduleId](module,module.exports,__webpack_require__);return module.exports}(()=>{__webpack_require__.n=module=>{var getter=module&&module.__esModule?()=>module["default"]:()=>module;__webpack_require__.d(getter,{a:getter});return getter}})();(()=>{__webpack_require__.d=(exports,definition)=>{for(var key in definition){if(__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)){Object.defineProperty(exports,key,{enumerable:true,get:definition[key]})}}}})();(()=>{__webpack_require__.o=(obj,prop)=>Object.prototype.hasOwnProperty.call(obj,prop)})();var __webpack_exports__={};__webpack_require__.d(__webpack_exports__,{default:()=>data_tools_src});var highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_=__webpack_require__(944);var highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default=__webpack_require__.n(highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_);const{addEvent,fireEvent,merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class DataModifier{benchmark(dataTable,options){const results=[];const modifier=this;const execute=()=>{modifier.modifyTable(dataTable);modifier.emit({type:"afterBenchmarkIteration"})};const defaultOptions={iterations:1};const{iterations}=merge(defaultOptions,options);modifier.on("afterBenchmarkIteration",()=>{if(results.length===iterations){modifier.emit({type:"afterBenchmark",results:results});return}execute()});const times={startTime:0,endTime:0};modifier.on("modify",()=>{times.startTime=window.performance.now()});modifier.on("afterModify",()=>{times.endTime=window.performance.now();results.push(times.endTime-times.startTime)});execute();return results}emit(e){fireEvent(this,e.type,e)}modify(table,eventDetail){const modifier=this;return new Promise((resolve,reject)=>{if(table.modified===table){table.modified=table.clone(false,eventDetail)}try{resolve(modifier.modifyTable(table,eventDetail))}catch(e){modifier.emit({type:"error",detail:eventDetail,table:table});reject(e)}})}modifyCell(table,columnName,rowIndex,cellValue,eventDetail){return this.modifyTable(table)}modifyColumns(table,columns,rowIndex,eventDetail){return this.modifyTable(table)}modifyRows(table,rows,rowIndex,eventDetail){return this.modifyTable(table)}on(type,callback){return addEvent(this,type,callback)}}(function(DataModifier){DataModifier.types={};function registerType(key,DataModifierClass){return!!key&&!DataModifier.types[key]&&!!(DataModifier.types[key]=DataModifierClass)}DataModifier.registerType=registerType})(DataModifier||(DataModifier={}));const Modifiers_DataModifier=DataModifier;const{fireEvent:DataTableCore_fireEvent,isArray,objectEach,uniqueKey}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class DataTableCore{constructor(options={}){this.autoId=!options.id;this.columns={};this.id=options.id||uniqueKey();this.modified=this;this.rowCount=0;this.versionTag=uniqueKey();let rowCount=0;objectEach(options.columns||{},(column,columnName)=>{this.columns[columnName]=column.slice();rowCount=Math.max(rowCount,column.length)});this.applyRowCount(rowCount)}applyRowCount(rowCount){this.rowCount=rowCount;objectEach(this.columns,column=>{if(isArray(column)){column.length=rowCount}})}getColumn(columnName,asReference){return this.columns[columnName]}getColumns(columnNames,asReference){return(columnNames||Object.keys(this.columns)).reduce((columns,columnName)=>{columns[columnName]=this.columns[columnName];return columns},{})}getRow(rowIndex,columnNames){return(columnNames||Object.keys(this.columns)).map(key=>this.columns[key]?.[rowIndex])}setColumn(columnName,column=[],rowIndex=0,eventDetail){this.setColumns({[columnName]:column},rowIndex,eventDetail)}setColumns(columns,rowIndex,eventDetail){let rowCount=this.rowCount;objectEach(columns,(column,columnName)=>{this.columns[columnName]=column.slice();rowCount=column.length});this.applyRowCount(rowCount);if(!eventDetail?.silent){DataTableCore_fireEvent(this,"afterSetColumns");this.versionTag=uniqueKey()}}setRow(row,rowIndex=this.rowCount,insert,eventDetail){const{columns}=this,indexRowCount=insert?this.rowCount+1:rowIndex+1;objectEach(row,(cellValue,columnName)=>{const column=columns[columnName]||eventDetail?.addColumns!==false&&new Array(indexRowCount);if(column){if(insert){column.splice(rowIndex,0,cellValue)}else{column[rowIndex]=cellValue}columns[columnName]=column}});if(indexRowCount>this.rowCount){this.applyRowCount(indexRowCount)}if(!eventDetail?.silent){DataTableCore_fireEvent(this,"afterSetRows");this.versionTag=uniqueKey()}}}const Data_DataTableCore=DataTableCore;"";const{addEvent:DataTable_addEvent,defined,fireEvent:DataTable_fireEvent,extend,uniqueKey:DataTable_uniqueKey}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class DataTable extends Data_DataTableCore{static isNull(row){if(row===DataTable.NULL){return true}if(row instanceof Array){if(!row.length){return false}for(let i=0,iEnd=row.length;i<iEnd;++i){if(row[i]!==null){return false}}}else{const columnNames=Object.keys(row);if(!columnNames.length){return false}for(let i=0,iEnd=columnNames.length;i<iEnd;++i){if(row[columnNames[i]]!==null){return false}}}return true}constructor(options={}){super(options);this.modified=this}clone(skipColumns,eventDetail){const table=this,tableOptions={};table.emit({type:"cloneTable",detail:eventDetail});if(!skipColumns){tableOptions.columns=table.columns}if(!table.autoId){tableOptions.id=table.id}const tableClone=new DataTable(tableOptions);if(!skipColumns){tableClone.versionTag=table.versionTag;tableClone.originalRowIndexes=table.originalRowIndexes;tableClone.localRowIndexes=table.localRowIndexes}table.emit({type:"afterCloneTable",detail:eventDetail,tableClone:tableClone});return tableClone}deleteColumns(columnNames,eventDetail){const table=this,columns=table.columns,deletedColumns={},modifiedColumns={},modifier=table.modifier,rowCount=table.rowCount;columnNames=columnNames||Object.keys(columns);if(columnNames.length){table.emit({type:"deleteColumns",columnNames:columnNames,detail:eventDetail});for(let i=0,iEnd=columnNames.length,column,columnName;i<iEnd;++i){columnName=columnNames[i];column=columns[columnName];if(column){deletedColumns[columnName]=column;modifiedColumns[columnName]=new Array(rowCount)}delete columns[columnName]}if(!Object.keys(columns).length){table.rowCount=0;this.deleteRowIndexReferences()}if(modifier){modifier.modifyColumns(table,modifiedColumns,0,eventDetail)}table.emit({type:"afterDeleteColumns",columns:deletedColumns,columnNames:columnNames,detail:eventDetail});return deletedColumns}}deleteRowIndexReferences(){delete this.originalRowIndexes;delete this.localRowIndexes}deleteRows(rowIndex,rowCount=1,eventDetail){const table=this,deletedRows=[],modifiedRows=[],modifier=table.modifier;table.emit({type:"deleteRows",detail:eventDetail,rowCount:rowCount,rowIndex:rowIndex||0});if(typeof rowIndex==="undefined"){rowIndex=0;rowCount=table.rowCount}if(rowCount>0&&rowIndex<table.rowCount){const columns=table.columns,columnNames=Object.keys(columns);for(let i=0,iEnd=columnNames.length,column,deletedCells;i<iEnd;++i){column=columns[columnNames[i]];deletedCells=column.splice(rowIndex,rowCount);if(!i){table.rowCount=column.length}for(let j=0,jEnd=deletedCells.length;j<jEnd;++j){deletedRows[j]=deletedRows[j]||[];deletedRows[j][i]=deletedCells[j]}modifiedRows.push(new Array(iEnd))}}if(modifier){modifier.modifyRows(table,modifiedRows,rowIndex||0,eventDetail)}table.emit({type:"afterDeleteRows",detail:eventDetail,rowCount:rowCount,rowIndex:rowIndex||0,rows:deletedRows});return deletedRows}emit(e){if(["afterDeleteColumns","afterDeleteRows","afterSetCell","afterSetColumns","afterSetRows"].includes(e.type)){this.versionTag=DataTable_uniqueKey()}DataTable_fireEvent(this,e.type,e)}getCell(columnName,rowIndex){const table=this;const column=table.columns[columnName];if(column){return column[rowIndex]}}getCellAsBoolean(columnName,rowIndex){const table=this;const column=table.columns[columnName];return!!(column&&column[rowIndex])}getCellAsNumber(columnName,rowIndex,useNaN){const table=this;const column=table.columns[columnName];let cellValue=column&&column[rowIndex];switch(typeof cellValue){case"boolean":return cellValue?1:0;case"number":return isNaN(cellValue)&&!useNaN?null:cellValue}cellValue=parseFloat(`${cellValue??""}`);return isNaN(cellValue)&&!useNaN?null:cellValue}getCellAsString(columnName,rowIndex){const table=this;const column=table.columns[columnName];return`${column&&column[rowIndex]}`}getColumn(columnName,asReference){return this.getColumns([columnName],asReference)[columnName]}getColumnAsNumbers(columnName,useNaN){const table=this,columns=table.columns;const column=columns[columnName],columnAsNumber=[];if(column){const columnLength=column.length;if(useNaN){for(let i=0;i<columnLength;++i){columnAsNumber.push(table.getCellAsNumber(columnName,i,true))}}else{for(let i=0,cellValue;i<columnLength;++i){cellValue=column[i];if(typeof cellValue==="number"){return column.slice()}if(cellValue!==null&&typeof cellValue!=="undefined"){break}}for(let i=0;i<columnLength;++i){columnAsNumber.push(table.getCellAsNumber(columnName,i))}}}return columnAsNumber}getColumnNames(){const table=this,columnNames=Object.keys(table.columns);return columnNames}getColumns(columnNames,asReference){const table=this,tableColumns=table.columns,columns={};columnNames=columnNames||Object.keys(tableColumns);for(let i=0,iEnd=columnNames.length,column,columnName;i<iEnd;++i){columnName=columnNames[i];column=tableColumns[columnName];if(column){columns[columnName]=asReference?column:column.slice()}}return columns}getLocalRowIndex(originalRowIndex){const{localRowIndexes}=this;if(localRowIndexes){return localRowIndexes[originalRowIndex]}return originalRowIndex}getModifier(){return this.modifier}getOriginalRowIndex(rowIndex){const{originalRowIndexes}=this;if(originalRowIndexes){return originalRowIndexes[rowIndex]}return rowIndex}getRow(rowIndex,columnNames){return this.getRows(rowIndex,1,columnNames)[0]}getRowCount(){return this.rowCount}getRowIndexBy(columnName,cellValue,rowIndexOffset){const table=this;const column=table.columns[columnName];if(column){const rowIndex=column.indexOf(cellValue,rowIndexOffset);if(rowIndex!==-1){return rowIndex}}}getRowObject(rowIndex,columnNames){return this.getRowObjects(rowIndex,1,columnNames)[0]}getRowObjects(rowIndex=0,rowCount=this.rowCount-rowIndex,columnNames){const table=this,columns=table.columns,rows=new Array(rowCount);columnNames=columnNames||Object.keys(columns);for(let i=rowIndex,i2=0,iEnd=Math.min(table.rowCount,rowIndex+rowCount),column,row;i<iEnd;++i,++i2){row=rows[i2]={};for(const columnName of columnNames){column=columns[columnName];row[columnName]=column?column[i]:void 0}}return rows}getRows(rowIndex=0,rowCount=this.rowCount-rowIndex,columnNames){const table=this,columns=table.columns,rows=new Array(rowCount);columnNames=columnNames||Object.keys(columns);for(let i=rowIndex,i2=0,iEnd=Math.min(table.rowCount,rowIndex+rowCount),column,row;i<iEnd;++i,++i2){row=rows[i2]=[];for(const columnName of columnNames){column=columns[columnName];row.push(column?column[i]:void 0)}}return rows}getVersionTag(){return this.versionTag}hasColumns(columnNames){const table=this,columns=table.columns;for(let i=0,iEnd=columnNames.length,columnName;i<iEnd;++i){columnName=columnNames[i];if(!columns[columnName]){return false}}return true}hasRowWith(columnName,cellValue){const table=this;const column=table.columns[columnName];if(column){return column.indexOf(cellValue)!==-1}return false}on(type,callback){return DataTable_addEvent(this,type,callback)}renameColumn(columnName,newColumnName){const table=this,columns=table.columns;if(columns[columnName]){if(columnName!==newColumnName){columns[newColumnName]=columns[columnName];delete columns[columnName]}return true}return false}setCell(columnName,rowIndex,cellValue,eventDetail){const table=this,columns=table.columns,modifier=table.modifier;let column=columns[columnName];if(column&&column[rowIndex]===cellValue){return}table.emit({type:"setCell",cellValue:cellValue,columnName:columnName,detail:eventDetail,rowIndex:rowIndex});if(!column){column=columns[columnName]=new Array(table.rowCount)}if(rowIndex>=table.rowCount){table.rowCount=rowIndex+1}column[rowIndex]=cellValue;if(modifier){modifier.modifyCell(table,columnName,rowIndex,cellValue)}table.emit({type:"afterSetCell",cellValue:cellValue,columnName:columnName,detail:eventDetail,rowIndex:rowIndex})}setColumns(columns,rowIndex,eventDetail){const table=this,tableColumns=table.columns,tableModifier=table.modifier,columnNames=Object.keys(columns);let rowCount=table.rowCount;table.emit({type:"setColumns",columns:columns,columnNames:columnNames,detail:eventDetail,rowIndex:rowIndex});if(typeof rowIndex==="undefined"){super.setColumns(columns,rowIndex,extend(eventDetail,{silent:true}))}else{for(let i=0,iEnd=columnNames.length,column,columnName;i<iEnd;++i){columnName=columnNames[i];column=columns[columnName];const tableColumn=tableColumns[columnName]?tableColumns[columnName]:tableColumns[columnName]=new Array(table.rowCount);for(let i=rowIndex||0,iEnd=column.length;i<iEnd;++i){tableColumn[i]=column[i]}rowCount=Math.max(rowCount,tableColumn.length)}this.applyRowCount(rowCount)}if(tableModifier){tableModifier.modifyColumns(table,columns,rowIndex||0)}table.emit({type:"afterSetColumns",columns:columns,columnNames:columnNames,detail:eventDetail,rowIndex:rowIndex})}setModifier(modifier,eventDetail){const table=this;let promise;table.emit({type:"setModifier",detail:eventDetail,modifier:modifier,modified:table.modified});table.modified=table;table.modifier=modifier;if(modifier){promise=modifier.modify(table)}else{promise=Promise.resolve(table)}return promise.then(table=>{table.emit({type:"afterSetModifier",detail:eventDetail,modifier:modifier,modified:table.modified});return table})["catch"](error=>{table.emit({type:"setModifierError",error:error,modifier:modifier,modified:table.modified});throw error})}setOriginalRowIndexes(originalRowIndexes,omitLocalRowIndexes=false){this.originalRowIndexes=originalRowIndexes;if(omitLocalRowIndexes){return}const modifiedIndexes=this.localRowIndexes=[];for(let i=0,iEnd=originalRowIndexes.length,originalIndex;i<iEnd;++i){originalIndex=originalRowIndexes[i];if(defined(originalIndex)){modifiedIndexes[originalIndex]=i}}}setRow(row,rowIndex,insert,eventDetail){this.setRows([row],rowIndex,insert,eventDetail)}setRows(rows,rowIndex=this.rowCount,insert,eventDetail){const table=this,columns=table.columns,columnNames=Object.keys(columns),modifier=table.modifier,rowCount=rows.length;table.emit({type:"setRows",detail:eventDetail,rowCount:rowCount,rowIndex:rowIndex,rows:rows});for(let i=0,i2=rowIndex,row;i<rowCount;++i,++i2){row=rows[i];if(row===DataTable.NULL){for(let j=0,jEnd=columnNames.length;j<jEnd;++j){if(insert){columns[columnNames[j]].splice(i2,0,null)}else{columns[columnNames[j]][i2]=null}}}else if(row instanceof Array){for(let j=0,jEnd=columnNames.length;j<jEnd;++j){columns[columnNames[j]][i2]=row[j]}}else{super.setRow(row,i2,void 0,{silent:true})}}const indexRowCount=insert?rowCount+rows.length:rowIndex+rowCount;if(indexRowCount>table.rowCount){table.rowCount=indexRowCount;for(let i=0,iEnd=columnNames.length;i<iEnd;++i){columns[columnNames[i]].length=indexRowCount}}if(modifier){modifier.modifyRows(table,rows,rowIndex)}table.emit({type:"afterSetRows",detail:eventDetail,rowCount:rowCount,rowIndex:rowIndex,rows:rows})}}DataTable.NULL={};DataTable.version="1.0.0";const Data_DataTable=DataTable;const{addEvent:DataConnector_addEvent,fireEvent:DataConnector_fireEvent,merge:DataConnector_merge,pick}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class DataConnector{constructor(options={}){this.table=new Data_DataTable(options.dataTable);this.metadata=options.metadata||{columns:{}}}get polling(){return!!this.polling}describeColumn(name,columnMeta){const connector=this,columns=connector.metadata.columns;columns[name]=DataConnector_merge(columns[name]||{},columnMeta)}describeColumns(columns){const connector=this,columnNames=Object.keys(columns);let columnName;while(typeof(columnName=columnNames.pop())==="string"){connector.describeColumn(columnName,columns[columnName])}}emit(e){DataConnector_fireEvent(this,e.type,e)}getColumnOrder(usePresentationState){const connector=this,columns=connector.metadata.columns,names=Object.keys(columns||{});if(names.length){return names.sort((a,b)=>pick(columns[a].index,0)-pick(columns[b].index,0))}}getSortedColumns(usePresentationOrder){return this.table.getColumns(this.getColumnOrder(usePresentationOrder))}load(){DataConnector_fireEvent(this,"afterLoad",{table:this.table});return Promise.resolve(this)}on(type,callback){return DataConnector_addEvent(this,type,callback)}save(){DataConnector_fireEvent(this,"saveError",{table:this.table});return Promise.reject(new Error("Not implemented"))}setColumnOrder(columnNames){const connector=this;for(let i=0,iEnd=columnNames.length;i<iEnd;++i){connector.describeColumn(columnNames[i],{index:i})}}setModifierOptions(modifierOptions){const ModifierClass=modifierOptions&&Modifiers_DataModifier.types[modifierOptions.type];return this.table.setModifier(ModifierClass?new ModifierClass(modifierOptions):void 0).then(()=>this)}startPolling(refreshTime=1e3){const connector=this;window.clearTimeout(connector._polling);connector._polling=window.setTimeout(()=>connector.load()["catch"](error=>connector.emit({type:"loadError",error:error,table:connector.table})).then(()=>{if(connector._polling){connector.startPolling(refreshTime)}}),refreshTime)}stopPolling(){const connector=this;window.clearTimeout(connector._polling);delete connector._polling}whatIs(name){return this.metadata.columns[name]}}(function(DataConnector){DataConnector.types={};function registerType(key,DataConnectorClass){return!!key&&!DataConnector.types[key]&&!!(DataConnector.types[key]=DataConnectorClass)}DataConnector.registerType=registerType})(DataConnector||(DataConnector={}));const Connectors_DataConnector=DataConnector;const{addEvent:DataConverter_addEvent,fireEvent:DataConverter_fireEvent,isNumber,merge:DataConverter_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class DataConverter{constructor(options){this.dateFormats={"YYYY/mm/dd":{regex:/^(\d{4})([\-\.\/])(\d{1,2})\2(\d{1,2})$/,parser:function(match){return match?Date.UTC(+match[1],match[3]-1,+match[4]):NaN}},"dd/mm/YYYY":{regex:/^(\d{1,2})([\-\.\/])(\d{1,2})\2(\d{4})$/,parser:function(match){return match?Date.UTC(+match[4],match[3]-1,+match[1]):NaN},alternative:"mm/dd/YYYY"},"mm/dd/YYYY":{regex:/^(\d{1,2})([\-\.\/])(\d{1,2})\2(\d{4})$/,parser:function(match){return match?Date.UTC(+match[4],match[1]-1,+match[3]):NaN}},"dd/mm/YY":{regex:/^(\d{1,2})([\-\.\/])(\d{1,2})\2(\d{2})$/,parser:function(match){const d=new Date;if(!match){return NaN}let year=+match[4];if(year>d.getFullYear()-2e3){year+=1900}else{year+=2e3}return Date.UTC(year,match[3]-1,+match[1])},alternative:"mm/dd/YY"},"mm/dd/YY":{regex:/^(\d{1,2})([\-\.\/])(\d{1,2})\2(\d{2})$/,parser:function(match){return match?Date.UTC(+match[4]+2e3,match[1]-1,+match[3]):NaN}}};const mergedOptions=DataConverter_merge(DataConverter.defaultOptions,options);let regExpPoint=mergedOptions.decimalPoint;if(regExpPoint==="."||regExpPoint===","){regExpPoint=regExpPoint==="."?"\\.":",";this.decimalRegExp=new RegExp("^(-?[0-9]+)"+regExpPoint+"([0-9]+)$")}this.options=mergedOptions}asBoolean(value){if(typeof value==="boolean"){return value}if(typeof value==="string"){return value!==""&&value!=="0"&&value!=="false"}return!!this.asNumber(value)}asDate(value){let timestamp;if(typeof value==="string"){timestamp=this.parseDate(value)}else if(typeof value==="number"){timestamp=value}else if(value instanceof Date){return value}else{timestamp=this.parseDate(this.asString(value))}return new Date(timestamp)}asGuessedType(value){const converter=this,typeMap={number:converter.asNumber,Date:converter.asDate,string:converter.asString};return typeMap[converter.guessType(value)].call(converter,value)}asNumber(value){if(typeof value==="number"){return value}if(typeof value==="boolean"){return value?1:0}if(typeof value==="string"){const decimalRegex=this.decimalRegExp;if(value.indexOf(" ")>-1){value=value.replace(/\s+/g,"")}if(decimalRegex){if(!decimalRegex.test(value)){return NaN}value=value.replace(decimalRegex,"$1.$2")}return parseFloat(value)}if(value instanceof Date){return value.getDate()}if(value){return value.getRowCount()}return NaN}asString(value){return""+value}deduceDateFormat(data,limit,save){const parser=this,stable=[],max=[];let format="YYYY/mm/dd",thing,guessedFormat=[],i=0,madeDeduction=false,elem,j;if(!limit||limit>data.length){limit=data.length}for(;i<limit;i++){if(typeof data[i]!=="undefined"&&data[i]&&data[i].length){thing=data[i].trim().replace(/[\-\.\/]/g," ").split(" ");guessedFormat=["","",""];for(j=0;j<thing.length;j++){if(j<guessedFormat.length){elem=parseInt(thing[j],10);if(elem){max[j]=!max[j]||max[j]<elem?elem:max[j];if(typeof stable[j]!=="undefined"){if(stable[j]!==elem){stable[j]=false}}else{stable[j]=elem}if(elem>31){if(elem<100){guessedFormat[j]="YY"}else{guessedFormat[j]="YYYY"}}else if(elem>12&&elem<=31){guessedFormat[j]="dd";madeDeduction=true}else if(!guessedFormat[j].length){guessedFormat[j]="mm"}}}}}}if(madeDeduction){for(j=0;j<stable.length;j++){if(stable[j]!==false){if(max[j]>12&&guessedFormat[j]!=="YY"&&guessedFormat[j]!=="YYYY"){guessedFormat[j]="YY"}}else if(max[j]>12&&guessedFormat[j]==="mm"){guessedFormat[j]="dd"}}if(guessedFormat.length===3&&guessedFormat[1]==="dd"&&guessedFormat[2]==="dd"){guessedFormat[2]="YY"}format=guessedFormat.join("/")}if(save){parser.options.dateFormat=format}return format}emit(e){DataConverter_fireEvent(this,e.type,e)}export(connector,options){this.emit({type:"exportError",columns:[],headers:[]});throw new Error("Not implemented")}getTable(){throw new Error("Not implemented")}guessType(value){const converter=this;let result="string";if(typeof value==="string"){const trimedValue=converter.trim(`${value}`),decimalRegExp=converter.decimalRegExp;let innerTrimedValue=converter.trim(trimedValue,true);if(decimalRegExp){innerTrimedValue=decimalRegExp.test(innerTrimedValue)?innerTrimedValue.replace(decimalRegExp,"$1.$2"):""}const floatValue=parseFloat(innerTrimedValue);if(+innerTrimedValue===floatValue){value=floatValue}else{const dateValue=converter.parseDate(value);result=isNumber(dateValue)?"Date":"string"}}if(typeof value==="number"){result=value>365*24*3600*1e3?"Date":"number"}return result}on(type,callback){return DataConverter_addEvent(this,type,callback)}parse(options){this.emit({type:"parseError",columns:[],headers:[]});throw new Error("Not implemented")}parseDate(value,dateFormatProp){const converter=this,options=converter.options;let dateFormat=dateFormatProp||options.dateFormat,result=NaN,key,format,match;if(options.parseDate){result=options.parseDate(value)}else{if(!dateFormat){for(key in converter.dateFormats){format=converter.dateFormats[key];match=value.match(format.regex);if(match){dateFormat=key;result=format.parser(match);break}}}else{format=converter.dateFormats[dateFormat];if(!format){format=converter.dateFormats["YYYY/mm/dd"]}match=value.match(format.regex);if(match){result=format.parser(match)}}if(!match){match=Date.parse(value);if(typeof match==="object"&&match!==null&&match.getTime){result=match.getTime()-match.getTimezoneOffset()*6e4}else if(isNumber(match)){result=match-new Date(match).getTimezoneOffset()*6e4;if(value.indexOf("2001")===-1&&new Date(result).getFullYear()===2001){result=NaN}}}}return result}trim(str,inside){if(typeof str==="string"){str=str.replace(/^\s+|\s+$/g,"");if(inside&&/^[\d\s]+$/.test(str)){str=str.replace(/\s/g,"")}}return str}}DataConverter.defaultOptions={dateFormat:"",alternativeFormat:"",startColumn:0,endColumn:Number.MAX_VALUE,startRow:0,endRow:Number.MAX_VALUE,firstRowAsNames:true,switchRowsAndColumns:false};(function(DataConverter){function getTableFromColumns(columns=[],headers=[]){const table=new Data_DataTable;for(let i=0,iEnd=Math.max(headers.length,columns.length);i<iEnd;++i){table.setColumn(headers[i]||`${i}`,columns[i])}return table}DataConverter.getTableFromColumns=getTableFromColumns})(DataConverter||(DataConverter={}));const Converters_DataConverter=DataConverter;class DataCursor{constructor(stateMap={}){this.emittingRegister=[];this.listenerMap={};this.stateMap=stateMap}addListener(tableId,state,listener){const listenerMap=this.listenerMap[tableId]=this.listenerMap[tableId]||{};const listeners=listenerMap[state]=listenerMap[state]||[];listeners.push(listener);return this}buildEmittingTag(e){return(e.cursor.type==="position"?[e.table.id,e.cursor.column,e.cursor.row,e.cursor.state,e.cursor.type]:[e.table.id,e.cursor.columns,e.cursor.firstRow,e.cursor.lastRow,e.cursor.state,e.cursor.type]).join("\0")}emitCursor(table,cursor,event,lasting){const tableId=table.id,state=cursor.state,listeners=this.listenerMap[tableId]&&this.listenerMap[tableId][state];if(listeners){const stateMap=this.stateMap[tableId]=this.stateMap[tableId]??{};const cursors=stateMap[cursor.state]||[];if(lasting){if(!cursors.length){stateMap[cursor.state]=cursors}if(DataCursor.getIndex(cursor,cursors)===-1){cursors.push(cursor)}}const e={cursor:cursor,cursors:cursors,table:table};if(event){e.event=event}const emittingRegister=this.emittingRegister,emittingTag=this.buildEmittingTag(e);if(emittingRegister.indexOf(emittingTag)>=0){return this}try{this.emittingRegister.push(emittingTag);for(let i=0,iEnd=listeners.length;i<iEnd;++i){listeners[i].call(this,e)}}finally{const index=this.emittingRegister.indexOf(emittingTag);if(index>=0){this.emittingRegister.splice(index,1)}}}return this}remitCursor(tableId,cursor){const cursors=this.stateMap[tableId]&&this.stateMap[tableId][cursor.state];if(cursors){const index=DataCursor.getIndex(cursor,cursors);if(index>=0){cursors.splice(index,1)}}return this}removeListener(tableId,state,listener){const listeners=this.listenerMap[tableId]&&this.listenerMap[tableId][state];if(listeners){const index=listeners.indexOf(listener);if(index>=0){listeners.splice(index,1)}}return this}}DataCursor.version="1.0.0";(function(DataCursor){function getIndex(needle,cursors){if(needle.type==="position"){for(let cursor,i=0,iEnd=cursors.length;i<iEnd;++i){cursor=cursors[i];if(cursor.type==="position"&&cursor.state===needle.state&&cursor.column===needle.column&&cursor.row===needle.row){return i}}}else{const columnNeedle=JSON.stringify(needle.columns);for(let cursor,i=0,iEnd=cursors.length;i<iEnd;++i){cursor=cursors[i];if(cursor.type==="range"&&cursor.state===needle.state&&cursor.firstRow===needle.firstRow&&cursor.lastRow===needle.lastRow&&JSON.stringify(cursor.columns)===columnNeedle){return i}}}return-1}DataCursor.getIndex=getIndex;function isEqual(cursorA,cursorB){if(cursorA.type==="position"&&cursorB.type==="position"){return cursorA.column===cursorB.column&&cursorA.row===cursorB.row&&cursorA.state===cursorB.state}if(cursorA.type==="range"&&cursorB.type==="range"){return cursorA.firstRow===cursorB.firstRow&&cursorA.lastRow===cursorB.lastRow&&JSON.stringify(cursorA.columns)===JSON.stringify(cursorB.columns)}return false}DataCursor.isEqual=isEqual;function isInRange(needle,range){if(range.type==="position"){range=toRange(range)}if(needle.type==="position"){needle=toRange(needle,range)}const needleColumns=needle.columns;const rangeColumns=range.columns;return needle.firstRow>=range.firstRow&&needle.lastRow<=range.lastRow&&(!needleColumns||!rangeColumns||needleColumns.every(column=>rangeColumns.indexOf(column)>=0))}DataCursor.isInRange=isInRange;function toPositions(cursor){if(cursor.type==="position"){return[cursor]}const columns=cursor.columns||[];const positions=[];const state=cursor.state;for(let row=cursor.firstRow,rowEnd=cursor.lastRow;row<rowEnd;++row){if(!columns.length){positions.push({type:"position",row:row,state:state});continue}for(let column=0,columnEnd=columns.length;column<columnEnd;++column){positions.push({type:"position",column:columns[column],row:row,state:state})}}return positions}DataCursor.toPositions=toPositions;function toRange(cursor,defaultRange){if(cursor.type==="range"){return cursor}const range={type:"range",firstRow:cursor.row??(defaultRange&&defaultRange.firstRow)??0,lastRow:cursor.row??(defaultRange&&defaultRange.lastRow)??Number.MAX_VALUE,state:cursor.state};if(typeof cursor.column!=="undefined"){range.columns=[cursor.column]}return range}DataCursor.toRange=toRange})(DataCursor||(DataCursor={}));const Data_DataCursor=DataCursor;const DataPoolDefaults={connectors:[]};const Data_DataPoolDefaults=DataPoolDefaults;class DataPool{constructor(options=Data_DataPoolDefaults){options.connectors=options.connectors||[];this.connectors={};this.options=options;this.waiting={}}emit(e){highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default().fireEvent(this,e.type,e)}getConnector(connectorId){const connector=this.connectors[connectorId];if(connector){return Promise.resolve(connector)}let waitingList=this.waiting[connectorId];if(!waitingList){waitingList=this.waiting[connectorId]=[];const connectorOptions=this.getConnectorOptions(connectorId);if(!connectorOptions){throw new Error(`Connector '${connectorId}' not found.`)}this.loadConnector(connectorOptions).then(connector=>{delete this.waiting[connectorId];for(let i=0,iEnd=waitingList.length;i<iEnd;++i){waitingList[i][0](connector)}})["catch"](error=>{delete this.waiting[connectorId];for(let i=0,iEnd=waitingList.length;i<iEnd;++i){waitingList[i][1](error)}})}return new Promise((resolve,reject)=>{waitingList.push([resolve,reject])})}getConnectorIds(){const connectors=this.options.connectors,connectorIds=[];for(let i=0,iEnd=connectors.length;i<iEnd;++i){connectorIds.push(connectors[i].id)}return connectorIds}getConnectorOptions(connectorId){const connectors=this.options.connectors;for(let i=0,iEnd=connectors.length;i<iEnd;++i){if(connectors[i].id===connectorId){return connectors[i]}}}getConnectorTable(connectorId){return this.getConnector(connectorId).then(connector=>connector.table)}isNewConnector(connectorId){return!this.connectors[connectorId]}loadConnector(options){return new Promise((resolve,reject)=>{this.emit({type:"load",options:options});const ConnectorClass=Connectors_DataConnector.types[options.type];if(!ConnectorClass){throw new Error(`Connector type not found. (${options.type})`)}const connector=new ConnectorClass(options.options);connector.load().then(connector=>{this.connectors[options.id]=connector;this.emit({type:"afterLoad",options:options});resolve(connector)})["catch"](reject)})}on(type,callback){return highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default().addEvent(this,type,callback)}setConnectorOptions(options){const connectors=this.options.connectors,instances=this.connectors;this.emit({type:"setConnectorOptions",options:options});for(let i=0,iEnd=connectors.length;i<iEnd;++i){if(connectors[i].id===options.id){connectors.splice(i,1);break}}if(instances[options.id]){instances[options.id].stopPolling();delete instances[options.id]}connectors.push(options);this.emit({type:"afterSetConnectorOptions",options:options})}}DataPool.version="1.0.0";const Data_DataPool=DataPool;const booleanRegExp=/^(?:FALSE|TRUE)/;const decimal1RegExp=/^[+\-]?\d+(?:\.\d+)?(?:e[+\-]\d+)?/;const decimal2RegExp=/^[+\-]?\d+(?:,\d+)?(?:e[+\-]\d+)?/;const functionRegExp=/^([A-Z][A-Z\d\.]*)\(/;const operatorRegExp=/^(?:[+\-*\/^<=>]|<=|=>)/;const rangeA1RegExp=/^(\$?[A-Z]+)(\$?\d+)\:(\$?[A-Z]+)(\$?\d+)/;const rangeR1C1RegExp=/^R(\d*|\[\d+\])C(\d*|\[\d+\])\:R(\d*|\[\d+\])C(\d*|\[\d+\])/;const referenceA1RegExp=/^(\$?[A-Z]+)(\$?\d+)(?![\:C])/;const referenceR1C1RegExp=/^R(\d*|\[\d+\])C(\d*|\[\d+\])(?!\:)/;function extractParantheses(text){let parantheseLevel=0;for(let i=0,iEnd=text.length,char,parantheseStart=1;i<iEnd;++i){char=text[i];if(char==="("){if(!parantheseLevel){parantheseStart=i+1}++parantheseLevel;continue}if(char===")"){--parantheseLevel;if(!parantheseLevel){return text.substring(parantheseStart,i)}}}if(parantheseLevel>0){const error=new Error("Incomplete parantheses.");error.name="FormulaParseError";throw error}return""}function extractString(text){let start=-1;for(let i=0,iEnd=text.length,char,escaping=false;i<iEnd;++i){char=text[i];if(char==="\\"){escaping=!escaping;continue}if(escaping){escaping=false;continue}if(char==='"'){if(start<0){start=i}else{return text.substring(start+1,i)}}}const error=new Error("Incomplete string.");error.name="FormulaParseError";throw error}function parseArgument(text,alternativeSeparators){let match;match=text.match(rangeR1C1RegExp);if(match){const beginColumnRelative=match[2]===""||match[2][0]==="[";const beginRowRelative=match[1]===""||match[1][0]==="[";const endColumnRelative=match[4]===""||match[4][0]==="[";const endRowRelative=match[3]===""||match[3][0]==="[";const range={type:"range",beginColumn:beginColumnRelative?parseInt(match[2].substring(1,-1)||"0",10):parseInt(match[2],10)-1,beginRow:beginRowRelative?parseInt(match[1].substring(1,-1)||"0",10):parseInt(match[1],10)-1,endColumn:endColumnRelative?parseInt(match[4].substring(1,-1)||"0",10):parseInt(match[4],10)-1,endRow:endRowRelative?parseInt(match[3].substring(1,-1)||"0",10):parseInt(match[3],10)-1};if(beginColumnRelative){range.beginColumnRelative=true}if(beginRowRelative){range.beginRowRelative=true}if(endColumnRelative){range.endColumnRelative=true}if(endRowRelative){range.endRowRelative=true}return range}match=text.match(rangeA1RegExp);if(match){const beginColumnRelative=match[1][0]!=="$";const beginRowRelative=match[2][0]!=="$";const endColumnRelative=match[3][0]!=="$";const endRowRelative=match[4][0]!=="$";const range={type:"range",beginColumn:parseReferenceColumn(beginColumnRelative?match[1]:match[1].substring(1))-1,beginRow:parseInt(beginRowRelative?match[2]:match[2].substring(1),10)-1,endColumn:parseReferenceColumn(endColumnRelative?match[3]:match[3].substring(1))-1,endRow:parseInt(endRowRelative?match[4]:match[4].substring(1),10)-1};if(beginColumnRelative){range.beginColumnRelative=true}if(beginRowRelative){range.beginRowRelative=true}if(endColumnRelative){range.endColumnRelative=true}if(endRowRelative){range.endRowRelative=true}return range}const formula=parseFormula(text,alternativeSeparators);return formula.length===1&&typeof formula[0]!=="string"?formula[0]:formula}function parseArguments(text,alternativeSeparators){const args=[],argumentsSeparator=alternativeSeparators?";":",";let parantheseLevel=0,term="";for(let i=0,iEnd=text.length,char;i<iEnd;++i){char=text[i];if(char===argumentsSeparator&&!parantheseLevel&&term){args.push(parseArgument(term,alternativeSeparators));term=""}else if(char==='"'&&!parantheseLevel&&!term){const string=extractString(text.substring(i));args.push(string);i+=string.length+1}else if(char!==" "){term+=char;if(char==="("){++parantheseLevel}else if(char===")"){--parantheseLevel}}}if(!parantheseLevel&&term){args.push(parseArgument(term,alternativeSeparators))}return args}function parseFormula(text,alternativeSeparators){const decimalRegExp=alternativeSeparators?decimal2RegExp:decimal1RegExp,formula=[];let match,next=(text[0]==="="?text.substring(1):text).trim();while(next){match=next.match(referenceR1C1RegExp);if(match){const columnRelative=match[2]===""||match[2][0]==="[";const rowRelative=match[1]===""||match[1][0]==="[";const reference={type:"reference",column:columnRelative?parseInt(match[2].substring(1,-1)||"0",10):parseInt(match[2],10)-1,row:rowRelative?parseInt(match[1].substring(1,-1)||"0",10):parseInt(match[1],10)-1};if(columnRelative){reference.columnRelative=true}if(rowRelative){reference.rowRelative=true}formula.push(reference);next=next.substring(match[0].length).trim();continue}match=next.match(referenceA1RegExp);if(match){const columnRelative=match[1][0]!=="$";const rowRelative=match[2][0]!=="$";const reference={type:"reference",column:parseReferenceColumn(columnRelative?match[1]:match[1].substring(1))-1,row:parseInt(rowRelative?match[2]:match[2].substring(1),10)-1};if(columnRelative){reference.columnRelative=true}if(rowRelative){reference.rowRelative=true}formula.push(reference);next=next.substring(match[0].length).trim();continue}match=next.match(operatorRegExp);if(match){formula.push(match[0]);next=next.substring(match[0].length).trim();continue}match=next.match(booleanRegExp);if(match){formula.push(match[0]==="TRUE");next=next.substring(match[0].length).trim();continue}match=next.match(decimalRegExp);if(match){formula.push(parseFloat(match[0]));next=next.substring(match[0].length).trim();continue}if(next[0]==='"'){const string=extractString(next);formula.push(string.substring(1,-1));next=next.substring(string.length+2).trim();continue}match=next.match(functionRegExp);if(match){next=next.substring(match[1].length).trim();const parantheses=extractParantheses(next);formula.push({type:"function",name:match[1],args:parseArguments(parantheses,alternativeSeparators)});next=next.substring(parantheses.length+2).trim();continue}if(next[0]==="("){const paranteses=extractParantheses(next);if(paranteses){formula.push(parseFormula(paranteses,alternativeSeparators));next=next.substring(paranteses.length+2).trim();continue}}const position=text.length-next.length,error=new Error("Unexpected character `"+text.substring(position,position+1)+"` at position "+(position+1)+". (`..."+text.substring(position-5,position+6)+"...`)");error.name="FormulaParseError";throw error}return formula}function parseReferenceColumn(text){let column=0;for(let i=0,iEnd=text.length,code,factor=text.length-1;i<iEnd;++i){code=text.charCodeAt(i);if(code>=65&&code<=90){column+=(code-64)*Math.pow(26,factor)}--factor}return column}const FormulaParser={parseFormula:parseFormula};const Formula_FormulaParser=FormulaParser;const operators=["+","-","*","/","^","=","<","<=",">",">="];function isFormula(item){return item instanceof Array}function isFunction(item){return typeof item==="object"&&!(item instanceof Array)&&item.type==="function"}function isOperator(item){return typeof item==="string"&&operators.indexOf(item)>=0}function isRange(item){return typeof item==="object"&&!(item instanceof Array)&&item.type==="range"}function isReference(item){return typeof item==="object"&&!(item instanceof Array)&&item.type==="reference"}function isValue(item){return typeof item==="boolean"||typeof item==="number"||typeof item==="string"}const MathFormula={isFormula:isFormula,isFunction:isFunction,isOperator:isOperator,isRange:isRange,isReference:isReference,isValue:isValue};const FormulaTypes=MathFormula;const{isFormula:FormulaProcessor_isFormula,isFunction:FormulaProcessor_isFunction,isOperator:FormulaProcessor_isOperator,isRange:FormulaProcessor_isRange,isReference:FormulaProcessor_isReference,isValue:FormulaProcessor_isValue}=FormulaTypes;const asLogicalStringRegExp=/ */;const MAX_FALSE=Number.MAX_VALUE/1.000000000001;const MAX_STRING=Number.MAX_VALUE/1.000000000002;const MAX_TRUE=Number.MAX_VALUE;const operatorPriority={"^":3,"*":2,"/":2,"+":1,"-":1,"=":0,"<":0,"<=":0,">":0,">=":0};const processorFunctions={};const processorFunctionNameRegExp=/^[A-Z][A-Z\.]*$/;function asLogicalNumber(value){switch(typeof value){case"boolean":return value?MAX_TRUE:MAX_FALSE;case"string":return MAX_STRING;case"number":return value;default:return NaN}}function asLogicalString(value){if(typeof value==="string"){return value.toLowerCase().replace(asLogicalStringRegExp,"\0")}return value}function asNumber(value){switch(typeof value){case"boolean":return value?1:0;case"string":return parseFloat(value.replace(",","."));case"number":return value;default:return NaN}}function basicOperation(operator,x,y){switch(operator){case"=":return asLogicalString(x)===asLogicalString(y);case"<":if(typeof x===typeof y){return asLogicalString(x)<asLogicalString(y)}return asLogicalNumber(x)<asLogicalNumber(y);case"<=":if(typeof x===typeof y){return asLogicalString(x)<=asLogicalString(y)}return asLogicalNumber(x)<=asLogicalNumber(y);case">":if(typeof x===typeof y){return asLogicalString(x)>asLogicalString(y)}return asLogicalNumber(x)>asLogicalNumber(y);case">=":if(typeof x===typeof y){return asLogicalString(x)>=asLogicalString(y)}return asLogicalNumber(x)>=asLogicalNumber(y)}x=asNumber(x);y=asNumber(y);let result;switch(operator){case"+":result=x+y;break;case"-":result=x-y;break;case"*":result=x*y;break;case"/":result=x/y;break;case"^":result=Math.pow(x,y);break;default:return NaN}return result%1?Math.round(result*1e9)/1e9:result}function getArgumentValue(arg,table){if(FormulaProcessor_isValue(arg)){return arg}if(FormulaProcessor_isRange(arg)){return table&&getRangeValues(arg,table)||[]}if(FormulaProcessor_isFunction(arg)){return processFunction(arg,table)}return processFormula(FormulaProcessor_isFormula(arg)?arg:[arg],table)}function getArgumentsValues(args,table){const values=[];for(let i=0,iEnd=args.length;i<iEnd;++i){values.push(getArgumentValue(args[i],table))}return values}function getRangeValues(range,table){const columnNames=table.getColumnNames().slice(range.beginColumn,range.endColumn+1),values=[];for(let i=0,iEnd=columnNames.length,cell;i<iEnd;++i){const cells=table.getColumn(columnNames[i],true)||[];for(let j=range.beginRow,jEnd=range.endRow+1;j<jEnd;++j){cell=cells[j];if(typeof cell==="string"&&cell[0]==="="&&table!==table.modified){cell=table.modified.getCell(columnNames[i],j)}values.push(FormulaProcessor_isValue(cell)?cell:NaN)}}return values}function getReferenceValue(reference,table){const columnName=table.getColumnNames()[reference.column];if(columnName){const cell=table.getCell(columnName,reference.row);if(typeof cell==="string"&&cell[0]==="="&&table!==table.modified){const result=table.modified.getCell(columnName,reference.row);return FormulaProcessor_isValue(result)?result:NaN}return FormulaProcessor_isValue(cell)?cell:NaN}return NaN}function processFormula(formula,table){let x;for(let i=0,iEnd=formula.length,item,operator,result,y;i<iEnd;++i){item=formula[i];if(FormulaProcessor_isOperator(item)){operator=item;continue}if(FormulaProcessor_isValue(item)){y=item}else if(FormulaProcessor_isFormula(item)){y=processFormula(formula,table)}else if(FormulaProcessor_isFunction(item)){result=processFunction(item,table);y=FormulaProcessor_isValue(result)?result:NaN}else if(FormulaProcessor_isReference(item)){y=table&&getReferenceValue(item,table)}if(typeof y!=="undefined"){if(typeof x==="undefined"){if(operator){x=basicOperation(operator,0,y)}else{x=y}}else if(!operator){return NaN}else{const operator2=formula[i+1];if(FormulaProcessor_isOperator(operator2)&&operatorPriority[operator2]>operatorPriority[operator]){y=basicOperation(operator2,y,processFormula(formula.slice(i+2)));i=iEnd}x=basicOperation(operator,x,y)}operator=void 0;y=void 0}}return FormulaProcessor_isValue(x)?x:NaN}function processFunction(formulaFunction,table,reference){const processor=processorFunctions[formulaFunction.name];if(processor){try{return processor(formulaFunction.args,table)}catch{return NaN}}const error=new Error(`Function "${formulaFunction.name}" not found.`);error.name="FormulaProcessError";throw error}function registerProcessorFunction(name,processorFunction){return processorFunctionNameRegExp.test(name)&&!processorFunctions[name]&&!!(processorFunctions[name]=processorFunction)}function translateReferences(formula,columnDelta=0,rowDelta=0){for(let i=0,iEnd=formula.length,item;i<iEnd;++i){item=formula[i];if(item instanceof Array){translateReferences(item,columnDelta,rowDelta)}else if(FormulaProcessor_isFunction(item)){translateReferences(item.args,columnDelta,rowDelta)}else if(FormulaProcessor_isRange(item)){if(item.beginColumnRelative){item.beginColumn+=columnDelta}if(item.beginRowRelative){item.beginRow+=rowDelta}if(item.endColumnRelative){item.endColumn+=columnDelta}if(item.endRowRelative){item.endRow+=rowDelta}}else if(FormulaProcessor_isReference(item)){if(item.columnRelative){item.column+=columnDelta}if(item.rowRelative){item.row+=rowDelta}}}return formula}const FormulaProcessor={asNumber:asNumber,getArgumentValue:getArgumentValue,getArgumentsValues:getArgumentsValues,getRangeValues:getRangeValues,getReferenceValue:getReferenceValue,processFormula:processFormula,processorFunctions:processorFunctions,registerProcessorFunction:registerProcessorFunction,translateReferences:translateReferences};const Formula_FormulaProcessor=FormulaProcessor;const{getArgumentValue:ABS_getArgumentValue}=Formula_FormulaProcessor;function ABS(args,table){const value=ABS_getArgumentValue(args[0],table);switch(typeof value){case"number":return Math.abs(value);case"object":{const values=[];for(let i=0,iEnd=value.length,value2;i<iEnd;++i){value2=value[i];if(typeof value2!=="number"){return NaN}values.push(Math.abs(value2))}return values}default:return NaN}}Formula_FormulaProcessor.registerProcessorFunction("ABS",ABS);const Functions_ABS=null&&ABS;const{getArgumentValue:AND_getArgumentValue}=Formula_FormulaProcessor;function AND(args,table){for(let i=0,iEnd=args.length,value;i<iEnd;++i){value=AND_getArgumentValue(args[i],table);if(!value||typeof value==="object"&&!AND(value,table)){return false}}return true}Formula_FormulaProcessor.registerProcessorFunction("AND",AND);const Functions_AND=null&&AND;const{getArgumentsValues:AVERAGE_getArgumentsValues}=Formula_FormulaProcessor;function AVERAGE(args,table){const values=AVERAGE_getArgumentsValues(args,table);let count=0,result=0;for(let i=0,iEnd=values.length,value;i<iEnd;++i){value=values[i];switch(typeof value){case"number":if(!isNaN(value)){++count;result+=value}break;case"object":for(let j=0,jEnd=value.length,value2;j<jEnd;++j){value2=value[j];if(typeof value2==="number"&&!isNaN(value2)){++count;result+=value2}}break}}return count?result/count:0}Formula_FormulaProcessor.registerProcessorFunction("AVERAGE",AVERAGE);const Functions_AVERAGE=null&&AVERAGE;const{getArgumentValue:AVERAGEA_getArgumentValue}=Formula_FormulaProcessor;function AVERAGEA(args,table){let count=0,result=0;for(let i=0,iEnd=args.length,value;i<iEnd;++i){value=AVERAGEA_getArgumentValue(args[i],table);switch(typeof value){case"boolean":++count;result+=value?1:0;continue;case"number":if(!isNaN(value)){++count;result+=value}continue;case"string":++count;continue;default:for(let j=0,jEnd=value.length,value2;j<jEnd;++j){value2=value[j];switch(typeof value2){case"boolean":++count;result+=value2?1:0;continue;case"number":if(!isNaN(value2)){++count;result+=value2}continue;case"string":++count;continue}}continue}}return count?result/count:0}Formula_FormulaProcessor.registerProcessorFunction("AVERAGEA",AVERAGEA);const Functions_AVERAGEA=null&&AVERAGEA;function COUNT(args,table){const values=Formula_FormulaProcessor.getArgumentsValues(args,table);let count=0;for(let i=0,iEnd=values.length,value;i<iEnd;++i){value=values[i];switch(typeof value){case"number":if(!isNaN(value)){++count}break;case"object":count+=COUNT(value,table);break}}return count}Formula_FormulaProcessor.registerProcessorFunction("COUNT",COUNT);const Functions_COUNT=null&&COUNT;function COUNTA(args,table){const values=Formula_FormulaProcessor.getArgumentsValues(args,table);let count=0;for(let i=0,iEnd=values.length,value;i<iEnd;++i){value=values[i];switch(typeof value){case"number":if(isNaN(value)){continue}break;case"object":count+=COUNTA(value,table);continue;case"string":if(!value){continue}break}++count}return count}Formula_FormulaProcessor.registerProcessorFunction("COUNTA",COUNTA);const Functions_COUNTA=null&&COUNTA;const{getArgumentValue:IF_getArgumentValue}=Formula_FormulaProcessor;function IF(args,table){return IF_getArgumentValue(args[0],table)?IF_getArgumentValue(args[1],table):IF_getArgumentValue(args[2],table)}Formula_FormulaProcessor.registerProcessorFunction("IF",IF);const Functions_IF=null&&IF;const{getArgumentValue:ISNA_getArgumentValue}=Formula_FormulaProcessor;function ISNA(args,table){const value=ISNA_getArgumentValue(args[0],table);return typeof value!=="number"||isNaN(value)}Formula_FormulaProcessor.registerProcessorFunction("ISNA",ISNA);const Functions_ISNA=null&&ISNA;const{getArgumentsValues:MAX_getArgumentsValues}=Formula_FormulaProcessor;function MAX(args,table){const values=MAX_getArgumentsValues(args,table);let result=Number.NEGATIVE_INFINITY;for(let i=0,iEnd=values.length,value;i<iEnd;++i){value=values[i];switch(typeof value){case"number":if(value>result){result=value}break;case"object":value=MAX(value);if(value>result){result=value}break}}return isFinite(result)?result:0}Formula_FormulaProcessor.registerProcessorFunction("MAX",MAX);const Functions_MAX=null&&MAX;function MEDIAN(args,table){const median=[],values=Formula_FormulaProcessor.getArgumentsValues(args,table);for(let i=0,iEnd=values.length,value;i<iEnd;++i){value=values[i];switch(typeof value){case"number":if(!isNaN(value)){median.push(value)}break;case"object":for(let j=0,jEnd=value.length,value2;j<jEnd;++j){value2=value[j];if(typeof value2==="number"&&!isNaN(value2)){median.push(value2)}}break}}const count=median.length;if(!count){return NaN}const half=Math.floor(count/2);return count%2?median[half]:(median[half-1]+median[half])/2}Formula_FormulaProcessor.registerProcessorFunction("MEDIAN",MEDIAN);const Functions_MEDIAN=null&&MEDIAN;const{getArgumentsValues:MIN_getArgumentsValues}=Formula_FormulaProcessor;function MIN(args,table){const values=MIN_getArgumentsValues(args,table);let result=Number.POSITIVE_INFINITY;for(let i=0,iEnd=values.length,value;i<iEnd;++i){value=values[i];switch(typeof value){case"number":if(value<result){result=value}break;case"object":value=MIN(value);if(value<result){result=value}break}}return isFinite(result)?result:0}Formula_FormulaProcessor.registerProcessorFunction("MIN",MIN);const Functions_MIN=null&&MIN;const{getArgumentValue:MOD_getArgumentValue}=Formula_FormulaProcessor;function MOD(args,table){let value1=MOD_getArgumentValue(args[0],table),value2=MOD_getArgumentValue(args[1],table);if(typeof value1==="object"){value1=value1[0]}if(typeof value2==="object"){value2=value2[0]}if(typeof value1!=="number"||typeof value2!=="number"||value2===0){return NaN}return value1%value2}Formula_FormulaProcessor.registerProcessorFunction("MOD",MOD);const Functions_MOD=null&&MOD;function getModeMap(args,table){const modeMap={},values=Formula_FormulaProcessor.getArgumentsValues(args,table);for(let i=0,iEnd=values.length,value;i<iEnd;++i){value=values[i];switch(typeof value){case"number":if(!isNaN(value)){modeMap[value]=(modeMap[value]||0)+1}break;case"object":for(let j=0,jEnd=value.length,value2;j<jEnd;++j){value2=value[j];if(typeof value2==="number"&&!isNaN(value2)){modeMap[value2]=(modeMap[value2]||0)+1}}break}}return modeMap}function MULT(args,table){const modeMap=getModeMap(args,table),keys=Object.keys(modeMap);if(!keys.length){return NaN}let modeKeys=[parseFloat(keys[0])],modeCount=modeMap[keys[0]];for(let i=1,iEnd=keys.length,key,count;i<iEnd;++i){key=keys[i];count=modeMap[key];if(modeCount<count){modeKeys=[parseFloat(key)];modeCount=count}else if(modeCount===count){modeKeys.push(parseFloat(key))}}return modeCount>1?modeKeys:NaN}function SNGL(args,table){const modeMap=getModeMap(args,table),keys=Object.keys(modeMap);if(!keys.length){return NaN}let modeKey=parseFloat(keys[0]),modeCount=modeMap[keys[0]];for(let i=1,iEnd=keys.length,key,keyValue,count;i<iEnd;++i){key=keys[i];count=modeMap[key];if(modeCount<count){modeKey=parseFloat(key);modeCount=count}else if(modeCount===count){keyValue=parseFloat(key);if(modeKey>keyValue){modeKey=keyValue;modeCount=count}}}return modeCount>1?modeKey:NaN}Formula_FormulaProcessor.registerProcessorFunction("MODE",SNGL);Formula_FormulaProcessor.registerProcessorFunction("MODE.MULT",MULT);Formula_FormulaProcessor.registerProcessorFunction("MODE.SNGL",SNGL);const MODE={MULT:MULT,SNGL:SNGL};const Functions_MODE=null&&MODE;const{getArgumentValue:NOT_getArgumentValue}=Formula_FormulaProcessor;function NOT(args,table){let value=NOT_getArgumentValue(args[0],table);if(typeof value==="object"){value=value[0]}switch(typeof value){case"boolean":case"number":return!value}return NaN}Formula_FormulaProcessor.registerProcessorFunction("NOT",NOT);const Functions_NOT=null&&NOT;const{getArgumentValue:OR_getArgumentValue}=Formula_FormulaProcessor;function OR(args,table){for(let i=0,iEnd=args.length,value;i<iEnd;++i){value=OR_getArgumentValue(args[i],table);if(typeof value==="object"){if(OR(value,table)){return true}}else if(value){return true}}return false}Formula_FormulaProcessor.registerProcessorFunction("OR",OR);const Functions_OR=null&&OR;const{getArgumentsValues:PRODUCT_getArgumentsValues}=Formula_FormulaProcessor;function PRODUCT(args,table){const values=PRODUCT_getArgumentsValues(args,table);let result=1,calculated=false;for(let i=0,iEnd=values.length,value;i<iEnd;++i){value=values[i];switch(typeof value){case"number":if(!isNaN(value)){calculated=true;result*=value}break;case"object":calculated=true;result*=PRODUCT(value,table);break}}return calculated?result:0}Formula_FormulaProcessor.registerProcessorFunction("PRODUCT",PRODUCT);const Functions_PRODUCT=null&&PRODUCT;function SUM(args,table){const values=Formula_FormulaProcessor.getArgumentsValues(args,table);let result=0;for(let i=0,iEnd=values.length,value;i<iEnd;++i){value=values[i];switch(typeof value){case"number":if(!isNaN(value)){result+=value}break;case"object":result+=SUM(value,table);break}}return result}Formula_FormulaProcessor.registerProcessorFunction("SUM",SUM);const Functions_SUM=null&&SUM;const{getArgumentValue:XOR_getArgumentValue}=Formula_FormulaProcessor;function XOR(args,table){for(let i=0,iEnd=args.length,lastValue,value;i<iEnd;++i){value=XOR_getArgumentValue(args[i],table);switch(typeof value){case"boolean":case"number":if(typeof lastValue==="undefined"){lastValue=!!value}else if(!!value!==lastValue){return true}break;case"object":for(let j=0,jEnd=value.length,value2;j<jEnd;++j){value2=value[j];switch(typeof value2){case"boolean":case"number":if(typeof lastValue==="undefined"){lastValue=!!value2}else if(!!value2!==lastValue){return true}break}}break}}return false}Formula_FormulaProcessor.registerProcessorFunction("XOR",XOR);const Functions_XOR=null&&XOR;const Formula={...Formula_FormulaParser,...Formula_FormulaProcessor,...FormulaTypes};const Formula_Formula=Formula;const{merge:CSVConverter_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class CSVConverter extends Converters_DataConverter{constructor(options){const mergedOptions=CSVConverter_merge(CSVConverter.defaultOptions,options);super(mergedOptions);this.columns=[];this.headers=[];this.dataTypes=[];this.options=mergedOptions}export(connector,options=this.options){const{useLocalDecimalPoint,lineDelimiter}=options,exportNames=this.options.firstRowAsNames!==false;let{decimalPoint,itemDelimiter}=options;if(!decimalPoint){decimalPoint=itemDelimiter!==","&&useLocalDecimalPoint?1.1.toLocaleString()[1]:"."}if(!itemDelimiter){itemDelimiter=decimalPoint===","?";":","}const columns=connector.getSortedColumns(options.usePresentationOrder),columnNames=Object.keys(columns),csvRows=[],columnsCount=columnNames.length;const rowArray=[];if(exportNames){csvRows.push(columnNames.map(columnName=>`"${columnName}"`).join(itemDelimiter))}for(let columnIndex=0;columnIndex<columnsCount;columnIndex++){const columnName=columnNames[columnIndex],column=columns[columnName],columnLength=column.length;const columnMeta=connector.whatIs(columnName);let columnDataType;if(columnMeta){columnDataType=columnMeta.dataType}for(let rowIndex=0;rowIndex<columnLength;rowIndex++){let cellValue=column[rowIndex];if(!rowArray[rowIndex]){rowArray[rowIndex]=[]}if(columnDataType==="string"){cellValue='"'+cellValue+'"'}else if(typeof cellValue==="number"){cellValue=String(cellValue).replace(".",decimalPoint)}else if(typeof cellValue==="string"){cellValue=`"${cellValue}"`}rowArray[rowIndex][columnIndex]=cellValue;if(columnIndex===columnsCount-1){let i=columnIndex;while(rowArray[rowIndex].length>2){const cellVal=rowArray[rowIndex][i];if(cellVal!==void 0){break}rowArray[rowIndex].pop();i--}csvRows.push(rowArray[rowIndex].join(itemDelimiter))}}}return csvRows.join(lineDelimiter)}parse(options,eventDetail){const converter=this,dataTypes=converter.dataTypes,parserOptions=CSVConverter_merge(this.options,options),{beforeParse,lineDelimiter,firstRowAsNames,itemDelimiter}=parserOptions;let lines,rowIt=0,{csv,startRow,endRow}=parserOptions,column;converter.columns=[];converter.emit({type:"parse",columns:converter.columns,detail:eventDetail,headers:converter.headers});if(csv&&beforeParse){csv=beforeParse(csv)}if(csv){lines=csv.replace(/\r\n|\r/g,"\n").split(lineDelimiter||"\n");if(!startRow||startRow<0){startRow=0}if(!endRow||endRow>=lines.length){endRow=lines.length-1}if(!itemDelimiter){converter.guessedItemDelimiter=converter.guessDelimiter(lines)}if(firstRowAsNames){const headers=lines[0].split(itemDelimiter||converter.guessedItemDelimiter||",");for(let i=0;i<headers.length;i++){headers[i]=headers[i].trim().replace(/^["']|["']$/g,"")}converter.headers=headers;startRow++}let offset=0;for(rowIt=startRow;rowIt<=endRow;rowIt++){if(lines[rowIt][0]==="#"){offset++}else{converter.parseCSVRow(lines[rowIt],rowIt-startRow-offset)}}if(dataTypes.length&&dataTypes[0].length&&dataTypes[0][1]==="date"&&!converter.options.dateFormat){converter.deduceDateFormat(converter.columns[0],null,true)}for(let i=0,iEnd=converter.columns.length;i<iEnd;++i){column=converter.columns[i];for(let j=0,jEnd=column.length;j<jEnd;++j){if(column[j]&&typeof column[j]==="string"){let cellValue=converter.asGuessedType(column[j]);if(cellValue instanceof Date){cellValue=cellValue.getTime()}converter.columns[i][j]=cellValue}}}}converter.emit({type:"afterParse",columns:converter.columns,detail:eventDetail,headers:converter.headers})}parseCSVRow(columnStr,rowNumber){const converter=this,columns=converter.columns||[],dataTypes=converter.dataTypes,{startColumn,endColumn}=converter.options,itemDelimiter=converter.options.itemDelimiter||converter.guessedItemDelimiter;let{decimalPoint}=converter.options;if(!decimalPoint||decimalPoint===itemDelimiter){decimalPoint=converter.guessedDecimalPoint||"."}let i=0,c="",token="",actualColumn=0,column=0;const read=j=>{c=columnStr[j]};const pushType=type=>{if(dataTypes.length<column+1){dataTypes.push([type])}if(dataTypes[column][dataTypes[column].length-1]!==type){dataTypes[column].push(type)}};const push=()=>{if(startColumn>actualColumn||actualColumn>endColumn){++actualColumn;token="";return}if(typeof token==="string"){if(!isNaN(parseFloat(token))&&isFinite(token)){token=parseFloat(token);pushType("number")}else if(!isNaN(Date.parse(token))){token=token.replace(/\//g,"-");pushType("date")}else{pushType("string")}}else{pushType("number")}if(columns.length<column+1){columns.push([])}if(typeof token!=="number"&&converter.guessType(token)!=="number"&&decimalPoint){const initialValue=token;token=token.replace(decimalPoint,".");if(converter.guessType(token)!=="number"){token=initialValue}}columns[column][rowNumber]=token;token="";++column;++actualColumn};if(!columnStr.trim().length){return}if(columnStr.trim()[0]==="#"){return}for(;i<columnStr.length;i++){read(i);if(c==="#"){if(!/^#[A-F\d]{3,3}|[A-F\d]{6,6}/i.test(columnStr.substring(i))){push();return}}if(c==='"'){read(++i);while(i<columnStr.length){if(c==='"'){break}token+=c;read(++i)}}else if(c===itemDelimiter){push()}else{token+=c}}push()}guessDelimiter(lines){let points=0,commas=0,guessed;const potDelimiters={",":0,";":0,"\t":0},linesCount=lines.length;for(let i=0;i<linesCount;i++){let inStr=false,c,cn,cl,token="";if(i>13){break}const columnStr=lines[i];for(let j=0;j<columnStr.length;j++){c=columnStr[j];cn=columnStr[j+1];cl=columnStr[j-1];if(c==="#"){break}if(c==='"'){if(inStr){if(cl!=='"'&&cn!=='"'){while(cn===" "&&j<columnStr.length){cn=columnStr[++j]}if(typeof potDelimiters[cn]!=="undefined"){potDelimiters[cn]++}inStr=false}}else{inStr=true}}else if(typeof potDelimiters[c]!=="undefined"){token=token.trim();if(!isNaN(Date.parse(token))){potDelimiters[c]++}else if(isNaN(Number(token))||!isFinite(Number(token))){potDelimiters[c]++}token=""}else{token+=c}if(c===","){commas++}if(c==="."){points++}}}if(potDelimiters[";"]>potDelimiters[","]){guessed=";"}else if(potDelimiters[","]>potDelimiters[";"]){guessed=","}else{guessed=","}if(points>commas){this.guessedDecimalPoint="."}else{this.guessedDecimalPoint=","}return guessed}getTable(){return Converters_DataConverter.getTableFromColumns(this.columns,this.headers)}}CSVConverter.defaultOptions={...Converters_DataConverter.defaultOptions,lineDelimiter:"\n"};const Converters_CSVConverter=CSVConverter;const{merge:CSVConnector_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class CSVConnector extends Connectors_DataConnector{constructor(options){const mergedOptions=CSVConnector_merge(CSVConnector.defaultOptions,options);super(mergedOptions);this.converter=new Converters_CSVConverter(mergedOptions);this.options=mergedOptions;if(mergedOptions.enablePolling){this.startPolling(Math.max(mergedOptions.dataRefreshRate||0,1)*1e3)}}load(eventDetail){const connector=this,converter=connector.converter,table=connector.table,{csv,csvURL,dataModifier}=connector.options;connector.emit({type:"load",csv:csv,detail:eventDetail,table:table});return Promise.resolve(csvURL?fetch(csvURL).then(response=>response.text()):csv||"").then(csv=>{if(csv){table.deleteColumns();converter.parse({csv:csv});table.setColumns(converter.getTable().getColumns())}return connector.setModifierOptions(dataModifier).then(()=>csv)}).then(csv=>{connector.emit({type:"afterLoad",csv:csv,detail:eventDetail,table:table});return connector})["catch"](error=>{connector.emit({type:"loadError",detail:eventDetail,error:error,table:table});throw error})}}CSVConnector.defaultOptions={csv:"",csvURL:"",enablePolling:false,dataRefreshRate:1,firstRowAsNames:true};Connectors_DataConnector.registerType("CSV",CSVConnector);const Connectors_CSVConnector=null&&CSVConnector;const{error,isArray:JSONConverter_isArray,merge:JSONConverter_merge,objectEach:JSONConverter_objectEach}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class JSONConverter extends Converters_DataConverter{constructor(options){const mergedOptions=JSONConverter_merge(JSONConverter.defaultOptions,options);super(mergedOptions);this.columns=[];this.headers=[];this.options=mergedOptions;this.table=new Data_DataTable}parse(options,eventDetail){const converter=this;options=JSONConverter_merge(converter.options,options);const{beforeParse,orientation,firstRowAsNames,columnNames}=options;let data=options.data;if(!data){return}converter.columns=[];converter.emit({type:"parse",columns:converter.columns,detail:eventDetail,headers:converter.headers});if(beforeParse){data=beforeParse(data)}data=data.slice();if(orientation==="columns"){for(let i=0,iEnd=data.length;i<iEnd;i++){const item=data[i];if(!(item instanceof Array)){return}if(converter.headers instanceof Array){if(firstRowAsNames){converter.headers.push(`${item.shift()}`)}else if(columnNames&&columnNames instanceof Array){converter.headers.push(columnNames[i])}converter.table.setColumn(converter.headers[i]||i.toString(),item)}else{error("JSONConverter: Invalid `columnNames` option.",false)}}}else if(orientation==="rows"){if(firstRowAsNames){converter.headers=data.shift()}else if(columnNames){converter.headers=columnNames}for(let rowIndex=0,iEnd=data.length;rowIndex<iEnd;rowIndex++){let row=data[rowIndex];if(JSONConverter_isArray(row)){for(let columnIndex=0,jEnd=row.length;columnIndex<jEnd;columnIndex++){if(converter.columns.length<columnIndex+1){converter.columns.push([])}converter.columns[columnIndex].push(row[columnIndex]);if(converter.headers instanceof Array){this.table.setColumn(converter.headers[columnIndex]||columnIndex.toString(),converter.columns[columnIndex])}else{error("JSONConverter: Invalid `columnNames` option.",false)}}}else{const columnNames=converter.headers;if(columnNames&&!(columnNames instanceof Array)){const newRow={};JSONConverter_objectEach(columnNames,(arrayWithPath,name)=>{newRow[name]=arrayWithPath.reduce((acc,key)=>acc[key],row)});row=newRow}this.table.setRows([row],rowIndex)}}}converter.emit({type:"afterParse",columns:converter.columns,detail:eventDetail,headers:converter.headers})}getTable(){return this.table}}JSONConverter.defaultOptions={...Converters_DataConverter.defaultOptions,data:[],orientation:"rows"};const Converters_JSONConverter=JSONConverter;const{merge:JSONConnector_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class JSONConnector extends Connectors_DataConnector{constructor(options){const mergedOptions=JSONConnector_merge(JSONConnector.defaultOptions,options);super(mergedOptions);this.converter=new Converters_JSONConverter(mergedOptions);this.options=mergedOptions;if(mergedOptions.enablePolling){this.startPolling(Math.max(mergedOptions.dataRefreshRate||0,1)*1e3)}}load(eventDetail){const connector=this,converter=connector.converter,table=connector.table,{data,dataUrl,dataModifier}=connector.options;connector.emit({type:"load",data:data,detail:eventDetail,table:table});return Promise.resolve(dataUrl?fetch(dataUrl).then(json=>json.json()):data||[]).then(data=>{if(data){table.deleteColumns();converter.parse({data:data});table.setColumns(converter.getTable().getColumns())}return connector.setModifierOptions(dataModifier).then(()=>data)}).then(data=>{connector.emit({type:"afterLoad",data:data,detail:eventDetail,table:table});return connector})["catch"](error=>{connector.emit({type:"loadError",detail:eventDetail,error:error,table:table});throw error})}}JSONConnector.defaultOptions={data:[],enablePolling:false,dataRefreshRate:0,firstRowAsNames:true,orientation:"rows"};Connectors_DataConnector.registerType("JSON",JSONConnector);const Connectors_JSONConnector=null&&JSONConnector;const{merge:GoogleSheetsConverter_merge,uniqueKey:GoogleSheetsConverter_uniqueKey}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class GoogleSheetsConverter extends Converters_DataConverter{constructor(options){const mergedOptions=GoogleSheetsConverter_merge(GoogleSheetsConverter.defaultOptions,options);super(mergedOptions);this.columns=[];this.header=[];this.options=mergedOptions}parse(options,eventDetail){const converter=this,parseOptions=GoogleSheetsConverter_merge(converter.options,options);let columns=(parseOptions.json?.values||[]).map(column=>column.slice());if(columns.length===0){return false}converter.header=[];converter.columns=[];converter.emit({type:"parse",columns:converter.columns,detail:eventDetail,headers:converter.header});const{beforeParse,json}=parseOptions;if(beforeParse&&json){columns=beforeParse(json.values)}let column;converter.columns=columns;for(let i=0,iEnd=columns.length;i<iEnd;i++){column=columns[i];converter.header[i]=parseOptions.firstRowAsNames?`${column.shift()}`:GoogleSheetsConverter_uniqueKey();for(let j=0,jEnd=column.length;j<jEnd;++j){if(column[j]&&typeof column[j]==="string"){let cellValue=converter.asGuessedType(column[j]);if(cellValue instanceof Date){cellValue=cellValue.getTime()}converter.columns[i][j]=cellValue}}}converter.emit({type:"afterParse",columns:converter.columns,detail:eventDetail,headers:converter.header})}getTable(){return Converters_DataConverter.getTableFromColumns(this.columns,this.header)}}GoogleSheetsConverter.defaultOptions={...Converters_DataConverter.defaultOptions};const Converters_GoogleSheetsConverter=GoogleSheetsConverter;const{merge:GoogleSheetsConnector_merge,pick:GoogleSheetsConnector_pick}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();function isGoogleError(json){return typeof json==="object"&&json&&typeof json.error==="object"&&json.error&&typeof json.error.code==="number"&&typeof json.error.message==="string"&&typeof json.error.status==="string"}class GoogleSheetsConnector extends Connectors_DataConnector{constructor(options){const mergedOptions=GoogleSheetsConnector_merge(GoogleSheetsConnector.defaultOptions,options);super(mergedOptions);this.converter=new Converters_GoogleSheetsConverter(mergedOptions);this.options=mergedOptions}load(eventDetail){const connector=this,converter=connector.converter,table=connector.table,{dataModifier,dataRefreshRate,enablePolling,firstRowAsNames,googleAPIKey,googleSpreadsheetKey}=connector.options,url=GoogleSheetsConnector.buildFetchURL(googleAPIKey,googleSpreadsheetKey,connector.options);connector.emit({type:"load",detail:eventDetail,table:table,url:url});if(!URL.canParse(url)){throw new Error("Invalid URL: "+url)}return fetch(url).then(response=>response.json()).then(json=>{if(isGoogleError(json)){throw new Error(json.error.message)}converter.parse({firstRowAsNames:firstRowAsNames,json:json});table.deleteColumns();table.setColumns(converter.getTable().getColumns());return connector.setModifierOptions(dataModifier)}).then(()=>{connector.emit({type:"afterLoad",detail:eventDetail,table:table,url:url});if(enablePolling){setTimeout(()=>connector.load(),Math.max(dataRefreshRate||0,1)*1e3)}return connector})["catch"](error=>{connector.emit({type:"loadError",detail:eventDetail,error:error,table:table});throw error})}}GoogleSheetsConnector.defaultOptions={googleAPIKey:"",googleSpreadsheetKey:"",enablePolling:false,dataRefreshRate:2,firstRowAsNames:true};(function(GoogleSheetsConnector){const alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ";function buildFetchURL(apiKey,sheetKey,options={}){const url=new URL(`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/`);const range=options.onlyColumnNames?"A1:Z1":buildQueryRange(options);url.pathname+=range;const searchParams=url.searchParams;searchParams.set("alt","json");if(!options.onlyColumnNames){searchParams.set("dateTimeRenderOption","FORMATTED_STRING");searchParams.set("majorDimension","COLUMNS");searchParams.set("valueRenderOption","UNFORMATTED_VALUE")}searchParams.set("prettyPrint","false");searchParams.set("key",apiKey);return url.href}GoogleSheetsConnector.buildFetchURL=buildFetchURL;function buildQueryRange(options={}){const{endColumn,endRow,googleSpreadsheetRange,startColumn,startRow}=options;return googleSpreadsheetRange||(alphabet[startColumn||0]||"A")+(Math.max(startRow||0,0)+1)+":"+(alphabet[GoogleSheetsConnector_pick(endColumn,25)]||"Z")+(endRow?Math.max(endRow,0):"Z")}GoogleSheetsConnector.buildQueryRange=buildQueryRange})(GoogleSheetsConnector||(GoogleSheetsConnector={}));Connectors_DataConnector.registerType("GoogleSheets",GoogleSheetsConnector);const Connectors_GoogleSheetsConnector=null&&GoogleSheetsConnector;const{merge:HTMLTableConverter_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();function isRowEqual(row1,row2){let i=row1.length;if(row2.length===i){while(--i){if(row1[i]!==row2[i]){return false}}}else{return false}return true}class HTMLTableConverter extends Converters_DataConverter{constructor(options){const mergedOptions=HTMLTableConverter_merge(HTMLTableConverter.defaultOptions,options);super(mergedOptions);this.columns=[];this.headers=[];this.options=mergedOptions;if(mergedOptions.tableElement){this.tableElement=mergedOptions.tableElement;this.tableElementID=mergedOptions.tableElement.id}}export(connector,options=this.options){const exportNames=options.firstRowAsNames!==false,useMultiLevelHeaders=options.useMultiLevelHeaders;const columns=connector.getSortedColumns(options.usePresentationOrder),columnNames=Object.keys(columns),htmlRows=[],columnsCount=columnNames.length;const rowArray=[];let tableHead="";if(exportNames){const subcategories=[];if(useMultiLevelHeaders){for(const name of columnNames){const subhead=(columns[name].shift()||"").toString();subcategories.push(subhead)}tableHead=this.getTableHeaderHTML(columnNames,subcategories,options)}else{tableHead=this.getTableHeaderHTML(void 0,columnNames,options)}}for(let columnIndex=0;columnIndex<columnsCount;columnIndex++){const columnName=columnNames[columnIndex],column=columns[columnName],columnLength=column.length;for(let rowIndex=0;rowIndex<columnLength;rowIndex++){let cellValue=column[rowIndex];if(!rowArray[rowIndex]){rowArray[rowIndex]=[]}if(!(typeof cellValue==="string"||typeof cellValue==="number"||typeof cellValue==="undefined")){cellValue=(cellValue||"").toString()}rowArray[rowIndex][columnIndex]=this.getCellHTMLFromValue(columnIndex?"td":"th",null,columnIndex?"":'scope="row"',cellValue);if(columnIndex===columnsCount-1){htmlRows.push("<tr>"+rowArray[rowIndex].join("")+"</tr>")}}}let caption="";if(options.tableCaption){caption='<caption class="highcharts-table-caption">'+options.tableCaption+"</caption>"}return"<table>"+caption+tableHead+"<tbody>"+htmlRows.join("")+"</tbody>"+"</table>"}getCellHTMLFromValue(tag,classes,attrs,value,decimalPoint){let val=value,className="text"+(classes?" "+classes:"");if(typeof val==="number"){val=val.toString();if(decimalPoint===","){val=val.replace(".",decimalPoint)}className="number"}else if(!value){val="";className="empty"}return"<"+tag+(attrs?" "+attrs:"")+' class="'+className+'">'+val+"</"+tag+">"}getTableHeaderHTML(topheaders=[],subheaders=[],options=this.options){const{useMultiLevelHeaders,useRowspanHeaders}=options;let html="<thead>",i=0,len=subheaders&&subheaders.length,next,cur,curColspan=0,rowspan;if(useMultiLevelHeaders&&topheaders&&subheaders&&!isRowEqual(topheaders,subheaders)){html+="<tr>";for(;i<len;++i){cur=topheaders[i];next=topheaders[i+1];if(cur===next){++curColspan}else if(curColspan){html+=this.getCellHTMLFromValue("th","highcharts-table-topheading",'scope="col" '+'colspan="'+(curColspan+1)+'"',cur);curColspan=0}else{if(cur===subheaders[i]){if(useRowspanHeaders){rowspan=2;delete subheaders[i]}else{rowspan=1;subheaders[i]=""}}else{rowspan=1}html+=this.getCellHTMLFromValue("th","highcharts-table-topheading",'scope="col"'+(rowspan>1?' valign="top" rowspan="'+rowspan+'"':""),cur)}}html+="</tr>"}if(subheaders){html+="<tr>";for(i=0,len=subheaders.length;i<len;++i){if(typeof subheaders[i]!=="undefined"){html+=this.getCellHTMLFromValue("th",null,'scope="col"',subheaders[i])}}html+="</tr>"}html+="</thead>";return html}parse(options,eventDetail){const converter=this,columns=[],headers=[],parseOptions=HTMLTableConverter_merge(converter.options,options),{endRow,startColumn,endColumn,firstRowAsNames}=parseOptions,tableHTML=parseOptions.tableElement||this.tableElement;if(!(tableHTML instanceof HTMLElement)){converter.emit({type:"parseError",columns:columns,detail:eventDetail,headers:headers,error:"Not a valid HTML Table"});return}converter.tableElement=tableHTML;converter.tableElementID=tableHTML.id;this.emit({type:"parse",columns:converter.columns,detail:eventDetail,headers:converter.headers});const rows=tableHTML.getElementsByTagName("tr"),rowsCount=rows.length;let rowIndex=0,item,{startRow}=parseOptions;if(firstRowAsNames&&rowsCount){const items=rows[0].children,itemsLength=items.length;for(let i=startColumn;i<itemsLength;i++){if(i>endColumn){break}item=items[i];if(item.tagName==="TD"||item.tagName==="TH"){headers.push(item.innerHTML)}}startRow++}while(rowIndex<rowsCount){if(rowIndex>=startRow&&rowIndex<=endRow){const columnsInRow=rows[rowIndex].children,columnsInRowLength=columnsInRow.length;let columnIndex=0;while(columnIndex<columnsInRowLength){const relativeColumnIndex=columnIndex-startColumn,row=columns[relativeColumnIndex];item=columnsInRow[columnIndex];if((item.tagName==="TD"||item.tagName==="TH")&&(columnIndex>=startColumn&&columnIndex<=endColumn)){if(!columns[relativeColumnIndex]){columns[relativeColumnIndex]=[]}let cellValue=converter.asGuessedType(item.innerHTML);if(cellValue instanceof Date){cellValue=cellValue.getTime()}columns[relativeColumnIndex][rowIndex-startRow]=cellValue;let i=1;while(rowIndex-startRow>=i&&row[rowIndex-startRow-i]===void 0){row[rowIndex-startRow-i]=null;i++}}columnIndex++}}rowIndex++}this.columns=columns;this.headers=headers;this.emit({type:"afterParse",columns:columns,detail:eventDetail,headers:headers})}getTable(){return Converters_DataConverter.getTableFromColumns(this.columns,this.headers)}}HTMLTableConverter.defaultOptions={...Converters_DataConverter.defaultOptions,useRowspanHeaders:true,useMultiLevelHeaders:true};const Converters_HTMLTableConverter=HTMLTableConverter;const{win}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();const{merge:HTMLTableConnector_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class HTMLTableConnector extends Connectors_DataConnector{constructor(options){const mergedOptions=HTMLTableConnector_merge(HTMLTableConnector.defaultOptions,options);super(mergedOptions);this.converter=new Converters_HTMLTableConverter(mergedOptions);this.options=mergedOptions}load(eventDetail){const connector=this,converter=connector.converter,table=connector.table,{dataModifier,table:tableHTML}=connector.options;connector.emit({type:"load",detail:eventDetail,table:table,tableElement:connector.tableElement});let tableElement;if(typeof tableHTML==="string"){connector.tableID=tableHTML;tableElement=win.document.getElementById(tableHTML)}else{tableElement=tableHTML;connector.tableID=tableElement.id}connector.tableElement=tableElement||void 0;if(!connector.tableElement){const error="HTML table not provided, or element with ID not found";connector.emit({type:"loadError",detail:eventDetail,error:error,table:table});return Promise.reject(new Error(error))}converter.parse(HTMLTableConnector_merge({tableElement:connector.tableElement},connector.options),eventDetail);table.deleteColumns();table.setColumns(converter.getTable().getColumns());return connector.setModifierOptions(dataModifier).then(()=>{connector.emit({type:"afterLoad",detail:eventDetail,table:table,tableElement:connector.tableElement});return connector})}}HTMLTableConnector.defaultOptions={table:""};Connectors_DataConnector.registerType("HTMLTable",HTMLTableConnector);const Connectors_HTMLTableConnector=null&&HTMLTableConnector;const{merge:ChainModifier_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class ChainModifier extends Modifiers_DataModifier{constructor(options,...chain){super();this.chain=chain;this.options=ChainModifier_merge(ChainModifier.defaultOptions,options);const optionsChain=this.options.chain||[];for(let i=0,iEnd=optionsChain.length,modifierOptions,ModifierClass;i<iEnd;++i){modifierOptions=optionsChain[i];if(!modifierOptions.type){continue}ModifierClass=Modifiers_DataModifier.types[modifierOptions.type];if(ModifierClass){chain.push(new ModifierClass(modifierOptions))}}}add(modifier,eventDetail){this.emit({type:"addModifier",detail:eventDetail,modifier:modifier});this.chain.push(modifier);this.emit({type:"addModifier",detail:eventDetail,modifier:modifier})}clear(eventDetail){this.emit({type:"clearChain",detail:eventDetail});this.chain.length=0;this.emit({type:"afterClearChain",detail:eventDetail})}async modify(table,eventDetail){const modifiers=this.options.reverse?this.chain.slice().reverse():this.chain.slice();if(table.modified===table){table.modified=table.clone(false,eventDetail)}let modified=table;for(let i=0,iEnd=modifiers.length;i<iEnd;++i){try{await modifiers[i].modify(modified,eventDetail)}catch(error){this.emit({type:"error",detail:eventDetail,table:table});throw error}modified=modified.modified}table.modified=modified;return table}modifyCell(table,columnName,rowIndex,cellValue,eventDetail){const modifiers=this.options.reverse?this.chain.reverse():this.chain;if(modifiers.length){let clone=table.clone();for(let i=0,iEnd=modifiers.length;i<iEnd;++i){modifiers[i].modifyCell(clone,columnName,rowIndex,cellValue,eventDetail);clone=clone.modified}table.modified=clone}return table}modifyColumns(table,columns,rowIndex,eventDetail){const modifiers=this.options.reverse?this.chain.reverse():this.chain.slice();if(modifiers.length){let clone=table.clone();for(let i=0,iEnd=modifiers.length;i<iEnd;++i){modifiers[i].modifyColumns(clone,columns,rowIndex,eventDetail);clone=clone.modified}table.modified=clone}return table}modifyRows(table,rows,rowIndex,eventDetail){const modifiers=this.options.reverse?this.chain.reverse():this.chain.slice();if(modifiers.length){let clone=table.clone();for(let i=0,iEnd=modifiers.length;i<iEnd;++i){modifiers[i].modifyRows(clone,rows,rowIndex,eventDetail);clone=clone.modified}table.modified=clone}return table}modifyTable(table,eventDetail){const chain=this;chain.emit({type:"modify",detail:eventDetail,table:table});const modifiers=chain.options.reverse?chain.chain.reverse():chain.chain.slice();let modified=table.modified;for(let i=0,iEnd=modifiers.length,modifier;i<iEnd;++i){modifier=modifiers[i];modified=modifier.modifyTable(modified,eventDetail).modified}table.modified=modified;chain.emit({type:"afterModify",detail:eventDetail,table:table});return table}remove(modifier,eventDetail){const modifiers=this.chain;this.emit({type:"removeModifier",detail:eventDetail,modifier:modifier});modifiers.splice(modifiers.indexOf(modifier),1);this.emit({type:"afterRemoveModifier",detail:eventDetail,modifier:modifier})}}ChainModifier.defaultOptions={type:"Chain"};Modifiers_DataModifier.registerType("Chain",ChainModifier);const Modifiers_ChainModifier=null&&ChainModifier;const{merge:InvertModifier_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class InvertModifier extends Modifiers_DataModifier{constructor(options){super();this.options=InvertModifier_merge(InvertModifier.defaultOptions,options)}modifyCell(table,columnName,rowIndex,cellValue,eventDetail){const modified=table.modified,modifiedRowIndex=modified.getRowIndexBy("columnNames",columnName);if(typeof modifiedRowIndex==="undefined"){modified.setColumns(this.modifyTable(table.clone()).getColumns(),void 0,eventDetail)}else{modified.setCell(`${rowIndex}`,modifiedRowIndex,cellValue,eventDetail)}return table}modifyColumns(table,columns,rowIndex,eventDetail){const modified=table.modified,modifiedColumnNames=modified.getColumn("columnNames")||[];let columnNames=table.getColumnNames(),reset=table.getRowCount()!==modifiedColumnNames.length;if(!reset){for(let i=0,iEnd=columnNames.length;i<iEnd;++i){if(columnNames[i]!==modifiedColumnNames[i]){reset=true;break}}}if(reset){return this.modifyTable(table,eventDetail)}columnNames=Object.keys(columns);for(let i=0,iEnd=columnNames.length,column,columnName,modifiedRowIndex;i<iEnd;++i){columnName=columnNames[i];column=columns[columnName];modifiedRowIndex=modified.getRowIndexBy("columnNames",columnName)||modified.getRowCount();for(let j=0,j2=rowIndex,jEnd=column.length;j<jEnd;++j,++j2){modified.setCell(`${j2}`,modifiedRowIndex,column[j],eventDetail)}}return table}modifyRows(table,rows,rowIndex,eventDetail){const columnNames=table.getColumnNames(),modified=table.modified,modifiedColumnNames=modified.getColumn("columnNames")||[];let reset=table.getRowCount()!==modifiedColumnNames.length;if(!reset){for(let i=0,iEnd=columnNames.length;i<iEnd;++i){if(columnNames[i]!==modifiedColumnNames[i]){reset=true;break}}}if(reset){return this.modifyTable(table,eventDetail)}for(let i=0,i2=rowIndex,iEnd=rows.length,row;i<iEnd;++i,++i2){row=rows[i];if(row instanceof Array){modified.setColumn(`${i2}`,row)}else{for(let j=0,jEnd=columnNames.length;j<jEnd;++j){modified.setCell(`${i2}`,j,row[columnNames[j]],eventDetail)}}}return table}modifyTable(table,eventDetail){const modifier=this;modifier.emit({type:"modify",detail:eventDetail,table:table});const modified=table.modified;if(table.hasColumns(["columnNames"])){const columnNames=((table.deleteColumns(["columnNames"])||{}).columnNames||[]).map(column=>`${column}`),columns={};for(let i=0,iEnd=table.getRowCount(),row;i<iEnd;++i){row=table.getRow(i);if(row){columns[columnNames[i]]=row}}modified.deleteColumns();modified.setColumns(columns)}else{const columns={};for(let i=0,iEnd=table.getRowCount(),row;i<iEnd;++i){row=table.getRow(i);if(row){columns[`${i}`]=row}}columns.columnNames=table.getColumnNames();modified.deleteColumns();modified.setColumns(columns)}modifier.emit({type:"afterModify",detail:eventDetail,table:table});return table}}InvertModifier.defaultOptions={type:"Invert"};Modifiers_DataModifier.registerType("Invert",InvertModifier);const Modifiers_InvertModifier=null&&InvertModifier;class MathModifier extends Modifiers_DataModifier{constructor(options){super();this.options={...MathModifier.defaultOptions,...options}}modifyTable(table,eventDetail){const modifier=this;modifier.emit({type:"modify",detail:eventDetail,table:table});const alternativeSeparators=modifier.options.alternativeSeparators,formulaColumns=modifier.options.formulaColumns||table.getColumnNames(),modified=table.modified;for(let i=0,iEnd=formulaColumns.length,columnName;i<iEnd;++i){columnName=formulaColumns[i];if(formulaColumns.indexOf(columnName)>=0){modified.setColumn(columnName,modifier.processColumn(table,columnName))}}const columnFormulas=modifier.options.columnFormulas||[];for(let i=0,iEnd=columnFormulas.length,columnFormula,formula;i<iEnd;++i){columnFormula=columnFormulas[i];formula=Formula_FormulaParser.parseFormula(columnFormula.formula,alternativeSeparators);modified.setColumn(columnFormula.column,modifier.processColumnFormula(formula,table,columnFormula.rowStart,columnFormula.rowEnd))}modifier.emit({type:"afterModify",detail:eventDetail,table:table});return table}processColumn(table,columnName,rowIndex=0){const alternativeSeparators=this.options.alternativeSeparators,column=(table.getColumn(columnName,true)||[]).slice(rowIndex>0?rowIndex:0);for(let i=0,iEnd=column.length,cacheFormula=[],cacheString="",cell;i<iEnd;++i){cell=column[i];if(typeof cell==="string"&&cell[0]==="="){try{cacheFormula=cacheString===cell?cacheFormula:Formula_FormulaParser.parseFormula(cell.substring(1),alternativeSeparators);column[i]=Formula_FormulaProcessor.processFormula(cacheFormula,table)}catch{column[i]=NaN}}}return column}processColumnFormula(formula,table,rowStart=0,rowEnd=table.getRowCount()){rowStart=rowStart>=0?rowStart:0;rowEnd=rowEnd>=0?rowEnd:table.getRowCount()+rowEnd;const column=[],modified=table.modified;for(let i=0,iEnd=rowEnd-rowStart;i<iEnd;++i){try{column[i]=Formula_FormulaProcessor.processFormula(formula,modified)}catch{column[i]=NaN}finally{formula=Formula_FormulaProcessor.translateReferences(formula,0,1)}}return column}}MathModifier.defaultOptions={type:"Math",alternativeSeparators:false};Modifiers_DataModifier.registerType("Math",MathModifier);const Modifiers_MathModifier=null&&MathModifier;const{merge:RangeModifier_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class RangeModifier extends Modifiers_DataModifier{constructor(options){super();this.options=RangeModifier_merge(RangeModifier.defaultOptions,options)}modifyTable(table,eventDetail){const modifier=this;modifier.emit({type:"modify",detail:eventDetail,table:table});let indexes=[];const{additive,ranges,strict}=modifier.options;if(ranges.length){const modified=table.modified;let columns=table.getColumns(),rows=[];for(let i=0,iEnd=ranges.length,range,rangeColumn;i<iEnd;++i){range=ranges[i];if(strict&&typeof range.minValue!==typeof range.maxValue){continue}if(i>0&&!additive){modified.deleteRows();modified.setRows(rows);modified.setOriginalRowIndexes(indexes,true);columns=modified.getColumns();rows=[];indexes=[]}rangeColumn=columns[range.column]||[];for(let j=0,jEnd=rangeColumn.length,cell,row,originalRowIndex;j<jEnd;++j){cell=rangeColumn[j];switch(typeof cell){default:continue;case"boolean":case"number":case"string":break}if(strict&&typeof cell!==typeof range.minValue){continue}if(cell>=range.minValue&&cell<=range.maxValue){if(additive){row=table.getRow(j);originalRowIndex=table.getOriginalRowIndex(j)}else{row=modified.getRow(j);originalRowIndex=modified.getOriginalRowIndex(j)}if(row){rows.push(row);indexes.push(originalRowIndex)}}}}modified.deleteRows();modified.setRows(rows);modified.setOriginalRowIndexes(indexes)}modifier.emit({type:"afterModify",detail:eventDetail,table:table});return table}}RangeModifier.defaultOptions={type:"Range",ranges:[]};Modifiers_DataModifier.registerType("Range",RangeModifier);const Modifiers_RangeModifier=null&&RangeModifier;const{merge:SortModifier_merge}=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();class SortModifier extends Modifiers_DataModifier{static ascending(a,b){return(a||0)<(b||0)?-1:(a||0)>(b||0)?1:0}static descending(a,b){return(b||0)<(a||0)?-1:(b||0)>(a||0)?1:0}constructor(options){super();this.options=SortModifier_merge(SortModifier.defaultOptions,options)}getRowReferences(table){const rows=table.getRows(),rowReferences=[];for(let i=0,iEnd=rows.length;i<iEnd;++i){rowReferences.push({index:i,row:rows[i]})}return rowReferences}modifyCell(table,columnName,rowIndex,cellValue,eventDetail){const modifier=this,{orderByColumn,orderInColumn}=modifier.options;if(columnName===orderByColumn){if(orderInColumn){table.modified.setCell(columnName,rowIndex,cellValue);table.modified.setColumn(orderInColumn,modifier.modifyTable(new Data_DataTable({columns:table.getColumns([orderByColumn,orderInColumn])})).modified.getColumn(orderInColumn))}else{modifier.modifyTable(table,eventDetail)}}return table}modifyColumns(table,columns,rowIndex,eventDetail){const modifier=this,{orderByColumn,orderInColumn}=modifier.options,columnNames=Object.keys(columns);if(columnNames.indexOf(orderByColumn)>-1){if(orderInColumn&&columns[columnNames[0]].length){table.modified.setColumns(columns,rowIndex);table.modified.setColumn(orderInColumn,modifier.modifyTable(new Data_DataTable({columns:table.getColumns([orderByColumn,orderInColumn])})).modified.getColumn(orderInColumn))}else{modifier.modifyTable(table,eventDetail)}}return table}modifyRows(table,rows,rowIndex,eventDetail){const modifier=this,{orderByColumn,orderInColumn}=modifier.options;if(orderInColumn&&rows.length){table.modified.setRows(rows,rowIndex);table.modified.setColumn(orderInColumn,modifier.modifyTable(new Data_DataTable({columns:table.getColumns([orderByColumn,orderInColumn])})).modified.getColumn(orderInColumn))}else{modifier.modifyTable(table,eventDetail)}return table}modifyTable(table,eventDetail){const modifier=this;modifier.emit({type:"modify",detail:eventDetail,table:table});const columnNames=table.getColumnNames(),rowCount=table.getRowCount(),rowReferences=this.getRowReferences(table),{direction,orderByColumn,orderInColumn}=modifier.options,compare=direction==="asc"?SortModifier.ascending:SortModifier.descending,orderByColumnIndex=columnNames.indexOf(orderByColumn),modified=table.modified;if(orderByColumnIndex!==-1){rowReferences.sort((a,b)=>compare(a.row[orderByColumnIndex],b.row[orderByColumnIndex]))}if(orderInColumn){const column=[];for(let i=0;i<rowCount;++i){column[rowReferences[i].index]=i}modified.setColumns({[orderInColumn]:column})}else{const originalIndexes=[];const rows=[];let rowReference;for(let i=0;i<rowCount;++i){rowReference=rowReferences[i];originalIndexes.push(modified.getOriginalRowIndex(rowReference.index));rows.push(rowReference.row)}modified.setRows(rows,0);modified.setOriginalRowIndexes(originalIndexes)}modifier.emit({type:"afterModify",detail:eventDetail,table:table});return table}}SortModifier.defaultOptions={type:"Sort",direction:"desc",orderByColumn:"y"};Modifiers_DataModifier.registerType("Sort",SortModifier);const Modifiers_SortModifier=null&&SortModifier;const G=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();G.DataConnector=G.DataConnector||Connectors_DataConnector;G.DataConverter=G.DataConverter||Converters_DataConverter;G.DataCursor=G.DataCursor||Data_DataCursor;G.DataModifier=G.DataModifier||Modifiers_DataModifier;G.DataPool=G.DataPool||Data_DataPool;G.DataTable=G.DataTable||Data_DataTable;G.Formula=G.Formula||Formula_Formula;const data_tools_src=highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default();__webpack_exports__=__webpack_exports__["default"];return __webpack_exports__})()});